{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$ref": "#/definitions/io.kestra.core.models.flows.Flow",
  "definitions": {
    "com.google.cloud.bigquery.EncryptionConfiguration": {
      "type": "object",
      "properties": { "kmsKeyName": { "type": "string" } }
    },
    "com.google.cloud.bigquery.StandardTableDefinition-StreamingBuffer": {
      "type": "object",
      "properties": {
        "estimatedBytes": { "type": "integer" },
        "estimatedRows": { "type": "integer" },
        "oldestEntryTime": { "type": "integer" }
      }
    },
    "com.google.cloud.storage.Cors-Origin": {
      "type": "object",
      "properties": { "value": { "type": "string" } }
    },
    "io.kestra.core.models.conditions.Condition-1": {
      "anyOf": [
        { "$ref": "#/definitions/io.kestra.core.models.conditions.types.NotCondition-2" },
        {
          "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionStatusCondition-2"
        },
        {
          "$ref": "#/definitions/io.kestra.core.models.conditions.types.DateTimeBetweenCondition-2"
        },
        { "$ref": "#/definitions/io.kestra.core.models.conditions.types.FlowCondition-2" },
        { "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionFlowCondition-2" },
        {
          "$ref": "#/definitions/io.kestra.core.models.conditions.types.HasRetryAttemptCondition-2"
        },
        {
          "$ref": "#/definitions/io.kestra.core.models.conditions.types.DayWeekInMonthCondition-2"
        },
        { "$ref": "#/definitions/io.kestra.core.models.conditions.types.DayWeekCondition-2" },
        { "$ref": "#/definitions/io.kestra.core.models.conditions.types.WeekendCondition-2" },
        {
          "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionNamespaceCondition-2"
        },
        { "$ref": "#/definitions/io.kestra.core.models.conditions.types.VariableCondition-2" },
        { "$ref": "#/definitions/io.kestra.core.models.conditions.types.FlowNamespaceCondition-2" },
        { "$ref": "#/definitions/io.kestra.core.models.conditions.types.OrCondition-2" },
        { "$ref": "#/definitions/io.kestra.core.models.conditions.types.MultipleCondition-2" }
      ]
    },
    "io.kestra.core.models.conditions.Condition-2": {
      "allOf": [{ "$ref": "#/definitions/io.kestra.core.models.conditions.Condition-1" }]
    },
    "io.kestra.core.models.conditions.types.DateTimeBetweenCondition-1": {
      "type": "object",
      "properties": {
        "after": { "type": "string", "title": "The date must after this one", "$dynamic": false },
        "before": { "type": "string", "title": "The date must before this one", "$dynamic": false },
        "date": {
          "type": "string",
          "title": "The date to test",
          "default": "{{ now() }}",
          "$dynamic": true,
          "markdownDescription": "Can be any variable or any valid ISO 8601 datetime, default will use `{{ now() }}`\n\nDefault value is : `\"{{ now() }}\"`"
        },
        "type": { "type": "string" }
      },
      "required": ["type"],
      "title": "Condition for allows events between two specific datetimes",
      "markdownDescription": "##### Examples\n> \n```yaml\n- conditions:\n    - type: io.kestra.core.models.conditions.types.DateTimeBetweenCondition\n      after: \"2013-09-08T16:19:12\"\n```"
    },
    "io.kestra.core.models.conditions.types.DateTimeBetweenCondition-2": {
      "allOf": [
        {
          "$ref": "#/definitions/io.kestra.core.models.conditions.types.DateTimeBetweenCondition-1"
        },
        {
          "type": "object",
          "properties": {
            "type": { "const": "io.kestra.core.models.conditions.types.DateTimeBetweenCondition" }
          },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\n- conditions:\n    - type: io.kestra.core.models.conditions.types.DateTimeBetweenCondition\n      after: \"2013-09-08T16:19:12\"\n```"
    },
    "io.kestra.core.models.conditions.types.DayWeekCondition-1": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "title": "The date to test",
          "default": "{{ now(format=\"iso_local_date\") }}",
          "$dynamic": true,
          "markdownDescription": "Can be any variable or any valid ISO 8601 datetime, default will use `{{ now(format=\"iso_local_date\") }}`\n\nDefault value is : `\"{{ now(format=\\\"iso_local_date\\\") }}\"`"
        },
        "dayOfWeek": {
          "type": "string",
          "enum": ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"],
          "title": "The day of week",
          "$dynamic": false
        },
        "type": { "type": "string" }
      },
      "required": ["dayOfWeek", "type"],
      "title": "Condition for allows events on weekdays",
      "markdownDescription": "##### Examples\n> \n```yaml\n- conditions:\n    - type: io.kestra.core.models.conditions.types.DayWeekCondition\n      dayOfWeek: \"MONDAY\"\n```"
    },
    "io.kestra.core.models.conditions.types.DayWeekCondition-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.models.conditions.types.DayWeekCondition-1" },
        {
          "type": "object",
          "properties": {
            "type": { "const": "io.kestra.core.models.conditions.types.DayWeekCondition" }
          },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\n- conditions:\n    - type: io.kestra.core.models.conditions.types.DayWeekCondition\n      dayOfWeek: \"MONDAY\"\n```"
    },
    "io.kestra.core.models.conditions.types.DayWeekInMonthCondition-1": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "title": "The date to test",
          "default": "{{ now(format=\"iso_local_date\") }}",
          "$dynamic": true,
          "markdownDescription": "Can be any variable or any valid ISO 8601 datetime, default will use `{{ now(format=\"iso_local_date\") }}`\n\nDefault value is : `\"{{ now(format=\\\"iso_local_date\\\") }}\"`"
        },
        "dayInMonth": {
          "type": "string",
          "enum": ["FIRST", "LAST", "SECOND", "THIRD", "FOURTH"],
          "title": "Are you looking at first or last day in month",
          "$dynamic": false
        },
        "dayOfWeek": {
          "type": "string",
          "enum": ["MONDAY", "TUESDAY", "WEDNESDAY", "THURSDAY", "FRIDAY", "SATURDAY", "SUNDAY"],
          "title": "The day of week",
          "$dynamic": false
        },
        "type": { "type": "string" }
      },
      "required": ["dayInMonth", "dayOfWeek", "type"],
      "title": "Condition for allows events on weekdays relative to current month (first, last, ...)",
      "markdownDescription": "##### Examples\n> \n```yaml\n- conditions:\n    - type: io.kestra.core.models.conditions.types.DayWeekInMonthCondition\n      dayOfWeek: MONDAY\n      dayInMonth: FIRST\n```"
    },
    "io.kestra.core.models.conditions.types.DayWeekInMonthCondition-2": {
      "allOf": [
        {
          "$ref": "#/definitions/io.kestra.core.models.conditions.types.DayWeekInMonthCondition-1"
        },
        {
          "type": "object",
          "properties": {
            "type": { "const": "io.kestra.core.models.conditions.types.DayWeekInMonthCondition" }
          },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\n- conditions:\n    - type: io.kestra.core.models.conditions.types.DayWeekInMonthCondition\n      dayOfWeek: MONDAY\n      dayInMonth: FIRST\n```"
    },
    "io.kestra.core.models.conditions.types.ExecutionFlowCondition-1": {
      "type": "object",
      "properties": {
        "flowId": { "type": "string", "title": "The flow id", "$dynamic": false },
        "namespace": { "type": "string", "title": "The namespace of the flow", "$dynamic": false },
        "type": { "type": "string" }
      },
      "required": ["flowId", "namespace", "type"],
      "title": "Condition for a specific flow of an execution",
      "markdownDescription": "##### Examples\n> \n```yaml\n- conditions:\n    - type: io.kestra.core.models.conditions.types.ExecutionFlowCondition\n      namespace: io.kestra.tests\n      flowId: my-current-flow\n```"
    },
    "io.kestra.core.models.conditions.types.ExecutionFlowCondition-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionFlowCondition-1" },
        {
          "type": "object",
          "properties": {
            "type": { "const": "io.kestra.core.models.conditions.types.ExecutionFlowCondition" }
          },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\n- conditions:\n    - type: io.kestra.core.models.conditions.types.ExecutionFlowCondition\n      namespace: io.kestra.tests\n      flowId: my-current-flow\n```"
    },
    "io.kestra.core.models.conditions.types.ExecutionNamespaceCondition-1": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string",
          "$dynamic": false,
          "markdownDescription": "The namespace of the flow or the prefix if `prefix` is true"
        },
        "prefix": {
          "type": "boolean",
          "default": false,
          "$dynamic": false,
          "markdownDescription": "If we must look at the flow namespace by prefix (simple startWith case sensitive)\n\nDefault value is : `false`"
        },
        "type": { "type": "string" }
      },
      "required": ["namespace", "type"],
      "title": "Condition for an execution namespace",
      "markdownDescription": "##### Examples\n> \n```yaml\n- conditions:\n    - type: io.kestra.core.models.conditions.types.ExecutionNamespaceCondition\n      namespace: io.kestra.tests\n      prefix: true\n```"
    },
    "io.kestra.core.models.conditions.types.ExecutionNamespaceCondition-2": {
      "allOf": [
        {
          "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionNamespaceCondition-1"
        },
        {
          "type": "object",
          "properties": {
            "type": {
              "const": "io.kestra.core.models.conditions.types.ExecutionNamespaceCondition"
            }
          },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\n- conditions:\n    - type: io.kestra.core.models.conditions.types.ExecutionNamespaceCondition\n      namespace: io.kestra.tests\n      prefix: true\n```"
    },
    "io.kestra.core.models.conditions.types.ExecutionStatusCondition-1": {
      "type": "object",
      "properties": {
        "in": {
          "title": "List of state that are authorized",
          "$dynamic": false,
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "CREATED",
              "RUNNING",
              "PAUSED",
              "RESTARTED",
              "KILLING",
              "SUCCESS",
              "WARNING",
              "FAILED",
              "KILLED"
            ],
            "$dynamic": false
          }
        },
        "notIn": {
          "title": "List of state that aren't authorized",
          "$dynamic": false,
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "CREATED",
              "RUNNING",
              "PAUSED",
              "RESTARTED",
              "KILLING",
              "SUCCESS",
              "WARNING",
              "FAILED",
              "KILLED"
            ],
            "$dynamic": false
          }
        },
        "type": { "type": "string" }
      },
      "required": ["type"],
      "title": "Condition based on execution status",
      "markdownDescription": "##### Examples\n> \n```yaml\n- conditions:\n    - type: io.kestra.core.models.conditions.types.ExecutionStatusCondition\n      in:\n        - SUCCESS\n      notIn: \n        - FAILED\n```"
    },
    "io.kestra.core.models.conditions.types.ExecutionStatusCondition-2": {
      "allOf": [
        {
          "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionStatusCondition-1"
        },
        {
          "type": "object",
          "properties": {
            "type": { "const": "io.kestra.core.models.conditions.types.ExecutionStatusCondition" }
          },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\n- conditions:\n    - type: io.kestra.core.models.conditions.types.ExecutionStatusCondition\n      in:\n        - SUCCESS\n      notIn: \n        - FAILED\n```"
    },
    "io.kestra.core.models.conditions.types.FlowCondition-1": {
      "type": "object",
      "properties": {
        "flowId": { "type": "string", "title": "The flow id", "$dynamic": false },
        "namespace": { "type": "string", "title": "The namespace of the flow", "$dynamic": false },
        "type": { "type": "string" }
      },
      "required": ["flowId", "namespace", "type"],
      "title": "Condition for a specific flow",
      "$deprecated": "true",
      "markdownDescription": "##### Examples\n> \n```yaml\n- conditions:\n    - type: io.kestra.core.models.conditions.types.FlowCondition\n      namespace: io.kestra.tests\n      flowId: my-current-flow\n```"
    },
    "io.kestra.core.models.conditions.types.FlowCondition-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.models.conditions.types.FlowCondition-1" },
        {
          "type": "object",
          "properties": {
            "type": { "const": "io.kestra.core.models.conditions.types.FlowCondition" }
          },
          "required": ["type"]
        }
      ],
      "$deprecated": "true",
      "markdownDescription": "##### Examples\n> \n```yaml\n- conditions:\n    - type: io.kestra.core.models.conditions.types.FlowCondition\n      namespace: io.kestra.tests\n      flowId: my-current-flow\n```"
    },
    "io.kestra.core.models.conditions.types.FlowNamespaceCondition-1": {
      "type": "object",
      "properties": {
        "namespace": {
          "type": "string",
          "title": "The namespace of the flow or the prefix if `prefix` is true",
          "$dynamic": false
        },
        "prefix": {
          "type": "boolean",
          "title": "If we must look at the flow namespace by prefix (simple startWith case sensitive)",
          "default": false,
          "$dynamic": false,
          "markdownDescription": "Default value is : `false`"
        },
        "type": { "type": "string" }
      },
      "required": ["namespace", "type"],
      "title": "Condition for a flow namespace",
      "markdownDescription": "##### Examples\n> \n```yaml\n- conditions:\n    - type: io.kestra.core.models.conditions.types.FlowNamespaceCondition\n      namespace: io.kestra.tests\n      prefix: true\n```"
    },
    "io.kestra.core.models.conditions.types.FlowNamespaceCondition-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.models.conditions.types.FlowNamespaceCondition-1" },
        {
          "type": "object",
          "properties": {
            "type": { "const": "io.kestra.core.models.conditions.types.FlowNamespaceCondition" }
          },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\n- conditions:\n    - type: io.kestra.core.models.conditions.types.FlowNamespaceCondition\n      namespace: io.kestra.tests\n      prefix: true\n```"
    },
    "io.kestra.core.models.conditions.types.HasRetryAttemptCondition-1": {
      "type": "object",
      "properties": {
        "in": {
          "title": "List of state that are authorized",
          "$dynamic": false,
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "CREATED",
              "RUNNING",
              "PAUSED",
              "RESTARTED",
              "KILLING",
              "SUCCESS",
              "WARNING",
              "FAILED",
              "KILLED"
            ],
            "$dynamic": false
          }
        },
        "notIn": {
          "title": "List of state that aren't authorized",
          "$dynamic": false,
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "CREATED",
              "RUNNING",
              "PAUSED",
              "RESTARTED",
              "KILLING",
              "SUCCESS",
              "WARNING",
              "FAILED",
              "KILLED"
            ],
            "$dynamic": false
          }
        },
        "type": { "type": "string" }
      },
      "required": ["type"],
      "title": "Condition that match if any taskRun have any multiple attempts retries",
      "markdownDescription": "##### Examples\n> \n```yaml\n- conditions:\n    - type: io.kestra.core.models.conditions.types.HasRetryAttemptCondition\n      in:\n        - KILLED\n```"
    },
    "io.kestra.core.models.conditions.types.HasRetryAttemptCondition-2": {
      "allOf": [
        {
          "$ref": "#/definitions/io.kestra.core.models.conditions.types.HasRetryAttemptCondition-1"
        },
        {
          "type": "object",
          "properties": {
            "type": { "const": "io.kestra.core.models.conditions.types.HasRetryAttemptCondition" }
          },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\n- conditions:\n    - type: io.kestra.core.models.conditions.types.HasRetryAttemptCondition\n      in:\n        - KILLED\n```"
    },
    "io.kestra.core.models.conditions.types.MultipleCondition-1": {
      "type": "object",
      "properties": {
        "conditions": {
          "type": "object",
          "title": "The list of conditions to wait for",
          "additionalProperties": {
            "$ref": "#/definitions/io.kestra.core.models.conditions.Condition-2"
          },
          "$dynamic": false,
          "markdownDescription": "The key must be unique for a trigger since it will be use to store previous result."
        },
        "id": {
          "type": "string",
          "title": "A unique id for the whole flow",
          "minLength": 1,
          "pattern": "[a-zA-Z0-9_-]+",
          "$dynamic": false
        },
        "type": { "type": "string" },
        "window": {
          "type": "string",
          "format": "duration",
          "title": "The duration of the window",
          "$dynamic": false,
          "markdownDescription": "See [ISO_8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) for more information of available duration value.\nThe start of the window is always based on midnight except if you set windowAdvance parameter. Eg if you have a 10 minutes (PT10M) window, the first window will be 00:00 to 00:10 and a new window will be started each 10 minutes"
        },
        "windowAdvance": {
          "type": "string",
          "format": "duration",
          "title": "The window advance duration",
          "$dynamic": false,
          "markdownDescription": "Allow to specify the start hour of the window\nEg: you want a window of 6 hours (window=PT6H). By default the check will be done between: \n00:00 and 06:00 - 06:00 and 12:00 - 12:00 and 18:00 - 18:00 and 00:00 If you want to check the window between: \n03:00 and 09:00 - 09:00 and 15:00 - 15:00 and 21:00 - 21:00 and 3:00You will have to shift the window of 3 hours by settings windowAdvance: PT3H"
        }
      },
      "required": ["conditions", "id", "type", "window", "windowAdvance"],
      "title": "Condition for a list of flow",
      "markdownDescription": "Trigger the first time all the flow are successfully executed during the `window` duration ##### Examples\n> A flow that is waiting for 2 flows that is successful in 1 days\n```yaml\ntriggers:\n  - id: multiple-listen-flow\n    type: io.kestra.core.models.triggers.types.Flow\n    conditions:\n      - id: multiple\n        type: io.kestra.core.models.conditions.types.MultipleCondition\n        window: P1D\n        windowAdvance: P0D\n        conditions:\n          success:\n            type: io.kestra.core.models.conditions.types.ExecutionStatusCondition\n            in:\n              - SUCCESS\n          flow-a:\n            type: io.kestra.core.models.conditions.types.ExecutionFlowCondition\n            namespace: io.kestra.tests\n            flowId: trigger-multiplecondition-flow-a\n          flow-b:\n            type: io.kestra.core.models.conditions.types.ExecutionFlowCondition\n            namespace: io.kestra.tests\n            flowId: trigger-multiplecondition-flow-b\n```"
    },
    "io.kestra.core.models.conditions.types.MultipleCondition-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.models.conditions.types.MultipleCondition-1" },
        {
          "type": "object",
          "properties": {
            "type": { "const": "io.kestra.core.models.conditions.types.MultipleCondition" }
          },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> A flow that is waiting for 2 flows that is successful in 1 days\n```yaml\ntriggers:\n  - id: multiple-listen-flow\n    type: io.kestra.core.models.triggers.types.Flow\n    conditions:\n      - id: multiple\n        type: io.kestra.core.models.conditions.types.MultipleCondition\n        window: P1D\n        windowAdvance: P0D\n        conditions:\n          success:\n            type: io.kestra.core.models.conditions.types.ExecutionStatusCondition\n            in:\n              - SUCCESS\n          flow-a:\n            type: io.kestra.core.models.conditions.types.ExecutionFlowCondition\n            namespace: io.kestra.tests\n            flowId: trigger-multiplecondition-flow-a\n          flow-b:\n            type: io.kestra.core.models.conditions.types.ExecutionFlowCondition\n            namespace: io.kestra.tests\n            flowId: trigger-multiplecondition-flow-b\n```"
    },
    "io.kestra.core.models.conditions.types.NotCondition-1": {
      "type": "object",
      "properties": {
        "conditions": {
          "title": "The list of conditions to exclude",
          "minItems": 1,
          "$dynamic": false,
          "markdownDescription": "If any conditions is true, it will prevent events execution.",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.models.conditions.types.NotCondition-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionStatusCondition-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.core.models.conditions.types.DateTimeBetweenCondition-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.core.models.conditions.types.FlowCondition-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionFlowCondition-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.core.models.conditions.types.HasRetryAttemptCondition-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.core.models.conditions.types.DayWeekInMonthCondition-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.core.models.conditions.types.DayWeekCondition-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.core.models.conditions.types.WeekendCondition-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionNamespaceCondition-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.core.models.conditions.types.VariableCondition-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.core.models.conditions.types.FlowNamespaceCondition-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.models.conditions.types.OrCondition-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.core.models.conditions.types.MultipleCondition-2"
                  },
                  { "$dynamic": false }
                ]
              }
            ]
          }
        },
        "type": { "type": "string" }
      },
      "required": ["conditions", "type"],
      "title": "Condition to exclude others conditions",
      "markdownDescription": "##### Examples\n> \n```yaml\n- conditions:\n    - type: io.kestra.core.models.conditions.types.NotCondition\n      conditions:\n      -  type: io.kestra.core.models.conditions.types.DateBetweenCondition\n         after: \"2013-09-08T16:19:12\"\n```"
    },
    "io.kestra.core.models.conditions.types.NotCondition-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.models.conditions.types.NotCondition-1" },
        {
          "type": "object",
          "properties": {
            "type": { "const": "io.kestra.core.models.conditions.types.NotCondition" }
          },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\n- conditions:\n    - type: io.kestra.core.models.conditions.types.NotCondition\n      conditions:\n      -  type: io.kestra.core.models.conditions.types.DateBetweenCondition\n         after: \"2013-09-08T16:19:12\"\n```"
    },
    "io.kestra.core.models.conditions.types.OrCondition-1": {
      "type": "object",
      "properties": {
        "conditions": {
          "title": "The list of conditions to exclude",
          "minItems": 1,
          "$dynamic": false,
          "markdownDescription": "If any conditions is true, it will allow events.",
          "type": "array",
          "items": {
            "anyOf": [
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.models.conditions.types.NotCondition-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionStatusCondition-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.core.models.conditions.types.DateTimeBetweenCondition-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.core.models.conditions.types.FlowCondition-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionFlowCondition-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.core.models.conditions.types.HasRetryAttemptCondition-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.core.models.conditions.types.DayWeekInMonthCondition-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.core.models.conditions.types.DayWeekCondition-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.core.models.conditions.types.WeekendCondition-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionNamespaceCondition-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.core.models.conditions.types.VariableCondition-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.core.models.conditions.types.FlowNamespaceCondition-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.models.conditions.types.OrCondition-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.core.models.conditions.types.MultipleCondition-2"
                  },
                  { "$dynamic": false }
                ]
              }
            ]
          }
        },
        "type": { "type": "string" }
      },
      "required": ["conditions", "type"],
      "title": "Condition to have at least once conditions validated",
      "markdownDescription": "##### Examples\n> \n```yaml\n- conditions:\n    - type: io.kestra.core.models.conditions.types.OrCondition\n      conditions:\n      -  type: io.kestra.core.models.conditions.types.DayWeekCondition\n         dayOfWeek: \"MONDAY\"\n      -  type: io.kestra.core.models.conditions.types.DayWeekCondition\n         dayOfWeek: \"SUNDAY\"\n```"
    },
    "io.kestra.core.models.conditions.types.OrCondition-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.models.conditions.types.OrCondition-1" },
        {
          "type": "object",
          "properties": {
            "type": { "const": "io.kestra.core.models.conditions.types.OrCondition" }
          },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\n- conditions:\n    - type: io.kestra.core.models.conditions.types.OrCondition\n      conditions:\n      -  type: io.kestra.core.models.conditions.types.DayWeekCondition\n         dayOfWeek: \"MONDAY\"\n      -  type: io.kestra.core.models.conditions.types.DayWeekCondition\n         dayOfWeek: \"SUNDAY\"\n```"
    },
    "io.kestra.core.models.conditions.types.VariableCondition-1": {
      "type": "object",
      "properties": {
        "expression": { "type": "string", "minLength": 1, "$dynamic": false },
        "type": { "type": "string" }
      },
      "required": ["expression", "type"],
      "title": "Condition based on variables expression",
      "markdownDescription": "If the result is an empty string, a string containing only space or `false`, the condition will be false##### Examples\n> A condition that will return false for a missing variable\n```yaml\n- conditions:\n    - type: io.kestra.core.models.conditions.types.VariableCondition\n      expression: {{ unknown is defined }}\n```"
    },
    "io.kestra.core.models.conditions.types.VariableCondition-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.models.conditions.types.VariableCondition-1" },
        {
          "type": "object",
          "properties": {
            "type": { "const": "io.kestra.core.models.conditions.types.VariableCondition" }
          },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> A condition that will return false for a missing variable\n```yaml\n- conditions:\n    - type: io.kestra.core.models.conditions.types.VariableCondition\n      expression: {{ unknown is defined }}\n```"
    },
    "io.kestra.core.models.conditions.types.WeekendCondition-1": {
      "type": "object",
      "properties": {
        "date": {
          "type": "string",
          "title": "The date to test",
          "default": "{{ now(format(\"iso_local_date\") }}",
          "$dynamic": true,
          "markdownDescription": "Can be any variable or any valid ISO 8601 datetime, default will use `{{ now(format=\"iso_local_date\") }}`\n\nDefault value is : `\"{{ now(format(\\\"iso_local_date\\\") }}\"`"
        },
        "type": { "type": "string" }
      },
      "required": ["type"],
      "title": "Condition for allows events on weekend",
      "markdownDescription": "##### Examples\n> \n```yaml\n- conditions:\n    - type: io.kestra.core.models.conditions.types.WeekendCondition\n```"
    },
    "io.kestra.core.models.conditions.types.WeekendCondition-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.models.conditions.types.WeekendCondition-1" },
        {
          "type": "object",
          "properties": {
            "type": { "const": "io.kestra.core.models.conditions.types.WeekendCondition" }
          },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\n- conditions:\n    - type: io.kestra.core.models.conditions.types.WeekendCondition\n```"
    },
    "io.kestra.core.models.executions.statistics.Flow": {
      "type": "object",
      "properties": { "flowId": { "type": "string" }, "namespace": { "type": "string" } },
      "required": ["flowId", "namespace"]
    },
    "io.kestra.core.models.flows.Flow": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "errors": {
          "type": "array",
          "items": {
            "anyOf": [
              { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.List-2" },
              { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Create-2" },
              { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.ReadRange-2" },
              { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Upload-2" },
              { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Export-2" },
              { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.Read-2" },
              { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Delete-2" },
              { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Download-2" },
              { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackExecution-2" },
              { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailTemplate-2" },
              {
                "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackIncomingWebhook-2"
              },
              { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailSend-2" },
              { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackTemplate-2" },
              { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailExecution-2" },
              { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetReader-2" },
              { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroConverter-2" },
              { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonWriter-2" },
              { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlReader-2" },
              { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvWriter-2" },
              { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonReader-2" },
              { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroWriter-2" },
              { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetWriter-2" },
              { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvReader-2" },
              { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlWriter-2" },
              { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroReader-2" },
              { "$ref": "#/definitions/io.kestra.plugin.openlineage.Emit-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Downloads-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Move-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Delete-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.http.Request-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Upload-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Move-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.List-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.List-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Move-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Upload-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Upload-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Download-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Delete-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Download-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Downloads-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Delete-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.http.Download-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.List-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Downloads-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Download-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.StorageWrite-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Copy-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateTable-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.TableMetadata-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteTable-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteBucket-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Downloads-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.UpdateBucket-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Download-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateDataset-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateTable-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucketIamPolicy-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Compose-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.LoadFromGcs-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gke.ClusterMetadata-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.ExtractToGcs-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.auth.OauthAccessToken-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Delete-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateDataset-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.vertexai.CustomJob-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Upload-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CopyPartitions-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteDataset-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeletePartitions-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.List-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucket-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteList-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Copy-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Load-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Query-2" },
              { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Request-2" },
              { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Load-2" },
              { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Put-2" },
              { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Search-2" },
              { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Scroll-2" },
              { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Get-2" },
              { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Bulk-2" },
              { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.FileTransform-2" },
              { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.Eval-2" },
              { "$ref": "#/definitions/io.kestra.plugin.airbyte.connections.Sync-2" },
              { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveCompress-2" },
              { "$ref": "#/definitions/io.kestra.plugin.compress.FileDecompress-2" },
              { "$ref": "#/definitions/io.kestra.plugin.compress.FileCompress-2" },
              { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveDecompress-2" },
              { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Snapshot-2" },
              { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Test-2" },
              { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Seed-2" },
              { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Setup-2" },
              { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.List-2" },
              { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Freshness-2" },
              { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Compile-2" },
              { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Build-2" },
              { "$ref": "#/definitions/io.kestra.plugin.dbt.cloud.TriggerRun-2" },
              { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Run-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.flows.AllowFailure-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.executions.Fail-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.states.Set-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.flows.Pause-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.log.Fetch-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.storages.Concat-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.states.Get-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.states.Delete-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Node-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.flows.Switch-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.flows.Parallel-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.storages.PurgeExecution-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.flows.Worker-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Bash-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.storages.Purge-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Echo-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.flows.Sequential-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Python-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.flows.If-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.flows.Flow-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.storages.Delete-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.storages.Split-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.executions.Counts-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.log.Log-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachParallel-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.storages.Size-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachSequential-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.flows.Template-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Return-2" }
            ]
          }
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9._-]+" },
        "inputs": {
          "type": "array",
          "items": {
            "anyOf": [
              { "$ref": "#/definitions/io.kestra.core.models.flows.input.BooleanInput-2" },
              { "$ref": "#/definitions/io.kestra.core.models.flows.input.DateInput-2" },
              { "$ref": "#/definitions/io.kestra.core.models.flows.input.DateTimeInput-2" },
              { "$ref": "#/definitions/io.kestra.core.models.flows.input.DurationInput-2" },
              { "$ref": "#/definitions/io.kestra.core.models.flows.input.FileInput-2" },
              { "$ref": "#/definitions/io.kestra.core.models.flows.input.FloatInput-2" },
              { "$ref": "#/definitions/io.kestra.core.models.flows.input.IntInput-2" },
              { "$ref": "#/definitions/io.kestra.core.models.flows.input.JsonInput-2" },
              { "$ref": "#/definitions/io.kestra.core.models.flows.input.StringInput-2" },
              { "$ref": "#/definitions/io.kestra.core.models.flows.input.TimeInput-2" },
              { "$ref": "#/definitions/io.kestra.core.models.flows.input.URIInput-2" }
            ]
          }
        },
        "labels": { "type": "object" },
        "listeners": {
          "type": "array",
          "items": { "$ref": "#/definitions/io.kestra.core.models.listeners.Listener" }
        },
        "namespace": { "type": "string", "pattern": "[a-z0-9._-]+" },
        "revision": { "type": "integer", "minimum": 1 },
        "taskDefaults": {
          "type": "array",
          "items": { "$ref": "#/definitions/io.kestra.core.models.flows.TaskDefault" }
        },
        "tasks": {
          "minItems": 1,
          "type": "array",
          "items": {
            "anyOf": [
              { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.List-2" },
              { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Create-2" },
              { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.ReadRange-2" },
              { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Upload-2" },
              { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Export-2" },
              { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.Read-2" },
              { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Delete-2" },
              { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Download-2" },
              { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackExecution-2" },
              { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailTemplate-2" },
              {
                "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackIncomingWebhook-2"
              },
              { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailSend-2" },
              { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackTemplate-2" },
              { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailExecution-2" },
              { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetReader-2" },
              { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroConverter-2" },
              { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonWriter-2" },
              { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlReader-2" },
              { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvWriter-2" },
              { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonReader-2" },
              { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroWriter-2" },
              { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetWriter-2" },
              { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvReader-2" },
              { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlWriter-2" },
              { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroReader-2" },
              { "$ref": "#/definitions/io.kestra.plugin.openlineage.Emit-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Downloads-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Move-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Delete-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.http.Request-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Upload-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Move-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.List-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.List-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Move-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Upload-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Upload-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Download-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Delete-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Download-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Downloads-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Delete-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.http.Download-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.List-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Downloads-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Download-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.StorageWrite-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Copy-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateTable-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.TableMetadata-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteTable-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteBucket-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Downloads-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.UpdateBucket-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Download-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateDataset-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateTable-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucketIamPolicy-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Compose-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.LoadFromGcs-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gke.ClusterMetadata-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.ExtractToGcs-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.auth.OauthAccessToken-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Delete-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateDataset-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.vertexai.CustomJob-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Upload-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CopyPartitions-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteDataset-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeletePartitions-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.List-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucket-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteList-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Copy-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Load-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Query-2" },
              { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Request-2" },
              { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Load-2" },
              { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Put-2" },
              { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Search-2" },
              { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Scroll-2" },
              { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Get-2" },
              { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Bulk-2" },
              { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.FileTransform-2" },
              { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.Eval-2" },
              { "$ref": "#/definitions/io.kestra.plugin.airbyte.connections.Sync-2" },
              { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveCompress-2" },
              { "$ref": "#/definitions/io.kestra.plugin.compress.FileDecompress-2" },
              { "$ref": "#/definitions/io.kestra.plugin.compress.FileCompress-2" },
              { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveDecompress-2" },
              { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Snapshot-2" },
              { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Test-2" },
              { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Seed-2" },
              { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Setup-2" },
              { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.List-2" },
              { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Freshness-2" },
              { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Compile-2" },
              { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Build-2" },
              { "$ref": "#/definitions/io.kestra.plugin.dbt.cloud.TriggerRun-2" },
              { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Run-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.flows.AllowFailure-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.executions.Fail-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.states.Set-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.flows.Pause-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.log.Fetch-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.storages.Concat-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.states.Get-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.states.Delete-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Node-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.flows.Switch-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.flows.Parallel-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.storages.PurgeExecution-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.flows.Worker-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Bash-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.storages.Purge-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Echo-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.flows.Sequential-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Python-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.flows.If-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.flows.Flow-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.storages.Delete-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.storages.Split-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.executions.Counts-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.log.Log-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachParallel-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.storages.Size-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachSequential-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.flows.Template-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Return-2" }
            ]
          }
        },
        "triggers": {
          "type": "array",
          "items": {
            "anyOf": [
              { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Trigger-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Trigger-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Trigger-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Trigger-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Trigger-2" },
              { "$ref": "#/definitions/io.kestra.core.models.triggers.types.Webhook-2" },
              { "$ref": "#/definitions/io.kestra.core.models.triggers.types.Schedule-2" },
              { "$ref": "#/definitions/io.kestra.core.models.triggers.types.Flow-2" }
            ]
          }
        },
        "variables": { "type": "object" }
      },
      "required": ["id", "namespace", "tasks"]
    },
    "io.kestra.core.models.flows.TaskDefault": {
      "type": "object",
      "properties": {
        "forced": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "type": { "type": "string" },
        "values": { "type": "object" }
      }
    },
    "io.kestra.core.models.flows.input.BooleanInput-1": {
      "type": "object",
      "properties": {
        "defaults": { "type": "string" },
        "description": { "type": "string" },
        "name": { "type": "string", "minLength": 1, "pattern": "[.a-zA-Z0-9_-]+" },
        "required": { "type": "boolean" },
        "type": {
          "type": "string",
          "enum": [
            "STRING",
            "INT",
            "FLOAT",
            "BOOLEAN",
            "DATETIME",
            "DATE",
            "TIME",
            "DURATION",
            "FILE",
            "JSON",
            "URI"
          ]
        }
      },
      "required": ["name", "type"]
    },
    "io.kestra.core.models.flows.input.BooleanInput-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.models.flows.input.BooleanInput-1" },
        { "type": "object", "properties": { "type": { "const": "BOOLEAN" } }, "required": ["type"] }
      ]
    },
    "io.kestra.core.models.flows.input.DateInput-1": {
      "type": "object",
      "properties": {
        "after": { "type": "string", "title": "Minimal value." },
        "before": { "type": "string", "title": "Maximal value." },
        "defaults": { "type": "string" },
        "description": { "type": "string" },
        "name": { "type": "string", "minLength": 1, "pattern": "[.a-zA-Z0-9_-]+" },
        "required": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Default value is : `true`"
        },
        "type": {
          "type": "string",
          "enum": [
            "STRING",
            "INT",
            "FLOAT",
            "BOOLEAN",
            "DATETIME",
            "DATE",
            "TIME",
            "DURATION",
            "FILE",
            "JSON",
            "URI"
          ]
        }
      },
      "required": ["name", "type"]
    },
    "io.kestra.core.models.flows.input.DateInput-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.models.flows.input.DateInput-1" },
        { "type": "object", "properties": { "type": { "const": "DATE" } }, "required": ["type"] }
      ]
    },
    "io.kestra.core.models.flows.input.DateTimeInput-1": {
      "type": "object",
      "properties": {
        "after": { "type": "string", "title": "Minimal value." },
        "before": { "type": "string", "title": "Maximal value." },
        "defaults": { "type": "string" },
        "description": { "type": "string" },
        "name": { "type": "string", "minLength": 1, "pattern": "[.a-zA-Z0-9_-]+" },
        "required": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Default value is : `true`"
        },
        "type": {
          "type": "string",
          "enum": [
            "STRING",
            "INT",
            "FLOAT",
            "BOOLEAN",
            "DATETIME",
            "DATE",
            "TIME",
            "DURATION",
            "FILE",
            "JSON",
            "URI"
          ]
        }
      },
      "required": ["name", "type"]
    },
    "io.kestra.core.models.flows.input.DateTimeInput-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.models.flows.input.DateTimeInput-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "DATETIME" } },
          "required": ["type"]
        }
      ]
    },
    "io.kestra.core.models.flows.input.DurationInput-1": {
      "type": "object",
      "properties": {
        "defaults": { "type": "string" },
        "description": { "type": "string" },
        "max": { "type": "string", "format": "duration", "title": "Maximal value." },
        "min": { "type": "string", "format": "duration", "title": "Minimal value." },
        "name": { "type": "string", "minLength": 1, "pattern": "[.a-zA-Z0-9_-]+" },
        "required": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Default value is : `true`"
        },
        "type": {
          "type": "string",
          "enum": [
            "STRING",
            "INT",
            "FLOAT",
            "BOOLEAN",
            "DATETIME",
            "DATE",
            "TIME",
            "DURATION",
            "FILE",
            "JSON",
            "URI"
          ]
        }
      },
      "required": ["name", "type"]
    },
    "io.kestra.core.models.flows.input.DurationInput-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.models.flows.input.DurationInput-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "DURATION" } },
          "required": ["type"]
        }
      ]
    },
    "io.kestra.core.models.flows.input.FileInput-1": {
      "type": "object",
      "properties": {
        "defaults": { "type": "string" },
        "description": { "type": "string" },
        "extension": { "type": "string", "title": "The file extension." },
        "name": { "type": "string", "minLength": 1, "pattern": "[.a-zA-Z0-9_-]+" },
        "required": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Default value is : `true`"
        },
        "type": {
          "type": "string",
          "enum": [
            "STRING",
            "INT",
            "FLOAT",
            "BOOLEAN",
            "DATETIME",
            "DATE",
            "TIME",
            "DURATION",
            "FILE",
            "JSON",
            "URI"
          ]
        }
      },
      "required": ["name", "type"]
    },
    "io.kestra.core.models.flows.input.FileInput-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.models.flows.input.FileInput-1" },
        { "type": "object", "properties": { "type": { "const": "FILE" } }, "required": ["type"] }
      ]
    },
    "io.kestra.core.models.flows.input.FloatInput-1": {
      "type": "object",
      "properties": {
        "defaults": { "type": "string" },
        "description": { "type": "string" },
        "max": { "type": "number", "title": "Maximal value." },
        "min": { "type": "number", "title": "Minimal value." },
        "name": { "type": "string", "minLength": 1, "pattern": "[.a-zA-Z0-9_-]+" },
        "required": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Default value is : `true`"
        },
        "type": {
          "type": "string",
          "enum": [
            "STRING",
            "INT",
            "FLOAT",
            "BOOLEAN",
            "DATETIME",
            "DATE",
            "TIME",
            "DURATION",
            "FILE",
            "JSON",
            "URI"
          ]
        }
      },
      "required": ["name", "type"]
    },
    "io.kestra.core.models.flows.input.FloatInput-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.models.flows.input.FloatInput-1" },
        { "type": "object", "properties": { "type": { "const": "FLOAT" } }, "required": ["type"] }
      ]
    },
    "io.kestra.core.models.flows.input.IntInput-1": {
      "type": "object",
      "properties": {
        "defaults": { "type": "string" },
        "description": { "type": "string" },
        "max": { "type": "integer", "title": "Maximal value." },
        "min": { "type": "integer", "title": "Minimal value." },
        "name": { "type": "string", "minLength": 1, "pattern": "[.a-zA-Z0-9_-]+" },
        "required": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Default value is : `true`"
        },
        "type": {
          "type": "string",
          "enum": [
            "STRING",
            "INT",
            "FLOAT",
            "BOOLEAN",
            "DATETIME",
            "DATE",
            "TIME",
            "DURATION",
            "FILE",
            "JSON",
            "URI"
          ]
        }
      },
      "required": ["name", "type"]
    },
    "io.kestra.core.models.flows.input.IntInput-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.models.flows.input.IntInput-1" },
        { "type": "object", "properties": { "type": { "const": "INT" } }, "required": ["type"] }
      ]
    },
    "io.kestra.core.models.flows.input.JsonInput-1": {
      "type": "object",
      "properties": {
        "defaults": { "type": "string" },
        "description": { "type": "string" },
        "name": { "type": "string", "minLength": 1, "pattern": "[.a-zA-Z0-9_-]+" },
        "required": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Default value is : `true`"
        },
        "type": {
          "type": "string",
          "enum": [
            "STRING",
            "INT",
            "FLOAT",
            "BOOLEAN",
            "DATETIME",
            "DATE",
            "TIME",
            "DURATION",
            "FILE",
            "JSON",
            "URI"
          ]
        }
      },
      "required": ["name", "type"]
    },
    "io.kestra.core.models.flows.input.JsonInput-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.models.flows.input.JsonInput-1" },
        { "type": "object", "properties": { "type": { "const": "JSON" } }, "required": ["type"] }
      ]
    },
    "io.kestra.core.models.flows.input.StringInput-1": {
      "type": "object",
      "properties": {
        "defaults": { "type": "string" },
        "description": { "type": "string" },
        "name": { "type": "string", "minLength": 1, "pattern": "[.a-zA-Z0-9_-]+" },
        "required": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Default value is : `true`"
        },
        "type": {
          "type": "string",
          "enum": [
            "STRING",
            "INT",
            "FLOAT",
            "BOOLEAN",
            "DATETIME",
            "DATE",
            "TIME",
            "DURATION",
            "FILE",
            "JSON",
            "URI"
          ]
        },
        "validator": { "type": "string", "title": "Regular expression validating the value." }
      },
      "required": ["name", "type"]
    },
    "io.kestra.core.models.flows.input.StringInput-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.models.flows.input.StringInput-1" },
        { "type": "object", "properties": { "type": { "const": "STRING" } }, "required": ["type"] }
      ]
    },
    "io.kestra.core.models.flows.input.TimeInput-1": {
      "type": "object",
      "properties": {
        "after": { "type": "string", "title": "Minimal value." },
        "before": { "type": "string", "title": "Maximal value." },
        "defaults": { "type": "string" },
        "description": { "type": "string" },
        "name": { "type": "string", "minLength": 1, "pattern": "[.a-zA-Z0-9_-]+" },
        "required": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Default value is : `true`"
        },
        "type": {
          "type": "string",
          "enum": [
            "STRING",
            "INT",
            "FLOAT",
            "BOOLEAN",
            "DATETIME",
            "DATE",
            "TIME",
            "DURATION",
            "FILE",
            "JSON",
            "URI"
          ]
        }
      },
      "required": ["name", "type"]
    },
    "io.kestra.core.models.flows.input.TimeInput-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.models.flows.input.TimeInput-1" },
        { "type": "object", "properties": { "type": { "const": "TIME" } }, "required": ["type"] }
      ]
    },
    "io.kestra.core.models.flows.input.URIInput-1": {
      "type": "object",
      "properties": {
        "defaults": { "type": "string" },
        "description": { "type": "string" },
        "name": { "type": "string", "minLength": 1, "pattern": "[.a-zA-Z0-9_-]+" },
        "required": {
          "type": "boolean",
          "default": true,
          "markdownDescription": "Default value is : `true`"
        },
        "type": {
          "type": "string",
          "enum": [
            "STRING",
            "INT",
            "FLOAT",
            "BOOLEAN",
            "DATETIME",
            "DATE",
            "TIME",
            "DURATION",
            "FILE",
            "JSON",
            "URI"
          ]
        }
      },
      "required": ["name", "type"]
    },
    "io.kestra.core.models.flows.input.URIInput-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.models.flows.input.URIInput-1" },
        { "type": "object", "properties": { "type": { "const": "URI" } }, "required": ["type"] }
      ]
    },
    "io.kestra.core.models.listeners.Listener": {
      "type": "object",
      "properties": {
        "conditions": {
          "type": "array",
          "items": {
            "anyOf": [
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.NotCondition-2" },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionStatusCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.DateTimeBetweenCondition-2"
              },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.FlowCondition-2" },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionFlowCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.HasRetryAttemptCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.DayWeekInMonthCondition-2"
              },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.DayWeekCondition-2" },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.WeekendCondition-2" },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionNamespaceCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.VariableCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.FlowNamespaceCondition-2"
              },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.OrCondition-2" },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.MultipleCondition-2" }
            ]
          }
        },
        "description": { "type": "string" },
        "tasks": {
          "minItems": 1,
          "type": "array",
          "items": {
            "anyOf": [
              { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.List-2" },
              { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Create-2" },
              { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.ReadRange-2" },
              { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Upload-2" },
              { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Export-2" },
              { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.Read-2" },
              { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Delete-2" },
              { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Download-2" },
              { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackExecution-2" },
              { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailTemplate-2" },
              {
                "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackIncomingWebhook-2"
              },
              { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailSend-2" },
              { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackTemplate-2" },
              { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailExecution-2" },
              { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetReader-2" },
              { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroConverter-2" },
              { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonWriter-2" },
              { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlReader-2" },
              { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvWriter-2" },
              { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonReader-2" },
              { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroWriter-2" },
              { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetWriter-2" },
              { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvReader-2" },
              { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlWriter-2" },
              { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroReader-2" },
              { "$ref": "#/definitions/io.kestra.plugin.openlineage.Emit-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Downloads-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Move-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Delete-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.http.Request-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Upload-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Move-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.List-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.List-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Move-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Upload-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Upload-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Download-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Delete-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Download-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Downloads-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Delete-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.http.Download-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.List-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Downloads-2" },
              { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Download-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.StorageWrite-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Copy-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateTable-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.TableMetadata-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteTable-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteBucket-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Downloads-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.UpdateBucket-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Download-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateDataset-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateTable-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucketIamPolicy-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Compose-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.LoadFromGcs-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gke.ClusterMetadata-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.ExtractToGcs-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.auth.OauthAccessToken-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Delete-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateDataset-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.vertexai.CustomJob-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Upload-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CopyPartitions-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteDataset-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeletePartitions-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.List-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucket-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteList-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Copy-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Load-2" },
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Query-2" },
              { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Request-2" },
              { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Load-2" },
              { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Put-2" },
              { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Search-2" },
              { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Scroll-2" },
              { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Get-2" },
              { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Bulk-2" },
              { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.FileTransform-2" },
              { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.Eval-2" },
              { "$ref": "#/definitions/io.kestra.plugin.airbyte.connections.Sync-2" },
              { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveCompress-2" },
              { "$ref": "#/definitions/io.kestra.plugin.compress.FileDecompress-2" },
              { "$ref": "#/definitions/io.kestra.plugin.compress.FileCompress-2" },
              { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveDecompress-2" },
              { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Snapshot-2" },
              { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Test-2" },
              { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Seed-2" },
              { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Setup-2" },
              { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.List-2" },
              { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Freshness-2" },
              { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Compile-2" },
              { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Build-2" },
              { "$ref": "#/definitions/io.kestra.plugin.dbt.cloud.TriggerRun-2" },
              { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Run-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.flows.AllowFailure-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.executions.Fail-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.states.Set-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.flows.Pause-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.log.Fetch-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.storages.Concat-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.states.Get-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.states.Delete-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Node-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.flows.Switch-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.flows.Parallel-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.storages.PurgeExecution-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.flows.Worker-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Bash-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.storages.Purge-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Echo-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.flows.Sequential-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Python-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.flows.If-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.flows.Flow-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.storages.Delete-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.storages.Split-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.executions.Counts-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.log.Log-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachParallel-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.storages.Size-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachSequential-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.flows.Template-2" },
              { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Return-2" }
            ]
          }
        }
      },
      "required": ["tasks"]
    },
    "io.kestra.core.models.tasks.retrys.Constant-1": {
      "type": "object",
      "properties": {
        "interval": { "type": "string", "format": "duration" },
        "maxAttempt": { "type": "integer", "minimum": 1 },
        "maxDuration": { "type": "string", "format": "duration" },
        "type": {
          "type": "string",
          "default": "constant",
          "markdownDescription": "Default value is : `constant`"
        },
        "warningOnRetry": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        }
      },
      "required": ["interval"]
    },
    "io.kestra.core.models.tasks.retrys.Constant-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "constant" } },
          "required": ["type"]
        }
      ]
    },
    "io.kestra.core.models.tasks.retrys.Exponential-1": {
      "type": "object",
      "properties": {
        "delayFactor": { "type": "number" },
        "interval": { "type": "string", "format": "duration" },
        "maxAttempt": { "type": "integer", "minimum": 1 },
        "maxDuration": { "type": "string", "format": "duration" },
        "maxInterval": { "type": "string", "format": "duration" },
        "type": {
          "type": "string",
          "default": "exponential",
          "markdownDescription": "Default value is : `exponential`"
        },
        "warningOnRetry": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        }
      },
      "required": ["interval", "maxInterval"]
    },
    "io.kestra.core.models.tasks.retrys.Exponential-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "exponential" } },
          "required": ["type"]
        }
      ]
    },
    "io.kestra.core.models.tasks.retrys.Random-1": {
      "type": "object",
      "properties": {
        "maxAttempt": { "type": "integer", "minimum": 1 },
        "maxDuration": { "type": "string", "format": "duration" },
        "maxInterval": { "type": "string", "format": "duration" },
        "minInterval": { "type": "string", "format": "duration" },
        "type": {
          "type": "string",
          "default": "random",
          "markdownDescription": "Default value is : `random`"
        },
        "warningOnRetry": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        }
      },
      "required": ["maxInterval", "minInterval"]
    },
    "io.kestra.core.models.tasks.retrys.Random-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-1" },
        { "type": "object", "properties": { "type": { "const": "random" } }, "required": ["type"] }
      ]
    },
    "io.kestra.core.models.triggers.types.Flow-1": {
      "type": "object",
      "properties": {
        "conditions": {
          "title": "List of Conditions in order to limit the flow trigger.",
          "type": "array",
          "items": {
            "anyOf": [
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.NotCondition-2" },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionStatusCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.DateTimeBetweenCondition-2"
              },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.FlowCondition-2" },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionFlowCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.HasRetryAttemptCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.DayWeekInMonthCondition-2"
              },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.DayWeekCondition-2" },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.WeekendCondition-2" },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionNamespaceCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.VariableCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.FlowNamespaceCondition-2"
              },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.OrCondition-2" },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.MultipleCondition-2" }
            ]
          }
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "id": {
          "type": "string",
          "title": "A unique id for the whole flow",
          "minLength": 1,
          "pattern": "[a-zA-Z0-9_-]+"
        },
        "inputs": {
          "type": "object",
          "title": "Fill input of this flow based on output of current flow, allowing to pass data or file on the triggered flow",
          "$dynamic": false,
          "markdownDescription": "::alert{type=\"warning\"}\nIf you provide invalid input, the flow will not be created! Since there is no task started, you can't log any reason visible on the execution ui.\nSo you will need to go to Logs tabs on the ui to understand the error\n::"
        },
        "type": {
          "type": "string",
          "title": "The class name for this current trigger",
          "minLength": 1
        }
      },
      "required": ["id", "type"],
      "title": "Kestra is able to trigger flow after another one. This allows chaining flow without need to update the base flows.\nWith that, you can break responsibility between different flow to different teams.",
      "markdownDescription": "::alert{type=\"warning\"}\nIf you don't provide any conditions, the flow will be triggered for **EVERY execution** of **EVERY flow** on your instance.\n::##### Examples\n> This flow will be triggered after each successfully execution of flow `io.kestra.tests.trigger-flow` and forward the `uri` of `my-task` taskId outputs.\n```yaml\nid: trigger-flow-listener\nnamespace: io.kestra.tests\n\ninputs:\n  - name: from-parent\n    type: STRING\n\ntasks:\n  - id: only-no-input\n    type: io.kestra.core.tasks.debugs.Return\n    format: \"v1: {{trigger.executionId}}\"\n\ntriggers:\n  - id: listen-flow\n    type: io.kestra.core.models.triggers.types.Flow\n    inputs:\n      from-parent: '{{ outputs.myTask.uri }}'\n    conditions:\n      - type: io.kestra.core.models.conditions.types.ExecutionFlowCondition\n        namespace: io.kestra.tests\n        flowId: trigger-flow\n      - type: io.kestra.core.models.conditions.types.ExecutionStatusCondition\n        in:\n          - SUCCESS\n```"
    },
    "io.kestra.core.models.triggers.types.Flow-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.models.triggers.types.Flow-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.core.models.triggers.types.Flow" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> This flow will be triggered after each successfully execution of flow `io.kestra.tests.trigger-flow` and forward the `uri` of `my-task` taskId outputs.\n```yaml\nid: trigger-flow-listener\nnamespace: io.kestra.tests\n\ninputs:\n  - name: from-parent\n    type: STRING\n\ntasks:\n  - id: only-no-input\n    type: io.kestra.core.tasks.debugs.Return\n    format: \"v1: {{trigger.executionId}}\"\n\ntriggers:\n  - id: listen-flow\n    type: io.kestra.core.models.triggers.types.Flow\n    inputs:\n      from-parent: '{{ outputs.myTask.uri }}'\n    conditions:\n      - type: io.kestra.core.models.conditions.types.ExecutionFlowCondition\n        namespace: io.kestra.tests\n        flowId: trigger-flow\n      - type: io.kestra.core.models.conditions.types.ExecutionStatusCondition\n        in:\n          - SUCCESS\n```"
    },
    "io.kestra.core.models.triggers.types.Schedule-1": {
      "type": "object",
      "properties": {
        "backfill": {
          "allOf": [
            {
              "$ref": "#/definitions/io.kestra.core.models.triggers.types.Schedule-ScheduleBackfill"
            },
            {
              "title": "Backfill options in order to fill missing previous past date",
              "$dynamic": false,
              "markdownDescription": "Kestra will handle optionally a backfill. The concept of backfill is the replay the missing schedule because we create the flow later.\n\nBackfill will do all schedules between define date & current date and will start after the normal schedule."
            }
          ]
        },
        "conditions": {
          "title": "List of Conditions in order to limit the flow trigger.",
          "type": "array",
          "items": {
            "anyOf": [
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.NotCondition-2" },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionStatusCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.DateTimeBetweenCondition-2"
              },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.FlowCondition-2" },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionFlowCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.HasRetryAttemptCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.DayWeekInMonthCondition-2"
              },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.DayWeekCondition-2" },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.WeekendCondition-2" },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionNamespaceCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.VariableCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.FlowNamespaceCondition-2"
              },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.OrCondition-2" },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.MultipleCondition-2" }
            ]
          }
        },
        "cron": {
          "type": "string",
          "title": "the cron expression",
          "$dynamic": false,
          "markdownDescription": "a standard [unix cron expression](https://en.wikipedia.org/wiki/Cron) without second.\nCan also be a cron extensions / nicknames:\n* `@yearly`\n* `@annually`\n* `@monthly`\n* `@weekly`\n* `@daily`\n* `@midnight`\n* `@hourly`"
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "id": {
          "type": "string",
          "title": "A unique id for the whole flow",
          "minLength": 1,
          "pattern": "[a-zA-Z0-9_-]+"
        },
        "inputs": {
          "type": "object",
          "title": "The input to pass to the triggered flow",
          "$dynamic": true
        },
        "interval": {
          "type": "string",
          "format": "duration",
          "title": "Interval between polling",
          "default": "PT1S",
          "$dynamic": false,
          "markdownDescription": "The interval between 2 different test of schedule, this can avoid to overload the remote system with too many call. For most of trigger that depend on external system, a minimal interval must be at least PT30S.\nSee [ISO_8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) for more information of available interval value\n\nDefault value is : `PT1S`"
        },
        "lateMaximumDelay": {
          "type": "string",
          "format": "duration",
          "title": "The maximum late delay accepted",
          "$dynamic": false,
          "markdownDescription": "If the schedule didn't start after this delay, the execution will be skip."
        },
        "scheduleConditions": {
          "title": "List of schedule Conditions in order to limit schedule date.",
          "$dynamic": false,
          "type": "array",
          "items": {
            "anyOf": [
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.models.conditions.types.NotCondition-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.core.models.conditions.types.DateTimeBetweenCondition-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.core.models.conditions.types.DayWeekInMonthCondition-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.core.models.conditions.types.DayWeekCondition-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.core.models.conditions.types.WeekendCondition-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.core.models.conditions.types.VariableCondition-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.models.conditions.types.OrCondition-2" },
                  { "$dynamic": false }
                ]
              }
            ]
          }
        },
        "timezone": {
          "type": "string",
          "title": "The time zone id to use for evaluate cron. Default value is the server default zone id.",
          "default": "Europe/Paris",
          "$dynamic": false,
          "markdownDescription": "Default value is : `Europe/Paris`"
        },
        "type": {
          "type": "string",
          "title": "The class name for this current trigger",
          "minLength": 1
        }
      },
      "required": ["cron", "id", "type"],
      "title": "Schedule a flow based on cron date",
      "markdownDescription": "Kestra is able to trigger flow based on Schedule (aka the time). If you need to wait another system to be ready and can't use any event mechanism, you can schedule 1 or more time for the current flow.\n\nThe scheduler will keep the last execution date for this schedule based on the id. This allow you to change the cron expression without restart all the past execution (if backfill exists)\nIf you changed the current id, the scheduler will think it's a new schedule and will start with a fresh date and replay the all backfill date (if backfill exists)##### Examples\n> A schedule with a backfill\n```yaml\ntriggers:\n  - id: schedule\n    type: io.kestra.core.models.triggers.types.Schedule\n    cron: \"*/15 * * * *\"\n    backfill:\n      start: 2020-06-25T14:00:00Z\n```\n\n> A schedule with a nickname\n```yaml\ntriggers:\n  - id: schedule\n    type: io.kestra.core.models.triggers.types.Schedule\n    cron: \"@hourly\"\n```\n\n> A schedule that run only the first monday on every month at 11 AM\n```yaml\ntriggers:\n  - id: schedule\n    cron: \"0 11 * * 1\"\n    scheduleConditions:\n      - id: monday\n        date: \"{{ trigger.date }}\"\n        dayOfWeek: \"MONDAY\"\n        dayInMonth: \"FIRST\"\n```"
    },
    "io.kestra.core.models.triggers.types.Schedule-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.models.triggers.types.Schedule-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.core.models.triggers.types.Schedule" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> A schedule with a backfill\n```yaml\ntriggers:\n  - id: schedule\n    type: io.kestra.core.models.triggers.types.Schedule\n    cron: \"*/15 * * * *\"\n    backfill:\n      start: 2020-06-25T14:00:00Z\n```\n\n> A schedule with a nickname\n```yaml\ntriggers:\n  - id: schedule\n    type: io.kestra.core.models.triggers.types.Schedule\n    cron: \"@hourly\"\n```\n\n> A schedule that run only the first monday on every month at 11 AM\n```yaml\ntriggers:\n  - id: schedule\n    cron: \"0 11 * * 1\"\n    scheduleConditions:\n      - id: monday\n        date: \"{{ trigger.date }}\"\n        dayOfWeek: \"MONDAY\"\n        dayInMonth: \"FIRST\"\n```"
    },
    "io.kestra.core.models.triggers.types.Schedule-ScheduleBackfill": {
      "type": "object",
      "properties": { "start": { "type": "string", "title": "The first start date" } }
    },
    "io.kestra.core.models.triggers.types.Webhook-1": {
      "type": "object",
      "properties": {
        "conditions": {
          "title": "List of Conditions in order to limit the flow trigger.",
          "type": "array",
          "items": {
            "anyOf": [
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.NotCondition-2" },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionStatusCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.DateTimeBetweenCondition-2"
              },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.FlowCondition-2" },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionFlowCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.HasRetryAttemptCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.DayWeekInMonthCondition-2"
              },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.DayWeekCondition-2" },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.WeekendCondition-2" },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionNamespaceCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.VariableCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.FlowNamespaceCondition-2"
              },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.OrCondition-2" },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.MultipleCondition-2" }
            ]
          }
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "id": {
          "type": "string",
          "title": "A unique id for the whole flow",
          "minLength": 1,
          "pattern": "[a-zA-Z0-9_-]+"
        },
        "key": {
          "type": "string",
          "title": "The unique key that will be part of the url",
          "default": "<generated-hash>",
          "minLength": 16,
          "maxLength": 256,
          "$dynamic": false,
          "markdownDescription": "If you don't provide a key, a random one will be generated. Is used as key for generating the url of the webhook.\n\n::alert{type=\"warning\"}\nTake care when using manual key, the key is the only security to protect your webhook and must be considered as a secret !\n::\n\n\nDefault value is : `<generated-hash>`"
        },
        "type": {
          "type": "string",
          "title": "The class name for this current trigger",
          "minLength": 1
        }
      },
      "required": ["id", "type"],
      "title": "Trigger a flow from a webhook",
      "markdownDescription": "Webbook trigger allow you to trigger a flow from a webhook url. The trigger will generate a `key` that must be used on url : `/api/v1/executions/webhook/{namespace}/[flowId]/{key}`. Kestra accept `GET`, `POST` & `PUT` request on this url. The whole body & headers will be available as variable:\n - `trigger.body`\n- `trigger.headers`##### Examples\n> Add a trigger to the current flow\n```yaml\ntriggers:\n  - id: webhook\n    type: io.kestra.core.models.triggers.types.Webhook\n```\n\n> After the trigger is created, a key will be created that will be use in the webhook url, now, you can launch the flow on the url `/api/v1/executions/webhook/{namespace}/[flowId]/4wjtkzwVGBM9yKnjm3yv8r`\n```yaml\ntriggers:\n  - id: webhook\n    type: io.kestra.core.models.triggers.types.Webhook\n    key: 4wjtkzwVGBM9yKnjm3yv8r\n```"
    },
    "io.kestra.core.models.triggers.types.Webhook-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.models.triggers.types.Webhook-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.core.models.triggers.types.Webhook" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Add a trigger to the current flow\n```yaml\ntriggers:\n  - id: webhook\n    type: io.kestra.core.models.triggers.types.Webhook\n```\n\n> After the trigger is created, a key will be created that will be use in the webhook url, now, you can launch the flow on the url `/api/v1/executions/webhook/{namespace}/[flowId]/4wjtkzwVGBM9yKnjm3yv8r`\n```yaml\ntriggers:\n  - id: webhook\n    type: io.kestra.core.models.triggers.types.Webhook\n    key: 4wjtkzwVGBM9yKnjm3yv8r\n```"
    },
    "io.kestra.core.tasks.debugs.Echo-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "format": { "type": "string", "minLength": 1, "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "level": {
          "type": "string",
          "enum": ["ERROR", "WARN", "INFO", "DEBUG", "TRACE"],
          "default": "INFO",
          "$dynamic": false,
          "markdownDescription": "Default value is : `INFO`"
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["format", "id", "type"],
      "title": "Log a message in the task logs.",
      "$deprecated": "true",
      "markdownDescription": "This task is deprecated, please use the io.kestra.core.tasks.log.Log task instead.##### Examples\n> \n```yaml\nlevel: WARN\nformat: \"{{task.id}} > {{taskrun.startDate}}\"\n```"
    },
    "io.kestra.core.tasks.debugs.Echo-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Echo-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.core.tasks.debugs.Echo" } },
          "required": ["type"]
        }
      ],
      "$deprecated": "true",
      "markdownDescription": "##### Examples\n> \n```yaml\nlevel: WARN\nformat: \"{{task.id}} > {{taskrun.startDate}}\"\n```"
    },
    "io.kestra.core.tasks.debugs.Return-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "format": { "type": "string", "title": "The templated string to render", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["id", "type"],
      "title": "Debugging task that returns a rendered value.",
      "$metrics": [
        { "name": "length", "type": "counter", "unit": "", "description": "" },
        { "name": "duration", "type": "timer", "unit": "", "description": "" }
      ],
      "markdownDescription": "This task is mostly useful for debugging purpose.\n\nIt allows you to see inputs or outputs variables or to debug some templated functions.##### Examples\n> \n```yaml\nformat: \"{{task.id}} > {{taskrun.startDate}}\"\n```"
    },
    "io.kestra.core.tasks.debugs.Return-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Return-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.core.tasks.debugs.Return" } },
          "required": ["type"]
        }
      ],
      "$metrics": [
        { "name": "length", "type": "counter", "unit": "", "description": "" },
        { "name": "duration", "type": "timer", "unit": "", "description": "" }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nformat: \"{{task.id}} > {{taskrun.startDate}}\"\n```"
    },
    "io.kestra.core.tasks.executions.Counts-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "endDate": { "type": "string", "title": "The end date", "$dynamic": true },
        "expression": {
          "type": "string",
          "title": "The expression against each flows to look at",
          "$dynamic": true,
          "markdownDescription": "The expression is as handlebars expression must return `true` in order to keep the current line\nsome examples: \n- `{{ eq count 0 }}`: no execution found\n- `{{ gte count 5 }}`: more than 5 executions\n"
        },
        "flows": {
          "title": "A list of flows to be filtered",
          "minItems": 1,
          "$dynamic": false,
          "type": "array",
          "items": {
            "allOf": [
              { "$ref": "#/definitions/io.kestra.core.models.executions.statistics.Flow" },
              { "$dynamic": false }
            ]
          }
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "startDate": { "type": "string", "title": "The start date", "$dynamic": true },
        "states": {
          "title": "A list of state to be filtered",
          "$dynamic": false,
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "CREATED",
              "RUNNING",
              "PAUSED",
              "RESTARTED",
              "KILLING",
              "SUCCESS",
              "WARNING",
              "FAILED",
              "KILLED"
            ],
            "$dynamic": false
          }
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["expression", "flows", "id", "startDate", "type"],
      "title": "List execution counts for a list of flow",
      "markdownDescription": "Can be used to send an alert if a condition is met about execution counts.##### Examples\n> Send a slack notification if no execution for a flow on the last 24h\n```yaml\nid: executions-count\nnamespace: io.kestra.tests\n\ntasks:\n  - id: counts\n    type: io.kestra.core.tasks.executions.Counts\n    expression: \"{{ count == 0 }}\"\n    flows:\n      - namespace: io.kestra.tests\n        flowId: logs\n    startDate: \"{{ now() | dateAdd(-1, 'DAYS') }}\"\n  - id: each_parallel\n    type: io.kestra.core.tasks.flows.EachParallel\n    tasks:\n      - id: slack_incoming_webhook\n        type: io.kestra.plugin.notifications.slack.SlackIncomingWebhook\n        payload: |\n          {\n            \"channel\": \"#run-channel\",\n            \"text\": \":warning: Flow `{{ jq taskrun.value '.namespace' true }}`.`{{ jq taskrun.value '.flowId' true }}` has no execution on last 24h !\"\n          }\n        url: \"https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX\"\n    value: \"{{ jq outputs.counts.results '. | select(. != null) | .[]' }}\"\n\ntriggers:\n  - id: schedule\n    type: io.kestra.core.models.triggers.types.Schedule\n    backfill: {}\n    cron: \"0 4 * * * \"\n```"
    },
    "io.kestra.core.tasks.executions.Counts-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.tasks.executions.Counts-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.core.tasks.executions.Counts" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Send a slack notification if no execution for a flow on the last 24h\n```yaml\nid: executions-count\nnamespace: io.kestra.tests\n\ntasks:\n  - id: counts\n    type: io.kestra.core.tasks.executions.Counts\n    expression: \"{{ count == 0 }}\"\n    flows:\n      - namespace: io.kestra.tests\n        flowId: logs\n    startDate: \"{{ now() | dateAdd(-1, 'DAYS') }}\"\n  - id: each_parallel\n    type: io.kestra.core.tasks.flows.EachParallel\n    tasks:\n      - id: slack_incoming_webhook\n        type: io.kestra.plugin.notifications.slack.SlackIncomingWebhook\n        payload: |\n          {\n            \"channel\": \"#run-channel\",\n            \"text\": \":warning: Flow `{{ jq taskrun.value '.namespace' true }}`.`{{ jq taskrun.value '.flowId' true }}` has no execution on last 24h !\"\n          }\n        url: \"https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX\"\n    value: \"{{ jq outputs.counts.results '. | select(. != null) | .[]' }}\"\n\ntriggers:\n  - id: schedule\n    type: io.kestra.core.models.triggers.types.Schedule\n    backfill: {}\n    cron: \"0 4 * * * \"\n```"
    },
    "io.kestra.core.tasks.executions.Fail-1": {
      "type": "object",
      "properties": {
        "condition": {
          "type": "string",
          "title": "Optional condition, must coerce to a boolean.",
          "$dynamic": true,
          "markdownDescription": "Boolean coercion allows 0, -0, and '' to coerce to false, all other values to coerce to true."
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "errorMessage": {
          "type": "string",
          "title": "Optional error message.",
          "default": "Task failure",
          "$dynamic": true,
          "markdownDescription": "Default value is : `Task failure`"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["id", "type"],
      "title": "Fail the execution",
      "markdownDescription": "Used to fail the execution for example on a switch branch or on some conditions based on the execution context.##### Examples\n> Fail on a switch branch\n```yaml\nid: fail-on-switch\nnamespace: io.kestra.tests\n\ninputs:\n  - name: param\n    type: STRING\n    required: true\n\ntasks:\n  - id: switch\n    type: io.kestra.core.tasks.flows.Switch\n    value: \"{{inputs.param}}\"\n    cases:\n      case1:\n        - id: case1\n          type: io.kestra.core.tasks.log.Log\n          message: Case 1\n      case2:\n        - id: case2\n          type: io.kestra.core.tasks.log.Log\n          message: Case 2\n      notexist:\n        - id: fail\n          type: io.kestra.core.tasks.executions.Fail\n      default:\n        - id: default\n          type: io.kestra.core.tasks.log.Log\n          message: default\n```\n\n> Fail on a condition\n```yaml\nid: fail-on-condition\nnamespace: io.kestra.tests\n\ninputs:\n  - name: param\n    type: STRING\n    required: true\n\ntasks:\n  - id: before\n    type: io.kestra.core.tasks.debugs.Echo\n    format: I'm before the fail on condition \n  - id: fail\n    type: io.kestra.core.tasks.executions.Fail\n    condition: '{{inputs.param == \"fail\"}}'\n  - id: after\n    type: io.kestra.core.tasks.debugs.Echo\n    format: I'm after the fail on condition \n```"
    },
    "io.kestra.core.tasks.executions.Fail-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.tasks.executions.Fail-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.core.tasks.executions.Fail" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Fail on a switch branch\n```yaml\nid: fail-on-switch\nnamespace: io.kestra.tests\n\ninputs:\n  - name: param\n    type: STRING\n    required: true\n\ntasks:\n  - id: switch\n    type: io.kestra.core.tasks.flows.Switch\n    value: \"{{inputs.param}}\"\n    cases:\n      case1:\n        - id: case1\n          type: io.kestra.core.tasks.log.Log\n          message: Case 1\n      case2:\n        - id: case2\n          type: io.kestra.core.tasks.log.Log\n          message: Case 2\n      notexist:\n        - id: fail\n          type: io.kestra.core.tasks.executions.Fail\n      default:\n        - id: default\n          type: io.kestra.core.tasks.log.Log\n          message: default\n```\n\n> Fail on a condition\n```yaml\nid: fail-on-condition\nnamespace: io.kestra.tests\n\ninputs:\n  - name: param\n    type: STRING\n    required: true\n\ntasks:\n  - id: before\n    type: io.kestra.core.tasks.debugs.Echo\n    format: I'm before the fail on condition \n  - id: fail\n    type: io.kestra.core.tasks.executions.Fail\n    condition: '{{inputs.param == \"fail\"}}'\n  - id: after\n    type: io.kestra.core.tasks.debugs.Echo\n    format: I'm after the fail on condition \n```"
    },
    "io.kestra.core.tasks.flows.AllowFailure-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "errors": {
          "title": "List of tasks to run if any tasks failed on this FlowableTask",
          "$dynamic": false,
          "type": "array",
          "items": {
            "anyOf": [
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Create-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.ReadRange-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Export-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.Read-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackIncomingWebhook-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailSend-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroConverter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.openlineage.Emit-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.StorageWrite-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.TableMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.UpdateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucketIamPolicy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Compose-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.LoadFromGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gke.ClusterMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.ExtractToGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.auth.OauthAccessToken-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.vertexai.CustomJob-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CopyPartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeletePartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteList-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Query-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Put-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Search-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Scroll-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Bulk-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.FileTransform-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.Eval-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.airbyte.connections.Sync-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Snapshot-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Test-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Seed-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Setup-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Freshness-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Compile-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Build-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cloud.TriggerRun-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Run-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.AllowFailure-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Fail-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Set-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Pause-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Fetch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Concat-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Node-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Switch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Parallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.PurgeExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Worker-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Bash-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Purge-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Echo-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Sequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Python-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.If-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Flow-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Split-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Counts-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Log-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachParallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Size-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachSequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Template-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Return-2" },
                  { "$dynamic": false }
                ]
              }
            ]
          }
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "tasks": {
          "minItems": 1,
          "$dynamic": false,
          "type": "array",
          "items": {
            "anyOf": [
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Create-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.ReadRange-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Export-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.Read-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackIncomingWebhook-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailSend-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroConverter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.openlineage.Emit-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.StorageWrite-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.TableMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.UpdateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucketIamPolicy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Compose-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.LoadFromGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gke.ClusterMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.ExtractToGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.auth.OauthAccessToken-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.vertexai.CustomJob-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CopyPartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeletePartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteList-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Query-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Put-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Search-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Scroll-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Bulk-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.FileTransform-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.Eval-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.airbyte.connections.Sync-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Snapshot-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Test-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Seed-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Setup-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Freshness-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Compile-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Build-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cloud.TriggerRun-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Run-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.AllowFailure-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Fail-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Set-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Pause-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Fetch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Concat-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Node-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Switch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Parallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.PurgeExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Worker-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Bash-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Purge-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Echo-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Sequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Python-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.If-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Flow-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Split-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Counts-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Log-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachParallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Size-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachSequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Template-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Return-2" },
                  { "$dynamic": false }
                ]
              }
            ]
          }
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["id", "tasks", "type"],
      "title": "Allow a list of task to fail",
      "markdownDescription": "If any child tasks failed, the flow will stop executing child tasks, but will continue on the main flow execution.##### Examples\n> \n```yaml\nid: allow-failure\nnamespace: io.kestra.tests\n\ntasks:\n  - id: sequential\n    type: io.kestra.core.tasks.flows.AllowFailure\n    tasks:\n     - id: ko\n       type: io.kestra.core.tasks.scripts.Bash\n       commands:\n        - 'exit 1'\n  - id: last\n    type: io.kestra.core.tasks.debugs.Return\n    format: \"{{task.id}} > {{taskrun.startDate}}\"\n```"
    },
    "io.kestra.core.tasks.flows.AllowFailure-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.tasks.flows.AllowFailure-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.core.tasks.flows.AllowFailure" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nid: allow-failure\nnamespace: io.kestra.tests\n\ntasks:\n  - id: sequential\n    type: io.kestra.core.tasks.flows.AllowFailure\n    tasks:\n     - id: ko\n       type: io.kestra.core.tasks.scripts.Bash\n       commands:\n        - 'exit 1'\n  - id: last\n    type: io.kestra.core.tasks.debugs.Return\n    format: \"{{task.id}} > {{taskrun.startDate}}\"\n```"
    },
    "io.kestra.core.tasks.flows.EachParallel-1": {
      "type": "object",
      "properties": {
        "concurrent": {
          "type": "integer",
          "title": "Number of concurrent parallel tasks",
          "default": 0,
          "$dynamic": false,
          "markdownDescription": "If the value is `0`, no limit exist and all the tasks will start at the same time\n\nDefault value is : `0`"
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "errors": {
          "title": "List of tasks to run if any tasks failed on this FlowableTask",
          "$dynamic": false,
          "type": "array",
          "items": {
            "anyOf": [
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Create-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.ReadRange-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Export-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.Read-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackIncomingWebhook-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailSend-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroConverter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.openlineage.Emit-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.StorageWrite-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.TableMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.UpdateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucketIamPolicy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Compose-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.LoadFromGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gke.ClusterMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.ExtractToGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.auth.OauthAccessToken-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.vertexai.CustomJob-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CopyPartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeletePartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteList-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Query-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Put-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Search-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Scroll-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Bulk-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.FileTransform-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.Eval-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.airbyte.connections.Sync-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Snapshot-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Test-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Seed-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Setup-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Freshness-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Compile-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Build-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cloud.TriggerRun-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Run-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.AllowFailure-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Fail-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Set-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Pause-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Fetch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Concat-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Node-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Switch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Parallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.PurgeExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Worker-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Bash-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Purge-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Echo-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Sequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Python-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.If-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Flow-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Split-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Counts-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Log-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachParallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Size-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachSequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Template-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Return-2" },
                  { "$dynamic": false }
                ]
              }
            ]
          }
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "tasks": {
          "minItems": 1,
          "$dynamic": false,
          "type": "array",
          "items": {
            "anyOf": [
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Create-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.ReadRange-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Export-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.Read-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackIncomingWebhook-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailSend-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroConverter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.openlineage.Emit-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.StorageWrite-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.TableMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.UpdateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucketIamPolicy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Compose-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.LoadFromGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gke.ClusterMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.ExtractToGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.auth.OauthAccessToken-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.vertexai.CustomJob-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CopyPartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeletePartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteList-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Query-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Put-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Search-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Scroll-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Bulk-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.FileTransform-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.Eval-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.airbyte.connections.Sync-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Snapshot-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Test-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Seed-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Setup-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Freshness-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Compile-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Build-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cloud.TriggerRun-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Run-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.AllowFailure-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Fail-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Set-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Pause-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Fetch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Concat-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Node-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Switch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Parallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.PurgeExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Worker-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Bash-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Purge-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Echo-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Sequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Python-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.If-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Flow-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Split-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Counts-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Log-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachParallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Size-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachSequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Template-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Return-2" },
                  { "$dynamic": false }
                ]
              }
            ]
          }
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "value": {
          "title": "The list of values for this task",
          "anyOf": [{ "type": "string" }, { "type": "array", "items": {} }],
          "$dynamic": true,
          "markdownDescription": "The value car be passed as a String, a list of String, or a list of objects"
        }
      },
      "required": ["id", "tasks", "type", "value"],
      "title": "Execute a task for a list of values in parallel.",
      "markdownDescription": "For each `value`, the `tasks` list will be executed\nThe value must be valid json string representing an arrays, like `[\"value1\", \"value2\"]` or `[{\"key\":\"value1\"}, {\"key\":\"value2\"}]`  or an array of valid JSON strings.\nThe current value is available on the variable `{{ taskrun.value }}`.\nThe task list will be executed in parallel, for example if you have a 3 values with 2 tasks, all the 6 tasks will be computed in parallel without any guarantee on the order.\nIf you want to have each value in parallel, but no concurrent task for each value, you need to wrap the tasks with a `Sequential` tasks##### Examples\n> \n```yaml\nvalue: '[\"value 1\", \"value 2\", \"value 3\"]'\ntasks:\n  - id: each-value\n    type: io.kestra.core.tasks.debugs.Return\n    format: \"{{ task.id }} with current value '{{ taskrun.value }}'\"\n```\n\n> \n```yaml\nvalue: \n- value 1\n- value 2\n- value 3\ntasks:\n  - id: each-value\n    type: io.kestra.core.tasks.debugs.Return\n    format: \"{{ task.id }} with current value '{{ taskrun.value }}'\"\n```\n\n> Handling each value in parallel but only 1 child task for each value at the same time.\n```yaml\nvalue: '[\"value 1\", \"value 2\", \"value 3\"]'\ntasks:\n  - id: seq\n    type: io.kestra.core.tasks.flows.Sequential\n    tasks:\n    - id: t1\n      type: io.kestra.core.tasks.scripts.Bash\n      commands:\n        - 'echo \"{{task.id}} > {{ parents[0].taskrun.value }}\n        - 'sleep 1'\n    - id: t2\n      type: io.kestra.core.tasks.scripts.Bash\n      commands:\n        - 'echo \"{{task.id}} > {{ parents[0].taskrun.value }}\n        - 'sleep 1'\n```"
    },
    "io.kestra.core.tasks.flows.EachParallel-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachParallel-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.core.tasks.flows.EachParallel" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nvalue: '[\"value 1\", \"value 2\", \"value 3\"]'\ntasks:\n  - id: each-value\n    type: io.kestra.core.tasks.debugs.Return\n    format: \"{{ task.id }} with current value '{{ taskrun.value }}'\"\n```\n\n> \n```yaml\nvalue: \n- value 1\n- value 2\n- value 3\ntasks:\n  - id: each-value\n    type: io.kestra.core.tasks.debugs.Return\n    format: \"{{ task.id }} with current value '{{ taskrun.value }}'\"\n```\n\n> Handling each value in parallel but only 1 child task for each value at the same time.\n```yaml\nvalue: '[\"value 1\", \"value 2\", \"value 3\"]'\ntasks:\n  - id: seq\n    type: io.kestra.core.tasks.flows.Sequential\n    tasks:\n    - id: t1\n      type: io.kestra.core.tasks.scripts.Bash\n      commands:\n        - 'echo \"{{task.id}} > {{ parents[0].taskrun.value }}\n        - 'sleep 1'\n    - id: t2\n      type: io.kestra.core.tasks.scripts.Bash\n      commands:\n        - 'echo \"{{task.id}} > {{ parents[0].taskrun.value }}\n        - 'sleep 1'\n```"
    },
    "io.kestra.core.tasks.flows.EachSequential-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "errors": {
          "title": "List of tasks to run if any tasks failed on this FlowableTask",
          "$dynamic": false,
          "type": "array",
          "items": {
            "anyOf": [
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Create-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.ReadRange-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Export-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.Read-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackIncomingWebhook-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailSend-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroConverter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.openlineage.Emit-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.StorageWrite-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.TableMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.UpdateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucketIamPolicy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Compose-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.LoadFromGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gke.ClusterMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.ExtractToGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.auth.OauthAccessToken-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.vertexai.CustomJob-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CopyPartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeletePartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteList-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Query-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Put-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Search-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Scroll-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Bulk-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.FileTransform-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.Eval-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.airbyte.connections.Sync-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Snapshot-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Test-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Seed-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Setup-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Freshness-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Compile-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Build-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cloud.TriggerRun-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Run-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.AllowFailure-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Fail-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Set-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Pause-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Fetch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Concat-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Node-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Switch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Parallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.PurgeExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Worker-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Bash-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Purge-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Echo-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Sequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Python-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.If-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Flow-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Split-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Counts-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Log-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachParallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Size-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachSequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Template-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Return-2" },
                  { "$dynamic": false }
                ]
              }
            ]
          }
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "tasks": {
          "minItems": 1,
          "$dynamic": false,
          "type": "array",
          "items": {
            "anyOf": [
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Create-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.ReadRange-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Export-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.Read-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackIncomingWebhook-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailSend-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroConverter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.openlineage.Emit-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.StorageWrite-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.TableMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.UpdateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucketIamPolicy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Compose-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.LoadFromGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gke.ClusterMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.ExtractToGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.auth.OauthAccessToken-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.vertexai.CustomJob-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CopyPartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeletePartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteList-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Query-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Put-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Search-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Scroll-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Bulk-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.FileTransform-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.Eval-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.airbyte.connections.Sync-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Snapshot-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Test-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Seed-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Setup-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Freshness-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Compile-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Build-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cloud.TriggerRun-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Run-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.AllowFailure-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Fail-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Set-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Pause-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Fetch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Concat-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Node-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Switch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Parallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.PurgeExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Worker-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Bash-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Purge-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Echo-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Sequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Python-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.If-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Flow-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Split-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Counts-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Log-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachParallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Size-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachSequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Template-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Return-2" },
                  { "$dynamic": false }
                ]
              }
            ]
          }
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "value": {
          "title": "The list of values for this task",
          "anyOf": [{ "type": "string" }, { "type": "array", "items": {} }],
          "$dynamic": true,
          "markdownDescription": "The value car be passed as a String, a list of String, or a list of objects"
        }
      },
      "required": ["id", "tasks", "type", "value"],
      "title": "Execute a task for a list of values sequentially",
      "markdownDescription": "For each `value`, the `tasks` list will be executed\nThe value must be valid json string representing an arrays, like `[\"value1\", \"value2\"]` or `[{\"key\":\"value1\"}, {\"key\":\"value2\"}]` or an array of valid JSON strings.\nThe current value is available on the variable `{{ taskrun.value }}`.##### Examples\n> \n```yaml\nvalue: '[\"value 1\", \"value 2\", \"value 3\"]'\ntasks:\n  - id: each-value\n    type: io.kestra.core.tasks.debugs.Return\n    format: \"{{ task.id }} with current value '{{ taskrun.value }}'\"\n```\n\n> \n```yaml\nvalue: \n- value 1\n- value 2\n- value 3\ntasks:\n  - id: each-value\n    type: io.kestra.core.tasks.debugs.Return\n    format: \"{{ task.id }} with current value '{{ taskrun.value }}'\"\n```"
    },
    "io.kestra.core.tasks.flows.EachSequential-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachSequential-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.core.tasks.flows.EachSequential" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nvalue: '[\"value 1\", \"value 2\", \"value 3\"]'\ntasks:\n  - id: each-value\n    type: io.kestra.core.tasks.debugs.Return\n    format: \"{{ task.id }} with current value '{{ taskrun.value }}'\"\n```\n\n> \n```yaml\nvalue: \n- value 1\n- value 2\n- value 3\ntasks:\n  - id: each-value\n    type: io.kestra.core.tasks.debugs.Return\n    format: \"{{ task.id }} with current value '{{ taskrun.value }}'\"\n```"
    },
    "io.kestra.core.tasks.flows.Flow-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "flowId": {
          "type": "string",
          "title": "The identifier of the flow to trigger",
          "$dynamic": true
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "inputs": {
          "type": "object",
          "title": "The inputs to pass to the triggered flow",
          "$dynamic": true
        },
        "labels": {
          "type": "object",
          "title": "The labels to pass to the triggered flow execution",
          "$dynamic": true
        },
        "namespace": {
          "type": "string",
          "title": "The namespace of the flow to trigger",
          "$dynamic": true
        },
        "outputs": {
          "type": "object",
          "title": "Extract outputs from triggered executions.",
          "$dynamic": true,
          "markdownDescription": "Allow to specify key value (with value rendered), in order to extract any outputs from triggered execution."
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "revision": {
          "type": "integer",
          "title": "The revision of the flow to trigger",
          "$dynamic": true,
          "markdownDescription": "By default, we trigger the last version."
        },
        "timeout": { "type": "string", "format": "duration" },
        "transmitFailed": {
          "type": "boolean",
          "title": "Failed the current execution if the waited execution is failed or killed.",
          "default": false,
          "$dynamic": false,
          "markdownDescription": "`wait` need to be true to make it work\n\nDefault value is : `false`"
        },
        "type": { "type": "string", "minLength": 1 },
        "wait": {
          "type": "boolean",
          "title": "Wait the end of the execution.",
          "default": false,
          "$dynamic": false,
          "markdownDescription": "By default, we don't wait till the end of the flow, if you set to true, we wait the end of the trigger flow before continue this one.\n\nDefault value is : `false`"
        }
      },
      "required": ["flowId", "id", "namespace", "type"],
      "title": "Trigger another flow",
      "markdownDescription": "##### Examples\n> Trigger another flow, passing some files and arguments as inputs\n```yaml\nnamespace: io.kestra.tests\nflowId: my-sub-flows\ninputs:\n  file: \"{{ outputs.myTask.outputFiles.resolver }}\"\n  store: 12\nwait: false\n```"
    },
    "io.kestra.core.tasks.flows.Flow-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.tasks.flows.Flow-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.core.tasks.flows.Flow" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Trigger another flow, passing some files and arguments as inputs\n```yaml\nnamespace: io.kestra.tests\nflowId: my-sub-flows\ninputs:\n  file: \"{{ outputs.myTask.outputFiles.resolver }}\"\n  store: 12\nwait: false\n```"
    },
    "io.kestra.core.tasks.flows.If-1": {
      "type": "object",
      "properties": {
        "condition": {
          "type": "string",
          "title": "If condition, must coerce to a boolean.",
          "$dynamic": true,
          "markdownDescription": "Boolean coercion allows 0, -0, null and '' to coerce to false,  all other values to coerce to true."
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "else": {
          "title": "List of tasks to execute when the condition is false.",
          "$dynamic": false,
          "type": "array",
          "items": {
            "anyOf": [
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Create-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.ReadRange-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Export-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.Read-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackIncomingWebhook-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailSend-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroConverter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.openlineage.Emit-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.StorageWrite-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.TableMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.UpdateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucketIamPolicy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Compose-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.LoadFromGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gke.ClusterMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.ExtractToGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.auth.OauthAccessToken-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.vertexai.CustomJob-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CopyPartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeletePartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteList-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Query-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Put-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Search-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Scroll-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Bulk-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.FileTransform-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.Eval-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.airbyte.connections.Sync-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Snapshot-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Test-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Seed-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Setup-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Freshness-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Compile-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Build-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cloud.TriggerRun-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Run-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.AllowFailure-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Fail-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Set-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Pause-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Fetch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Concat-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Node-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Switch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Parallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.PurgeExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Worker-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Bash-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Purge-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Echo-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Sequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Python-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.If-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Flow-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Split-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Counts-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Log-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachParallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Size-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachSequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Template-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Return-2" },
                  { "$dynamic": false }
                ]
              }
            ]
          }
        },
        "errors": {
          "title": "List of tasks to execute in case of errors on a child task.",
          "$dynamic": false,
          "type": "array",
          "items": {
            "anyOf": [
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Create-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.ReadRange-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Export-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.Read-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackIncomingWebhook-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailSend-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroConverter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.openlineage.Emit-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.StorageWrite-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.TableMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.UpdateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucketIamPolicy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Compose-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.LoadFromGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gke.ClusterMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.ExtractToGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.auth.OauthAccessToken-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.vertexai.CustomJob-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CopyPartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeletePartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteList-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Query-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Put-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Search-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Scroll-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Bulk-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.FileTransform-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.Eval-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.airbyte.connections.Sync-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Snapshot-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Test-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Seed-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Setup-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Freshness-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Compile-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Build-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cloud.TriggerRun-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Run-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.AllowFailure-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Fail-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Set-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Pause-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Fetch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Concat-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Node-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Switch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Parallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.PurgeExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Worker-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Bash-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Purge-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Echo-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Sequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Python-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.If-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Flow-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Split-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Counts-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Log-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachParallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Size-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachSequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Template-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Return-2" },
                  { "$dynamic": false }
                ]
              }
            ]
          }
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "then": {
          "title": "List of tasks to execute when the condition is true.",
          "minItems": 1,
          "$dynamic": false,
          "type": "array",
          "items": {
            "anyOf": [
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Create-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.ReadRange-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Export-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.Read-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackIncomingWebhook-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailSend-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroConverter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.openlineage.Emit-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.StorageWrite-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.TableMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.UpdateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucketIamPolicy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Compose-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.LoadFromGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gke.ClusterMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.ExtractToGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.auth.OauthAccessToken-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.vertexai.CustomJob-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CopyPartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeletePartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteList-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Query-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Put-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Search-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Scroll-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Bulk-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.FileTransform-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.Eval-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.airbyte.connections.Sync-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Snapshot-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Test-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Seed-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Setup-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Freshness-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Compile-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Build-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cloud.TriggerRun-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Run-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.AllowFailure-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Fail-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Set-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Pause-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Fetch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Concat-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Node-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Switch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Parallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.PurgeExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Worker-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Bash-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Purge-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Echo-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Sequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Python-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.If-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Flow-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Split-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Counts-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Log-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachParallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Size-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachSequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Template-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Return-2" },
                  { "$dynamic": false }
                ]
              }
            ]
          }
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["id", "then", "type"],
      "title": "Process some tasks conditionally depending on a contextual value",
      "markdownDescription": "Allow some workflow based on context variables, for example branch a flow based on a previous task.##### Examples\n> \n```yaml\nid: if\nnamespace: io.kestra.tests\n\ninputs:\n  - name: string\n    type: STRING\n    required: true\n\ntasks:\n  - id: if\n    type: io.kestra.core.tasks.flows.If\n    condition: \"{{inputs.string == 'Condition'}}\"\n    then:\n      - id: when-true\n        type: io.kestra.core.tasks.log.Log\n        message: 'Condition was true'\n    else:\n      - id: when-false\n        type: io.kestra.core.tasks.log.Log\n        message: 'Condition was false'\n```"
    },
    "io.kestra.core.tasks.flows.If-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.tasks.flows.If-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.core.tasks.flows.If" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nid: if\nnamespace: io.kestra.tests\n\ninputs:\n  - name: string\n    type: STRING\n    required: true\n\ntasks:\n  - id: if\n    type: io.kestra.core.tasks.flows.If\n    condition: \"{{inputs.string == 'Condition'}}\"\n    then:\n      - id: when-true\n        type: io.kestra.core.tasks.log.Log\n        message: 'Condition was true'\n    else:\n      - id: when-false\n        type: io.kestra.core.tasks.log.Log\n        message: 'Condition was false'\n```"
    },
    "io.kestra.core.tasks.flows.Parallel-1": {
      "type": "object",
      "properties": {
        "concurrent": {
          "type": "integer",
          "title": "Number of concurrent parallel tasks",
          "default": 0,
          "$dynamic": false,
          "markdownDescription": "If the value is `0`, no limit exist and all the tasks will start at the same time\n\nDefault value is : `0`"
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "errors": {
          "title": "List of tasks to run if any tasks failed on this FlowableTask",
          "$dynamic": false,
          "type": "array",
          "items": {
            "anyOf": [
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Create-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.ReadRange-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Export-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.Read-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackIncomingWebhook-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailSend-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroConverter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.openlineage.Emit-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.StorageWrite-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.TableMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.UpdateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucketIamPolicy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Compose-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.LoadFromGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gke.ClusterMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.ExtractToGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.auth.OauthAccessToken-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.vertexai.CustomJob-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CopyPartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeletePartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteList-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Query-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Put-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Search-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Scroll-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Bulk-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.FileTransform-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.Eval-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.airbyte.connections.Sync-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Snapshot-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Test-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Seed-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Setup-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Freshness-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Compile-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Build-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cloud.TriggerRun-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Run-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.AllowFailure-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Fail-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Set-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Pause-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Fetch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Concat-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Node-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Switch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Parallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.PurgeExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Worker-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Bash-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Purge-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Echo-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Sequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Python-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.If-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Flow-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Split-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Counts-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Log-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachParallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Size-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachSequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Template-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Return-2" },
                  { "$dynamic": false }
                ]
              }
            ]
          }
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "tasks": {
          "minItems": 1,
          "$dynamic": false,
          "type": "array",
          "items": {
            "anyOf": [
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Create-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.ReadRange-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Export-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.Read-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackIncomingWebhook-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailSend-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroConverter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.openlineage.Emit-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.StorageWrite-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.TableMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.UpdateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucketIamPolicy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Compose-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.LoadFromGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gke.ClusterMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.ExtractToGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.auth.OauthAccessToken-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.vertexai.CustomJob-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CopyPartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeletePartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteList-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Query-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Put-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Search-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Scroll-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Bulk-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.FileTransform-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.Eval-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.airbyte.connections.Sync-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Snapshot-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Test-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Seed-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Setup-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Freshness-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Compile-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Build-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cloud.TriggerRun-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Run-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.AllowFailure-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Fail-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Set-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Pause-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Fetch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Concat-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Node-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Switch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Parallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.PurgeExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Worker-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Bash-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Purge-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Echo-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Sequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Python-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.If-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Flow-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Split-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Counts-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Log-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachParallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Size-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachSequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Template-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Return-2" },
                  { "$dynamic": false }
                ]
              }
            ]
          }
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["id", "tasks", "type"],
      "title": "Process tasks in parallel",
      "markdownDescription": "This task processes tasks in parallel. It makes it convenient to process many tasks at once.##### Examples\n> \n```yaml\nid: parallel\nnamespace: io.kestra.tests\n\ntasks:\n  - id: parallel\n    type: io.kestra.core.tasks.flows.Parallel\n    tasks:\n      - id: 1st\n        type: io.kestra.core.tasks.debugs.Return\n        format: \"{{task.id}} > {{taskrun.startDate}}\"\n      - id: 2nd\n        type: io.kestra.core.tasks.debugs.Return\n        format: \"{{task.id}} > {{taskrun.id}}\"\n  - id: last\n    type: io.kestra.core.tasks.debugs.Return\n    format: \"{{task.id}} > {{taskrun.startDate}}\"\n```"
    },
    "io.kestra.core.tasks.flows.Parallel-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.tasks.flows.Parallel-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.core.tasks.flows.Parallel" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nid: parallel\nnamespace: io.kestra.tests\n\ntasks:\n  - id: parallel\n    type: io.kestra.core.tasks.flows.Parallel\n    tasks:\n      - id: 1st\n        type: io.kestra.core.tasks.debugs.Return\n        format: \"{{task.id}} > {{taskrun.startDate}}\"\n      - id: 2nd\n        type: io.kestra.core.tasks.debugs.Return\n        format: \"{{task.id}} > {{taskrun.id}}\"\n  - id: last\n    type: io.kestra.core.tasks.debugs.Return\n    format: \"{{task.id}} > {{taskrun.startDate}}\"\n```"
    },
    "io.kestra.core.tasks.flows.Pause-1": {
      "type": "object",
      "properties": {
        "delay": {
          "type": "string",
          "format": "duration",
          "title": "Duration of the pause.",
          "$dynamic": false,
          "markdownDescription": "If null and no timeout, a manual approval is needed, if not, the delay before continuing the execution"
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "errors": {
          "title": "List of tasks to run if any tasks failed on this FlowableTask",
          "$dynamic": false,
          "type": "array",
          "items": {
            "anyOf": [
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Create-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.ReadRange-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Export-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.Read-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackIncomingWebhook-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailSend-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroConverter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.openlineage.Emit-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.StorageWrite-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.TableMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.UpdateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucketIamPolicy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Compose-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.LoadFromGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gke.ClusterMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.ExtractToGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.auth.OauthAccessToken-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.vertexai.CustomJob-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CopyPartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeletePartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteList-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Query-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Put-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Search-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Scroll-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Bulk-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.FileTransform-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.Eval-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.airbyte.connections.Sync-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Snapshot-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Test-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Seed-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Setup-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Freshness-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Compile-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Build-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cloud.TriggerRun-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Run-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.AllowFailure-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Fail-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Set-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Pause-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Fetch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Concat-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Node-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Switch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Parallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.PurgeExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Worker-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Bash-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Purge-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Echo-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Sequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Python-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.If-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Flow-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Split-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Counts-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Log-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachParallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Size-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachSequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Template-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Return-2" },
                  { "$dynamic": false }
                ]
              }
            ]
          }
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "tasks": {
          "minItems": 1,
          "$dynamic": false,
          "type": "array",
          "items": {
            "anyOf": [
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Create-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.ReadRange-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Export-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.Read-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackIncomingWebhook-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailSend-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroConverter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.openlineage.Emit-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.StorageWrite-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.TableMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.UpdateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucketIamPolicy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Compose-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.LoadFromGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gke.ClusterMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.ExtractToGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.auth.OauthAccessToken-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.vertexai.CustomJob-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CopyPartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeletePartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteList-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Query-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Put-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Search-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Scroll-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Bulk-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.FileTransform-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.Eval-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.airbyte.connections.Sync-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Snapshot-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Test-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Seed-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Setup-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Freshness-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Compile-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Build-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cloud.TriggerRun-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Run-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.AllowFailure-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Fail-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Set-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Pause-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Fetch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Concat-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Node-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Switch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Parallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.PurgeExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Worker-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Bash-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Purge-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Echo-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Sequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Python-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.If-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Flow-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Split-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Counts-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Log-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachParallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Size-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachSequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Template-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Return-2" },
                  { "$dynamic": false }
                ]
              }
            ]
          }
        },
        "timeout": {
          "type": "string",
          "format": "duration",
          "title": "Timeout of the pause.",
          "$dynamic": false,
          "markdownDescription": "If null and no delay, a manual approval is needed, else a manual approval is needed before the timeout or the task will fail"
        },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["id", "tasks", "type"],
      "title": "Pause the current execution and wait for a manual approval (changing the task state from the UI) or a delay",
      "markdownDescription": "##### Examples\n> \n```yaml\nid: pause\nnamespace: io.kestra.tests\n\ntasks:\n  - id: pause\n    type: io.kestra.core.tasks.flows.Pause\n    tasks:\n     - id: ko\n       type: io.kestra.core.tasks.scripts.Bash\n       commands:\n        - 'echo \"trigger after manual restart\"'\n  - id: last\n    type: io.kestra.core.tasks.debugs.Return\n    format: \"{{task.id}} > {{taskrun.startDate}}\"\n```"
    },
    "io.kestra.core.tasks.flows.Pause-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.tasks.flows.Pause-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.core.tasks.flows.Pause" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nid: pause\nnamespace: io.kestra.tests\n\ntasks:\n  - id: pause\n    type: io.kestra.core.tasks.flows.Pause\n    tasks:\n     - id: ko\n       type: io.kestra.core.tasks.scripts.Bash\n       commands:\n        - 'echo \"trigger after manual restart\"'\n  - id: last\n    type: io.kestra.core.tasks.debugs.Return\n    format: \"{{task.id}} > {{taskrun.startDate}}\"\n```"
    },
    "io.kestra.core.tasks.flows.Sequential-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "errors": {
          "title": "List of tasks to run if any tasks failed on this FlowableTask",
          "$dynamic": false,
          "type": "array",
          "items": {
            "anyOf": [
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Create-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.ReadRange-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Export-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.Read-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackIncomingWebhook-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailSend-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroConverter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.openlineage.Emit-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.StorageWrite-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.TableMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.UpdateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucketIamPolicy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Compose-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.LoadFromGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gke.ClusterMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.ExtractToGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.auth.OauthAccessToken-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.vertexai.CustomJob-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CopyPartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeletePartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteList-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Query-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Put-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Search-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Scroll-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Bulk-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.FileTransform-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.Eval-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.airbyte.connections.Sync-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Snapshot-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Test-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Seed-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Setup-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Freshness-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Compile-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Build-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cloud.TriggerRun-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Run-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.AllowFailure-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Fail-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Set-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Pause-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Fetch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Concat-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Node-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Switch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Parallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.PurgeExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Worker-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Bash-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Purge-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Echo-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Sequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Python-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.If-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Flow-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Split-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Counts-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Log-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachParallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Size-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachSequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Template-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Return-2" },
                  { "$dynamic": false }
                ]
              }
            ]
          }
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "tasks": {
          "minItems": 1,
          "$dynamic": false,
          "type": "array",
          "items": {
            "anyOf": [
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Create-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.ReadRange-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Export-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.Read-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackIncomingWebhook-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailSend-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroConverter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.openlineage.Emit-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.StorageWrite-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.TableMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.UpdateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucketIamPolicy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Compose-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.LoadFromGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gke.ClusterMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.ExtractToGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.auth.OauthAccessToken-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.vertexai.CustomJob-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CopyPartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeletePartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteList-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Query-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Put-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Search-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Scroll-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Bulk-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.FileTransform-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.Eval-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.airbyte.connections.Sync-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Snapshot-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Test-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Seed-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Setup-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Freshness-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Compile-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Build-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cloud.TriggerRun-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Run-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.AllowFailure-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Fail-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Set-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Pause-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Fetch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Concat-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Node-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Switch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Parallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.PurgeExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Worker-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Bash-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Purge-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Echo-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Sequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Python-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.If-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Flow-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Split-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Counts-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Log-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachParallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Size-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachSequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Template-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Return-2" },
                  { "$dynamic": false }
                ]
              }
            ]
          }
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["id", "tasks", "type"],
      "title": "Process tasks one after the other sequentially",
      "markdownDescription": "Used to group tasks.##### Examples\n> \n```yaml\nid: sequential\nnamespace: io.kestra.tests\n\ntasks:\n  - id: sequential\n    type: io.kestra.core.tasks.flows.Sequential\n    tasks:\n      - id: 1st\n        type: io.kestra.core.tasks.debugs.Return\n        format: \"{{task.id}} > {{taskrun.startDate}}\"\n      - id: 2nd\n        type: io.kestra.core.tasks.debugs.Return\n        format: \"{{task.id}} > {{taskrun.id}}\"\n  - id: last\n    type: io.kestra.core.tasks.debugs.Return\n    format: \"{{task.id}} > {{taskrun.startDate}}\"\n```"
    },
    "io.kestra.core.tasks.flows.Sequential-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.tasks.flows.Sequential-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.core.tasks.flows.Sequential" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nid: sequential\nnamespace: io.kestra.tests\n\ntasks:\n  - id: sequential\n    type: io.kestra.core.tasks.flows.Sequential\n    tasks:\n      - id: 1st\n        type: io.kestra.core.tasks.debugs.Return\n        format: \"{{task.id}} > {{taskrun.startDate}}\"\n      - id: 2nd\n        type: io.kestra.core.tasks.debugs.Return\n        format: \"{{task.id}} > {{taskrun.id}}\"\n  - id: last\n    type: io.kestra.core.tasks.debugs.Return\n    format: \"{{task.id}} > {{taskrun.startDate}}\"\n```"
    },
    "io.kestra.core.tasks.flows.Switch-1": {
      "type": "object",
      "properties": {
        "cases": {
          "type": "object",
          "title": "The case switch, as map with key the value, value the list of tasks",
          "$dynamic": false
        },
        "defaults": {
          "$dynamic": false,
          "type": "array",
          "items": {
            "anyOf": [
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Create-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.ReadRange-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Export-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.Read-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackIncomingWebhook-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailSend-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroConverter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.openlineage.Emit-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.StorageWrite-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.TableMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.UpdateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucketIamPolicy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Compose-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.LoadFromGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gke.ClusterMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.ExtractToGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.auth.OauthAccessToken-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.vertexai.CustomJob-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CopyPartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeletePartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteList-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Query-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Put-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Search-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Scroll-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Bulk-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.FileTransform-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.Eval-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.airbyte.connections.Sync-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Snapshot-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Test-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Seed-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Setup-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Freshness-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Compile-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Build-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cloud.TriggerRun-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Run-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.AllowFailure-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Fail-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Set-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Pause-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Fetch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Concat-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Node-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Switch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Parallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.PurgeExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Worker-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Bash-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Purge-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Echo-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Sequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Python-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.If-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Flow-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Split-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Counts-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Log-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachParallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Size-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachSequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Template-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Return-2" },
                  { "$dynamic": false }
                ]
              }
            ]
          }
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "errors": {
          "title": "List of tasks to run if any tasks failed on this FlowableTask",
          "$dynamic": false,
          "type": "array",
          "items": {
            "anyOf": [
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Create-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.ReadRange-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Export-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.Read-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackIncomingWebhook-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailSend-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroConverter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.openlineage.Emit-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.StorageWrite-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.TableMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.UpdateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucketIamPolicy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Compose-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.LoadFromGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gke.ClusterMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.ExtractToGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.auth.OauthAccessToken-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.vertexai.CustomJob-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CopyPartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeletePartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteList-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Query-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Put-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Search-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Scroll-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Bulk-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.FileTransform-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.Eval-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.airbyte.connections.Sync-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Snapshot-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Test-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Seed-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Setup-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Freshness-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Compile-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Build-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cloud.TriggerRun-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Run-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.AllowFailure-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Fail-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Set-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Pause-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Fetch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Concat-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Node-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Switch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Parallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.PurgeExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Worker-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Bash-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Purge-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Echo-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Sequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Python-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.If-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Flow-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Split-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Counts-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Log-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachParallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Size-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachSequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Template-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Return-2" },
                  { "$dynamic": false }
                ]
              }
            ]
          }
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "value": {
          "type": "string",
          "title": "The value to be evaluated",
          "minLength": 1,
          "$dynamic": true
        }
      },
      "required": ["id", "type", "value"],
      "title": "Process some tasks conditionally depending on a contextual value",
      "markdownDescription": "Allow some workflow based on context variables, for example branch a flow based on a previous task.##### Examples\n> \n```yaml\nid: switch\nnamespace: io.kestra.tests\n\ninputs:\n  - name: string\n    type: STRING\n    required: true\n\ntasks:\n  - id: switch\n    type: io.kestra.core.tasks.flows.Switch\n    value: \"{{inputs.string}}\"\n    cases:\n      FIRST:\n        - id: 1st\n          type: io.kestra.core.tasks.debugs.Return\n          format: \"{{task.id}} > {{taskrun.startDate}}\"\n      SECOND:\n        - id: 2nd\n          type: io.kestra.core.tasks.debugs.Return\n          format: \"{{task.id}} > {{taskrun.startDate}}\"\n      THIRD:\n        - id: 3th\n          type: io.kestra.core.tasks.debugs.Return\n          format: \"{{task.id}} > {{taskrun.startDate}}\"\n    defaults:\n      - id: default\n        type: io.kestra.core.tasks.debugs.Return\n        format: \"{{task.id}} > {{taskrun.startDate}}\"\n```"
    },
    "io.kestra.core.tasks.flows.Switch-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.tasks.flows.Switch-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.core.tasks.flows.Switch" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nid: switch\nnamespace: io.kestra.tests\n\ninputs:\n  - name: string\n    type: STRING\n    required: true\n\ntasks:\n  - id: switch\n    type: io.kestra.core.tasks.flows.Switch\n    value: \"{{inputs.string}}\"\n    cases:\n      FIRST:\n        - id: 1st\n          type: io.kestra.core.tasks.debugs.Return\n          format: \"{{task.id}} > {{taskrun.startDate}}\"\n      SECOND:\n        - id: 2nd\n          type: io.kestra.core.tasks.debugs.Return\n          format: \"{{task.id}} > {{taskrun.startDate}}\"\n      THIRD:\n        - id: 3th\n          type: io.kestra.core.tasks.debugs.Return\n          format: \"{{task.id}} > {{taskrun.startDate}}\"\n    defaults:\n      - id: default\n        type: io.kestra.core.tasks.debugs.Return\n        format: \"{{task.id}} > {{taskrun.startDate}}\"\n```"
    },
    "io.kestra.core.tasks.flows.Template-1": {
      "type": "object",
      "properties": {
        "args": {
          "type": "object",
          "title": "The args to pass to the template",
          "additionalProperties": { "type": "string" },
          "$dynamic": true,
          "markdownDescription": "You can provide a list of named arguments (like function argument on dev) allowing to rename outputs of current flow for this template.\nfor example, if you declare this use of template like this: \n```yaml\n  - id: 2-template\n    type: io.kestra.core.tasks.flows.Template\n    namespace: io.kestra.tests\n    templateId: template\n    args:\n      forward: \"{{ output.task-id.uri }}\"\n```\nYou will be able to get this output on the template with `{{ parent.outputs.args.forward }}`"
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "errors": {
          "title": "List of tasks to run if any tasks failed on this FlowableTask",
          "$dynamic": false,
          "type": "array",
          "items": {
            "anyOf": [
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Create-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.ReadRange-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Export-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.Read-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackIncomingWebhook-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailSend-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroConverter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.openlineage.Emit-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.StorageWrite-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.TableMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.UpdateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucketIamPolicy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Compose-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.LoadFromGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gke.ClusterMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.ExtractToGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.auth.OauthAccessToken-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.vertexai.CustomJob-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CopyPartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeletePartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteList-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Query-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Put-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Search-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Scroll-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Bulk-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.FileTransform-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.Eval-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.airbyte.connections.Sync-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Snapshot-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Test-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Seed-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Setup-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Freshness-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Compile-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Build-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cloud.TriggerRun-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Run-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.AllowFailure-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Fail-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Set-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Pause-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Fetch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Concat-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Node-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Switch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Parallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.PurgeExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Worker-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Bash-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Purge-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Echo-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Sequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Python-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.If-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Flow-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Split-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Counts-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Log-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachParallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Size-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachSequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Template-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Return-2" },
                  { "$dynamic": false }
                ]
              }
            ]
          }
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "namespace": {
          "type": "string",
          "title": "The namespace of the template",
          "$dynamic": false
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "templateId": { "type": "string", "title": "The id of the template", "$dynamic": false },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["id", "namespace", "templateId", "type"],
      "title": "Include a reusable template inside a flow",
      "markdownDescription": "##### Examples\n> \n```yaml\nid: template\nnamespace: io.kestra.tests\n\ninputs:\n  - name: with-string\n    type: STRING\n\ntasks:\n  - id: 1-return\n    type: io.kestra.core.tasks.debugs.Return\n    format: \"{{task.id}} > {{taskrun.startDate}}\"\n  - id: 2-template\n    type: io.kestra.core.tasks.flows.Template\n    namespace: io.kestra.tests\n    templateId: template\n    args:\n      my-forward: \"{{ inputs.with-string }}\"\n  - id: 3-end\n    type: io.kestra.core.tasks.debugs.Return\n    format: \"{{task.id}} > {{taskrun.startDate}}\"\n\n```"
    },
    "io.kestra.core.tasks.flows.Template-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.tasks.flows.Template-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.core.tasks.flows.Template" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nid: template\nnamespace: io.kestra.tests\n\ninputs:\n  - name: with-string\n    type: STRING\n\ntasks:\n  - id: 1-return\n    type: io.kestra.core.tasks.debugs.Return\n    format: \"{{task.id}} > {{taskrun.startDate}}\"\n  - id: 2-template\n    type: io.kestra.core.tasks.flows.Template\n    namespace: io.kestra.tests\n    templateId: template\n    args:\n      my-forward: \"{{ inputs.with-string }}\"\n  - id: 3-end\n    type: io.kestra.core.tasks.debugs.Return\n    format: \"{{task.id}} > {{taskrun.startDate}}\"\n\n```"
    },
    "io.kestra.core.tasks.flows.Worker-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "errors": {
          "title": "List of tasks to run if any tasks failed on this FlowableTask",
          "$dynamic": false,
          "type": "array",
          "items": {
            "anyOf": [
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Create-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.ReadRange-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Export-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.Read-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackIncomingWebhook-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailSend-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroConverter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.openlineage.Emit-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.StorageWrite-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.TableMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.UpdateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucketIamPolicy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Compose-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.LoadFromGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gke.ClusterMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.ExtractToGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.auth.OauthAccessToken-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.vertexai.CustomJob-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CopyPartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeletePartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteList-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Query-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Put-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Search-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Scroll-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Bulk-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.FileTransform-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.Eval-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.airbyte.connections.Sync-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Snapshot-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Test-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Seed-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Setup-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Freshness-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Compile-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Build-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cloud.TriggerRun-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Run-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.AllowFailure-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Fail-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Set-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Pause-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Fetch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Concat-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Node-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Switch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Parallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.PurgeExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Worker-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Bash-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Purge-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Echo-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Sequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Python-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.If-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Flow-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Split-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Counts-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Log-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachParallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Size-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachSequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Template-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Return-2" },
                  { "$dynamic": false }
                ]
              }
            ]
          }
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "tasks": {
          "minItems": 1,
          "$dynamic": false,
          "type": "array",
          "items": {
            "anyOf": [
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Create-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.ReadRange-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Export-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.Read-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  {
                    "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackIncomingWebhook-2"
                  },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailSend-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackTemplate-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroConverter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlWriter-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroReader-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.openlineage.Emit-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Move-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.http.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.StorageWrite-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.TableMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Downloads-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.UpdateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Download-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateTable-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucketIamPolicy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Compose-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.LoadFromGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gke.ClusterMetadata-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.ExtractToGcs-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.auth.OauthAccessToken-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.vertexai.CustomJob-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Upload-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CopyPartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteDataset-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeletePartitions-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucket-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteList-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Copy-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Query-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Request-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Load-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Put-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Search-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Scroll-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Bulk-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.FileTransform-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.Eval-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.airbyte.connections.Sync-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.FileCompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveDecompress-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Snapshot-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Test-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Seed-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Setup-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.List-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Freshness-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Compile-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Build-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cloud.TriggerRun-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Run-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.AllowFailure-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Fail-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Set-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Pause-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Fetch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Concat-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Get-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.states.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Node-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Switch-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Parallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.PurgeExecution-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Worker-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Bash-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Purge-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Echo-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Sequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Python-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.If-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Flow-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Delete-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Split-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.executions.Counts-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.log.Log-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachParallel-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.storages.Size-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.EachSequential-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.flows.Template-2" },
                  { "$dynamic": false }
                ]
              },
              {
                "allOf": [
                  { "$ref": "#/definitions/io.kestra.core.tasks.debugs.Return-2" },
                  { "$dynamic": false }
                ]
              }
            ]
          }
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["id", "tasks", "type"],
      "title": "Run tasks sequentially sharing the same filesystem",
      "markdownDescription": "By default, Kestra will launch each task on a fresh filesystem and on a new worker instance.\nThis task will run sequentially keeping the same filesystem allowing reuse previous task file on next tasks andkeep tracking of execution time for each task. This task is mostly useful when working with large filesystem operation.##### Examples\n> \n```yaml\nid: worker\nnamespace: io.kestra.tests\n\ntasks:\n  - id: worker\n    type: io.kestra.core.tasks.flows.Worker\n    tasks:\n      - id: first\n        type: io.kestra.core.tasks.scripts.Bash\n        commands:\n        - 'echo \"{{ taskrun.id }}\" > {{ workingDir }}/stay.txt'\n      - id: second\n        type: io.kestra.core.tasks.scripts.Bash\n        commands:\n        - |\n          echo '::{\"outputs\": {\"stay\":\"'$(cat {{ workingDir }}/stay.txt)'\"}}::'\n```"
    },
    "io.kestra.core.tasks.flows.Worker-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.tasks.flows.Worker-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.core.tasks.flows.Worker" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nid: worker\nnamespace: io.kestra.tests\n\ntasks:\n  - id: worker\n    type: io.kestra.core.tasks.flows.Worker\n    tasks:\n      - id: first\n        type: io.kestra.core.tasks.scripts.Bash\n        commands:\n        - 'echo \"{{ taskrun.id }}\" > {{ workingDir }}/stay.txt'\n      - id: second\n        type: io.kestra.core.tasks.scripts.Bash\n        commands:\n        - |\n          echo '::{\"outputs\": {\"stay\":\"'$(cat {{ workingDir }}/stay.txt)'\"}}::'\n```"
    },
    "io.kestra.core.tasks.log.Fetch-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "executionId": {
          "type": "string",
          "title": "Filter on specific execution",
          "$dynamic": true,
          "markdownDescription": "If not set, will use the current execution"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "level": {
          "type": "string",
          "enum": ["ERROR", "WARN", "INFO", "DEBUG", "TRACE"],
          "title": "Minimum log level you want to fetch",
          "default": "INFO",
          "$dynamic": false,
          "markdownDescription": "Default value is : `INFO`"
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "tasksId": {
          "title": "Filter on specific task(s)",
          "$dynamic": false,
          "type": "array",
          "items": { "type": "string", "$dynamic": false }
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["id", "type"],
      "title": "Output execution logs in a file.",
      "markdownDescription": "This task is useful to propagate your logs.##### Examples\n> \n```yaml\nlevel: ERROR\n```\n\n> \n```yaml\nlevel: WARN\ntasksId: \n  - \"previous-task-id\"\n```\n\n> \n```yaml\nlevel: WARN\nexecutionId: \"{{execution.id}}\"\n```"
    },
    "io.kestra.core.tasks.log.Fetch-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.tasks.log.Fetch-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.core.tasks.log.Fetch" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nlevel: ERROR\n```\n\n> \n```yaml\nlevel: WARN\ntasksId: \n  - \"previous-task-id\"\n```\n\n> \n```yaml\nlevel: WARN\nexecutionId: \"{{execution.id}}\"\n```"
    },
    "io.kestra.core.tasks.log.Log-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "level": {
          "type": "string",
          "enum": ["ERROR", "WARN", "INFO", "DEBUG", "TRACE"],
          "title": "The log level",
          "default": "INFO",
          "$dynamic": false,
          "markdownDescription": "Default value is : `INFO`"
        },
        "message": {
          "title": "The message(s) to log",
          "anyOf": [{ "type": "string" }, { "type": "array", "items": { "type": "string" } }],
          "$dynamic": true,
          "markdownDescription": "Can be a string or an array of string"
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["id", "message", "type"],
      "title": "Log a message in the task logs",
      "markdownDescription": "##### Examples\n> \n```yaml\nlevel: WARN\nmessage: \"{{task.id}} > {{taskrun.startDate}}\"\n```\n\n> \n```yaml\nlevel: WARN\nmessage:    - 'Task id : \"{{task.id}}\"'   - 'Start date: \"{{taskrun.startDate}}\"'\n```"
    },
    "io.kestra.core.tasks.log.Log-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.tasks.log.Log-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.core.tasks.log.Log" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nlevel: WARN\nmessage: \"{{task.id}} > {{taskrun.startDate}}\"\n```\n\n> \n```yaml\nlevel: WARN\nmessage:    - 'Task id : \"{{task.id}}\"'   - 'Start date: \"{{taskrun.startDate}}\"'\n```"
    },
    "io.kestra.core.tasks.scripts.AbstractBash-DockerOptions": {
      "type": "object",
      "properties": {
        "cpu": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.core.tasks.scripts.AbstractBash-DockerOptions-Cpu" },
            {
              "title": "Limits cpu usage.",
              "$dynamic": false,
              "markdownDescription": "By default, each container’s access to the host machine’s CPU cycles is unlimited. You can set various constraints to limit a given container’s access to the host machine’s CPU cycles."
            }
          ]
        },
        "deviceRequests": {
          "title": "A list of request for devices to be sent to device drivers",
          "$dynamic": false,
          "type": "array",
          "items": {
            "allOf": [
              {
                "$ref": "#/definitions/io.kestra.core.tasks.scripts.AbstractBash-DockerOptions-DeviceRequest"
              },
              { "$dynamic": false }
            ]
          }
        },
        "dockerConfig": {
          "type": "string",
          "title": "Docker config file",
          "$dynamic": true,
          "markdownDescription": "Full file that can be used to configure private registries, ..."
        },
        "dockerHost": { "type": "string", "title": "Docker api uri", "$dynamic": true },
        "entryPoint": {
          "title": "Docker entrypoint to use",
          "$dynamic": true,
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "extraHosts": {
          "title": "Docker extra host to use",
          "$dynamic": true,
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "image": {
          "type": "string",
          "title": "Docker image to use",
          "minLength": 1,
          "$dynamic": true
        },
        "memory": {
          "allOf": [
            {
              "$ref": "#/definitions/io.kestra.core.tasks.scripts.AbstractBash-DockerOptions-Memory"
            },
            {
              "title": "Limits memory usage.",
              "$dynamic": false,
              "markdownDescription": "Docker can enforce hard memory limits, which allow the container to use no more than a given amount of user or system memory, or soft limits, which allow the container to use as much memory as it needs unless certain conditions are met, such as when the kernel detects low memory or contention on the host machine. Some of these options have different effects when used alone or when more than one option is set."
            }
          ]
        },
        "networkMode": {
          "type": "string",
          "title": "Docker network mode to use",
          "$dynamic": true
        },
        "pullImage": {
          "type": "boolean",
          "title": "Is a pull of image must be done before starting the container",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Mostly used for local image with registry\n\nDefault value is : `true`"
        },
        "user": { "type": "string", "title": "Docker user to use", "$dynamic": true },
        "volumes": {
          "title": "List of volumes to mount",
          "$dynamic": true,
          "markdownDescription": "Must be a valid mount expression as string, example : `/home/user:/app`\n\nVolumes mount are disabled by default for security reasons, you must enabled on server configuration with `kestra.tasks.scripts.docker.volume-enabled` to `true`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        }
      },
      "required": ["image"]
    },
    "io.kestra.core.tasks.scripts.AbstractBash-DockerOptions-Cpu": {
      "type": "object",
      "properties": {
        "cpus": {
          "type": "integer",
          "title": "Specify how much of the available CPU resources a container can use.",
          "markdownDescription": "For instance, if the host machine has two CPUs and you set `cpus:\"1.5\"`, the container is guaranteed at most one and a half of the CPUs"
        }
      }
    },
    "io.kestra.core.tasks.scripts.AbstractBash-DockerOptions-DeviceRequest": {
      "type": "object",
      "properties": {
        "capabilities": {
          "title": "A list of capabilities; an OR list of AND lists of capabilities.",
          "type": "array",
          "items": { "type": "array", "items": { "type": "string" } }
        },
        "count": { "type": "integer" },
        "deviceIds": { "type": "array", "items": { "type": "string" } },
        "driver": { "type": "string" },
        "options": {
          "type": "object",
          "title": "Driver-specific options, specified as a key/value pairs.",
          "markdownDescription": "These options are passed directly to the driver."
        }
      },
      "title": "A request for devices to be sent to device drivers"
    },
    "io.kestra.core.tasks.scripts.AbstractBash-DockerOptions-Memory": {
      "type": "object",
      "properties": {
        "kernelMemory": {
          "type": "string",
          "title": "The maximum amount of kernel memory the container can use.",
          "$dynamic": true,
          "markdownDescription": "The minimum allowed value is 4m. Because kernel memory cannot be swapped out, a container which is starved of kernel memory may block host machine resources, which can have side effects on the host machine and on other containers. See [--kernel-memory](https://docs.docker.com/config/containers/resource_constraints/#--kernel-memory-details) details."
        },
        "memory": {
          "type": "string",
          "title": "The maximum amount of memory the container can use.",
          "$dynamic": true,
          "markdownDescription": "That is, you must set the value to at least 6 megabytes."
        },
        "memoryReservation": {
          "type": "string",
          "title": "Allows you to specify a soft limit smaller than --memory which is activated when Docker detects contention or low memory on the host machine.",
          "$dynamic": true,
          "markdownDescription": "If you use `memoryReservation`, it must be set lower than `memory` for it to take precedence. Because it is a soft limit, it does not guarantee that the container doesn’t exceed the limit."
        },
        "memorySwap": {
          "type": "string",
          "title": "The amount of memory this container is allowed to swap to disk",
          "$dynamic": true,
          "markdownDescription": "If `memory` and `memorySwap` are set to the same value, this prevents containers from using any swap. This is because `memorySwap` is the amount of combined memory and swap that can be used, while `memory` is only the amount of physical memory that can be used."
        },
        "memorySwappiness": {
          "type": "string",
          "title": "The amount of memory this container is allowed to swap to disk",
          "$dynamic": true,
          "markdownDescription": "By default, the host kernel can swap out a percentage of anonymous pages used by a container. You can set `memorySwappiness` to a value between 0 and 100, to tune this percentage."
        },
        "oomKillDisable": {
          "type": "boolean",
          "title": "By default, if an out-of-memory (OOM) error occurs, the kernel kills processes in a container.",
          "$dynamic": false,
          "markdownDescription": "To change this behavior, use the `oomKillDisable` option. Only disable the OOM killer on containers where you have also set the `memory` option. If the `memory` flag is not set, the host can run out of memory and the kernel may need to kill the host system’s processes to free memory."
        }
      }
    },
    "io.kestra.core.tasks.scripts.Bash-1": {
      "type": "object",
      "properties": {
        "commands": {
          "title": "The commands to run",
          "minItems": 1,
          "$dynamic": true,
          "markdownDescription": "Default command will be launched with `/bin/sh -c \"commands\"`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "dockerOptions": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.core.tasks.scripts.AbstractBash-DockerOptions" },
            { "title": "Docker options when using runner `DOCKER`", "$dynamic": false }
          ]
        },
        "env": {
          "type": "object",
          "title": "Additional environments variable to add for current process.",
          "additionalProperties": { "type": "string" },
          "$dynamic": true
        },
        "exitOnFailed": {
          "type": "boolean",
          "title": "Exit if any non true return value",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "This tells bash that it should exit the script if any statement returns a non-true return value. \nThe benefit of using -e is that it prevents errors snowballing into serious issues when they could have been caught earlier.\n\nDefault value is : `true`"
        },
        "files": {
          "title": "The list of files that will be uploaded to internal storage, ",
          "$dynamic": true,
          "$deprecated": true,
          "markdownDescription": "use `outputFiles` property instead",
          "type": "array",
          "items": { "type": "string", "$dynamic": true, "$deprecated": true }
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "inputFiles": {
          "title": "Input files are extra files that will be available in the script working directory.",
          "additionalProperties": { "type": "string" },
          "$dynamic": true,
          "markdownDescription": "You can define the files as map or a JSON string.Each file can be defined inlined or can reference a file from Kestra's internal storage."
        },
        "interpreter": {
          "type": "string",
          "title": "Interpreter to used",
          "default": "/bin/sh",
          "minLength": 1,
          "$dynamic": false,
          "markdownDescription": "Default value is : `/bin/sh`"
        },
        "interpreterArgs": {
          "title": "Interpreter args used",
          "default": ["-c"],
          "$dynamic": false,
          "markdownDescription": "Default value is : `- -c`\n\nDefault value is : `- -c`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false }
        },
        "outputDirs": {
          "title": "Output dirs list that will be uploaded to internal storage",
          "$dynamic": false,
          "markdownDescription": "List of key that will generate temporary directories.\nOn the command, just can use with special variable named `outputDirs.key`.\nIf you add a files with `[\"myDir\"]`, you can use the special vars `echo 1 >> {[ outputDirs.myDir }}/file1.txt` and `echo 2 >> {[ outputDirs.myDir }}/file2.txt` and both files will be uploaded to internal storage. Then you can used them on others tasks using `{{ outputs.taskId.outputFiles['myDir/file1.txt'] }}`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false }
        },
        "outputFiles": {
          "title": "Output file list that will be uploaded to internal storage",
          "$dynamic": false,
          "markdownDescription": "List of key that will generate temporary files.\nOn the command, just can use with special variable named `outputFiles.key`.\nIf you add a files with `[\"first\"]`, you can use the special vars `echo 1 >> {[ outputFiles.first }}` and you used on others tasks using `{{ outputs.taskId.outputFiles.first }}`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false }
        },
        "outputsFiles": {
          "title": "Deprecated Output file",
          "$dynamic": false,
          "$deprecated": true,
          "markdownDescription": "use `outputFiles`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false, "$deprecated": true }
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "runner": {
          "type": "string",
          "enum": ["PROCESS", "DOCKER"],
          "title": "Runner to use",
          "default": "PROCESS",
          "$dynamic": false,
          "markdownDescription": "Default value is : `PROCESS`"
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "warningOnStdErr": {
          "type": "boolean",
          "title": "Use `WARNING` state if any stdErr is sent",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        }
      },
      "required": ["commands", "id", "type"],
      "title": "Execute a Bash script, command or set of commands.",
      "markdownDescription": "##### Examples\n> Single bash command\n```yaml\ncommands:\n- 'echo \"The current execution is : {{execution.id}}\"'\n```\n\n> Bash command that generate file in storage accessible through outputs\n```yaml\noutputFiles:\n- first\n- second\ncommands:\n- echo \"1\" >> {{ outputFiles.first }}\n- echo \"2\" >> {{ outputFiles.second }}\n```\n\n> Bash with some inputs files\n```yaml\ninputFiles:\n  script.sh: |\n    echo {{ workingDir }}\ncommands:\n- /bin/bash script.sh\n```\n\n> Bash with an input file from Kestra's local storage created by a previous task.\n```yaml\ninputFiles:\n  data.csv: {{outputs.previousTaskId.uri}}\ncommands:\n  - cat data.csv\n```\n\n> Run a command on a docker image\n```yaml\nrunner: DOCKER\ndockerOptions:\n  image: php\ncommands:\n- 'php -r 'print(phpversion() . \"\\n\");'\n```\n\n> Execute cmd on windows\n```yaml\ncommands:\n  - 'echo \"The current execution is : {{execution.id}}\"'\nexitOnFailed: false\ninterpreter: cmd\ninterpreterArgs:\n  - /c\n```\n\n> Set outputs from bash standard output\n```yaml\ncommands:\n  - echo '::{\"outputs\":{\"test\":\"value\",\"int\":2,\"bool\":true,\"float\":3.65}}::'\n```\n\n> Send a counter metric from bash standard output\n```yaml\ncommands:\n  - echo '::{\"metrics\":[{\"name\":\"count\",\"type\":\"counter\",\"value\":1,\"tags\":{\"tag1\":\"i\",\"tag2\":\"win\"}}]}::'\n```"
    },
    "io.kestra.core.tasks.scripts.Bash-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Bash-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.core.tasks.scripts.Bash" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Single bash command\n```yaml\ncommands:\n- 'echo \"The current execution is : {{execution.id}}\"'\n```\n\n> Bash command that generate file in storage accessible through outputs\n```yaml\noutputFiles:\n- first\n- second\ncommands:\n- echo \"1\" >> {{ outputFiles.first }}\n- echo \"2\" >> {{ outputFiles.second }}\n```\n\n> Bash with some inputs files\n```yaml\ninputFiles:\n  script.sh: |\n    echo {{ workingDir }}\ncommands:\n- /bin/bash script.sh\n```\n\n> Bash with an input file from Kestra's local storage created by a previous task.\n```yaml\ninputFiles:\n  data.csv: {{outputs.previousTaskId.uri}}\ncommands:\n  - cat data.csv\n```\n\n> Run a command on a docker image\n```yaml\nrunner: DOCKER\ndockerOptions:\n  image: php\ncommands:\n- 'php -r 'print(phpversion() . \"\\n\");'\n```\n\n> Execute cmd on windows\n```yaml\ncommands:\n  - 'echo \"The current execution is : {{execution.id}}\"'\nexitOnFailed: false\ninterpreter: cmd\ninterpreterArgs:\n  - /c\n```\n\n> Set outputs from bash standard output\n```yaml\ncommands:\n  - echo '::{\"outputs\":{\"test\":\"value\",\"int\":2,\"bool\":true,\"float\":3.65}}::'\n```\n\n> Send a counter metric from bash standard output\n```yaml\ncommands:\n  - echo '::{\"metrics\":[{\"name\":\"count\",\"type\":\"counter\",\"value\":1,\"tags\":{\"tag1\":\"i\",\"tag2\":\"win\"}}]}::'\n```"
    },
    "io.kestra.core.tasks.scripts.Node-1": {
      "type": "object",
      "properties": {
        "args": {
          "title": "node command args",
          "$dynamic": true,
          "markdownDescription": "Arguments list to pass to main javascript script",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "dockerOptions": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.core.tasks.scripts.AbstractBash-DockerOptions" },
            { "title": "Docker options when using runner `DOCKER`", "$dynamic": false }
          ]
        },
        "env": {
          "type": "object",
          "title": "Additional environments variable to add for current process.",
          "additionalProperties": { "type": "string" },
          "$dynamic": true
        },
        "exitOnFailed": {
          "type": "boolean",
          "title": "Exit if any non true return value",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "This tells bash that it should exit the script if any statement returns a non-true return value. \nThe benefit of using -e is that it prevents errors snowballing into serious issues when they could have been caught earlier.\n\nDefault value is : `true`"
        },
        "files": {
          "title": "The list of files that will be uploaded to internal storage, ",
          "$dynamic": true,
          "$deprecated": true,
          "markdownDescription": "use `outputFiles` property instead",
          "type": "array",
          "items": { "type": "string", "$dynamic": true, "$deprecated": true }
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "inputFiles": {
          "title": "Input files are extra files that will be available in the script working directory.",
          "additionalProperties": { "type": "string" },
          "$dynamic": true,
          "markdownDescription": "You can define the files as map or a JSON string.Each file can be defined inlined or can reference a file from Kestra's internal storage."
        },
        "interpreter": {
          "type": "string",
          "title": "Interpreter to used",
          "default": "/bin/sh",
          "minLength": 1,
          "$dynamic": false,
          "markdownDescription": "Default value is : `/bin/sh`"
        },
        "interpreterArgs": {
          "title": "Interpreter args used",
          "default": ["-c"],
          "$dynamic": false,
          "markdownDescription": "Default value is : `- -c`\n\nDefault value is : `- -c`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false }
        },
        "nodePath": {
          "type": "string",
          "title": "The node interpreter to use",
          "default": "node",
          "$dynamic": false,
          "markdownDescription": "Set the node interpreter path to use\n\nDefault value is : `node`"
        },
        "npmPath": {
          "type": "string",
          "title": "The npm binary to use",
          "default": "npm",
          "$dynamic": false,
          "markdownDescription": "Set the npm binary path for node dependencies setup\n\nDefault value is : `npm`"
        },
        "outputDirs": {
          "title": "Output dirs list that will be uploaded to internal storage",
          "$dynamic": false,
          "markdownDescription": "List of key that will generate temporary directories.\nOn the command, just can use with special variable named `outputDirs.key`.\nIf you add a files with `[\"myDir\"]`, you can use the special vars `echo 1 >> {[ outputDirs.myDir }}/file1.txt` and `echo 2 >> {[ outputDirs.myDir }}/file2.txt` and both files will be uploaded to internal storage. Then you can used them on others tasks using `{{ outputs.taskId.outputFiles['myDir/file1.txt'] }}`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false }
        },
        "outputFiles": {
          "title": "Output file list that will be uploaded to internal storage",
          "$dynamic": false,
          "markdownDescription": "List of key that will generate temporary files.\nOn the command, just can use with special variable named `outputFiles.key`.\nIf you add a files with `[\"first\"]`, you can use the special vars `echo 1 >> {[ outputFiles.first }}` and you used on others tasks using `{{ outputs.taskId.outputFiles.first }}`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false }
        },
        "outputsFiles": {
          "title": "Deprecated Output file",
          "$dynamic": false,
          "$deprecated": true,
          "markdownDescription": "use `outputFiles`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false, "$deprecated": true }
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "runner": {
          "type": "string",
          "enum": ["PROCESS", "DOCKER"],
          "title": "Runner to use",
          "default": "PROCESS",
          "$dynamic": false,
          "markdownDescription": "Default value is : `PROCESS`"
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "warningOnStdErr": {
          "type": "boolean",
          "title": "Use `WARNING` state if any stdErr is sent",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        }
      },
      "required": ["id", "type"],
      "title": "Execute a Node.js script",
      "markdownDescription": "With the Node task, you can execute a full javascript script.\nThe task will create a temporary folder for each tasks and allows to install some npm packages defined in an optional `package.json` file.\n\nBy convention, you need to define at least a `main.js` files in `inputFiles` that will be the script used.\nYou can also  add as many javascript files as you need in `inputFiles`.\n\nYou can send outputs & metrics from your node script that can be used by others tasks. In order to help, we inject a node package directly on the working dir.Here is an example usage:\n```javascript\nconst Kestra = require(\"./kestra\");\nKestra.outputs({test: 'value', int: 2, bool: true, float: 3.65});\nKestra.counter('count', 1, {tag1: 'i', tag2: 'win'});\nKestra.timer('timer1', (callback) => { setTimeout(callback, 1000) }, {tag1: 'i', tag2: 'lost'});\nKestra.timer('timer2', 2.12, {tag1: 'i', tag2: 'destroy'});\n```##### Examples\n> Execute a node script\n```yaml\ninputFiles:\n  main.js: |\n    const Kestra = require(\"./kestra\");\n    const fs = require('fs')\n    const result = fs.readFileSync(process.argv[2], \"utf-8\")\n    console.log(JSON.parse(result).status)\n    const axios = require('axios')\n    axios.get('http://google.fr').then(d => { console.log(d.status); Kestra.outputs({'status': d.status, 'text': d.data})})\n    console.log(require('./mymodule').value)\n  data.json: |\n    {\"status\": \"OK\"}\n  mymodule.js: |\n    module.exports.value = 'hello world'\n  package.json: |\n    {\n      \"name\": \"tmp\",\n      \"version\": \"1.0.0\",\n      \"description\": \"\",\n      \"main\": \"index.js\",\n      \"dependencies\": {\n          \"axios\": \"^0.20.0\"\n      },\n      \"devDependencies\": {},\n      \"scripts\": {\n          \"test\": \"echo `Error: no test specified` && exit 1\"\n      },\n      \"author\": \"\",\n      \"license\": \"ISC\"\n    }\nargs:\n  - data.json\n```\n\n> Execute a node script with an input file from Kestra's local storage created by a previous task.\n```yaml\ninputFiles:\n  data.csv: {{outputs.previousTaskId.uri}}\n  main.js: |\n    const fs = require('fs')\n    const result = fs.readFileSync('data.csv', 'utf-8')\n    console.log(result)\n```"
    },
    "io.kestra.core.tasks.scripts.Node-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Node-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.core.tasks.scripts.Node" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Execute a node script\n```yaml\ninputFiles:\n  main.js: |\n    const Kestra = require(\"./kestra\");\n    const fs = require('fs')\n    const result = fs.readFileSync(process.argv[2], \"utf-8\")\n    console.log(JSON.parse(result).status)\n    const axios = require('axios')\n    axios.get('http://google.fr').then(d => { console.log(d.status); Kestra.outputs({'status': d.status, 'text': d.data})})\n    console.log(require('./mymodule').value)\n  data.json: |\n    {\"status\": \"OK\"}\n  mymodule.js: |\n    module.exports.value = 'hello world'\n  package.json: |\n    {\n      \"name\": \"tmp\",\n      \"version\": \"1.0.0\",\n      \"description\": \"\",\n      \"main\": \"index.js\",\n      \"dependencies\": {\n          \"axios\": \"^0.20.0\"\n      },\n      \"devDependencies\": {},\n      \"scripts\": {\n          \"test\": \"echo `Error: no test specified` && exit 1\"\n      },\n      \"author\": \"\",\n      \"license\": \"ISC\"\n    }\nargs:\n  - data.json\n```\n\n> Execute a node script with an input file from Kestra's local storage created by a previous task.\n```yaml\ninputFiles:\n  data.csv: {{outputs.previousTaskId.uri}}\n  main.js: |\n    const fs = require('fs')\n    const result = fs.readFileSync('data.csv', 'utf-8')\n    console.log(result)\n```"
    },
    "io.kestra.core.tasks.scripts.Python-1": {
      "type": "object",
      "properties": {
        "args": {
          "title": "Python command args",
          "$dynamic": true,
          "markdownDescription": "Arguments list to pass to main python script",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "commands": {
          "title": "The commands to run",
          "default": ["./bin/python main.py"],
          "minItems": 1,
          "$dynamic": true,
          "markdownDescription": "Default command will be launched with `./bin/python main.py {{args}}`\n\nDefault value is : `- ./bin/python main.py`\n\nDefault value is : `- ./bin/python main.py`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "dockerOptions": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.core.tasks.scripts.AbstractBash-DockerOptions" },
            { "title": "Docker options when using runner `DOCKER`", "$dynamic": false }
          ]
        },
        "env": {
          "type": "object",
          "title": "Additional environments variable to add for current process.",
          "additionalProperties": { "type": "string" },
          "$dynamic": true
        },
        "exitOnFailed": {
          "type": "boolean",
          "title": "Exit if any non true return value",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "This tells bash that it should exit the script if any statement returns a non-true return value. \nThe benefit of using -e is that it prevents errors snowballing into serious issues when they could have been caught earlier.\n\nDefault value is : `true`"
        },
        "files": {
          "title": "The list of files that will be uploaded to internal storage, ",
          "$dynamic": true,
          "$deprecated": true,
          "markdownDescription": "use `outputFiles` property instead",
          "type": "array",
          "items": { "type": "string", "$dynamic": true, "$deprecated": true }
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "inputFiles": {
          "title": "Input files are extra files that will be available in the script working directory.",
          "additionalProperties": { "type": "string" },
          "$dynamic": true,
          "markdownDescription": "You can define the files as map or a JSON string.Each file can be defined inlined or can reference a file from Kestra's internal storage."
        },
        "interpreter": {
          "type": "string",
          "title": "Interpreter to used",
          "default": "/bin/sh",
          "minLength": 1,
          "$dynamic": false,
          "markdownDescription": "Default value is : `/bin/sh`"
        },
        "interpreterArgs": {
          "title": "Interpreter args used",
          "default": ["-c"],
          "$dynamic": false,
          "markdownDescription": "Default value is : `- -c`\n\nDefault value is : `- -c`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false }
        },
        "outputDirs": {
          "title": "Output dirs list that will be uploaded to internal storage",
          "$dynamic": false,
          "markdownDescription": "List of key that will generate temporary directories.\nOn the command, just can use with special variable named `outputDirs.key`.\nIf you add a files with `[\"myDir\"]`, you can use the special vars `echo 1 >> {[ outputDirs.myDir }}/file1.txt` and `echo 2 >> {[ outputDirs.myDir }}/file2.txt` and both files will be uploaded to internal storage. Then you can used them on others tasks using `{{ outputs.taskId.outputFiles['myDir/file1.txt'] }}`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false }
        },
        "outputFiles": {
          "title": "Output file list that will be uploaded to internal storage",
          "$dynamic": false,
          "markdownDescription": "List of key that will generate temporary files.\nOn the command, just can use with special variable named `outputFiles.key`.\nIf you add a files with `[\"first\"]`, you can use the special vars `echo 1 >> {[ outputFiles.first }}` and you used on others tasks using `{{ outputs.taskId.outputFiles.first }}`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false }
        },
        "outputsFiles": {
          "title": "Deprecated Output file",
          "$dynamic": false,
          "$deprecated": true,
          "markdownDescription": "use `outputFiles`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false, "$deprecated": true }
        },
        "pythonPath": {
          "type": "string",
          "title": "The python interpreter to use",
          "default": "python",
          "minLength": 1,
          "$dynamic": true,
          "markdownDescription": "Set the python interpreter path to use\n\nDefault value is : `python`"
        },
        "requirements": {
          "title": "Requirements are python dependencies to add to the python execution process",
          "$dynamic": true,
          "markdownDescription": "Python dependencies list to setup in the virtualenv, in the same format than requirements.txt",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "runner": {
          "type": "string",
          "enum": ["PROCESS", "DOCKER"],
          "title": "Runner to use",
          "default": "PROCESS",
          "$dynamic": false,
          "markdownDescription": "Default value is : `PROCESS`"
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "virtualEnv": {
          "type": "boolean",
          "title": "Create a virtual env",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "When a virtual env is created, we will install the `requirements` needed. Disabled it if all the requirements is already on the file system.\nIf you disabled the virtual env creation, the `requirements` will be ignored.\n\nDefault value is : `true`"
        },
        "warningOnStdErr": {
          "type": "boolean",
          "title": "Use `WARNING` state if any stdErr is sent",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        }
      },
      "required": ["id", "type"],
      "title": "Execute a Python script",
      "markdownDescription": "With the Python task, you can execute a full Python script.\nThe task will create a fresh `virtualenv` for every tasks and allows to install some Python package define in `requirements` property.\n\nBy convention, you need to define at least a `main.py` files in `inputFiles` that will be the script used.\nBut you are also able to add as many script as you need in `inputFiles`.\n\nYou can also add a `pip.conf` in `inputFiles` to customize the pip download of dependencies (like a private registry).\n\nYou can send outputs & metrics from your python script that can be used by others tasks. In order to help, we inject a python package directly on the working dir.Here is an example usage:\n```python\nfrom kestra import Kestra\nKestra.outputs({'test': 'value', 'int': 2, 'bool': True, 'float': 3.65})\nKestra.counter('count', 1, {'tag1': 'i', 'tag2': 'win'})\nKestra.timer('timer1', lambda: time.sleep(1), {'tag1': 'i', 'tag2': 'lost'})\nKestra.timer('timer2', 2.12, {'tag1': 'i', 'tag2': 'destroy'})\n```##### Examples\n> Execute a python script\n```yaml\ninputFiles:\n  data.json: |\n          {\"status\": \"OK\"}\n  main.py: |\n    from kestra import Kestra\n    import json\n    import requests\n    import sys\n    result = json.loads(open(sys.argv[1]).read())\n    print(f\"python script {result['status']}\")\n    response = requests.get('http://google.com')\n    print(response.status_code)\n    Kestra.outputs({'status': response.status_code, 'text': response.text})\n  pip.conf: |\n    # some specific pip repository configuration\nargs:\n  - data.json\nrequirements:\n  - requests\n```\n\n> Execute a python script with an input file from Kestra's local storage created by a previous task.\n```yaml\ninputFiles:\n  data.csv: {{outputs.previousTaskId.uri}}\n  main.py: |\n    with open('data.csv', 'r') as f:\n      print(f.read())\n```"
    },
    "io.kestra.core.tasks.scripts.Python-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.tasks.scripts.Python-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.core.tasks.scripts.Python" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Execute a python script\n```yaml\ninputFiles:\n  data.json: |\n          {\"status\": \"OK\"}\n  main.py: |\n    from kestra import Kestra\n    import json\n    import requests\n    import sys\n    result = json.loads(open(sys.argv[1]).read())\n    print(f\"python script {result['status']}\")\n    response = requests.get('http://google.com')\n    print(response.status_code)\n    Kestra.outputs({'status': response.status_code, 'text': response.text})\n  pip.conf: |\n    # some specific pip repository configuration\nargs:\n  - data.json\nrequirements:\n  - requests\n```\n\n> Execute a python script with an input file from Kestra's local storage created by a previous task.\n```yaml\ninputFiles:\n  data.csv: {{outputs.previousTaskId.uri}}\n  main.py: |\n    with open('data.csv', 'r') as f:\n      print(f.read())\n```"
    },
    "io.kestra.core.tasks.states.Delete-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "errorOnMissing": {
          "type": "boolean",
          "title": "raise an error if the state is not found",
          "default": false,
          "$dynamic": true,
          "markdownDescription": "Default value is : `false`"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "name": {
          "type": "string",
          "title": "The name of state file",
          "default": "default",
          "$dynamic": true,
          "markdownDescription": "Default value is : `default`"
        },
        "namespace": {
          "type": "boolean",
          "title": "Share state for the current namespace",
          "default": false,
          "$dynamic": true,
          "markdownDescription": "By default, the state is isolated by namespace **and** flow, setting to `true` will allow to share the state between the **same** namespace\n\nDefault value is : `false`"
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["id", "type"],
      "title": "Delete a state from the state store.",
      "markdownDescription": "##### Examples\n> Delete the default state for the current flow\n```yaml\nid: getState\ntype: io.kestra.core.tasks.states.Delete\n```\n\n> Delete the `myState` state for the current flow\n```yaml\nid: getState\ntype: io.kestra.core.tasks.states.Delete\nname: myState\n```"
    },
    "io.kestra.core.tasks.states.Delete-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.tasks.states.Delete-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.core.tasks.states.Delete" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Delete the default state for the current flow\n```yaml\nid: getState\ntype: io.kestra.core.tasks.states.Delete\n```\n\n> Delete the `myState` state for the current flow\n```yaml\nid: getState\ntype: io.kestra.core.tasks.states.Delete\nname: myState\n```"
    },
    "io.kestra.core.tasks.states.Get-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "errorOnMissing": {
          "type": "boolean",
          "title": "raise an error if the state is not found",
          "default": false,
          "$dynamic": true,
          "markdownDescription": "Default value is : `false`"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "name": {
          "type": "string",
          "title": "The name of state file",
          "default": "default",
          "$dynamic": true,
          "markdownDescription": "Default value is : `default`"
        },
        "namespace": {
          "type": "boolean",
          "title": "Share state for the current namespace",
          "default": false,
          "$dynamic": true,
          "markdownDescription": "By default, the state is isolated by namespace **and** flow, setting to `true` will allow to share the state between the **same** namespace\n\nDefault value is : `false`"
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["id", "type"],
      "title": "Get a state from the state store.",
      "markdownDescription": "##### Examples\n> Get the default state for the current flow\n```yaml\nid: getState\ntype: io.kestra.core.tasks.states.Get\n```\n\n> Get the `myState` state for the current flow\n```yaml\nid: getState\ntype: io.kestra.core.tasks.states.Get\nname: myState\n```"
    },
    "io.kestra.core.tasks.states.Get-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.tasks.states.Get-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.core.tasks.states.Get" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Get the default state for the current flow\n```yaml\nid: getState\ntype: io.kestra.core.tasks.states.Get\n```\n\n> Get the `myState` state for the current flow\n```yaml\nid: getState\ntype: io.kestra.core.tasks.states.Get\nname: myState\n```"
    },
    "io.kestra.core.tasks.states.Set-1": {
      "type": "object",
      "properties": {
        "data": { "type": "object", "title": "The data to save into the state", "$dynamic": true },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "name": {
          "type": "string",
          "title": "The name of state file",
          "default": "default",
          "$dynamic": true,
          "markdownDescription": "Default value is : `default`"
        },
        "namespace": {
          "type": "boolean",
          "title": "Share state for the current namespace",
          "default": false,
          "$dynamic": true,
          "markdownDescription": "By default, the state is isolated by namespace **and** flow, setting to `true` will allow to share the state between the **same** namespace\n\nDefault value is : `false`"
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["id", "type"],
      "title": "Set a state in the state store.",
      "markdownDescription": "Values will be merged: \n* If you provide a new key, the new key will be added\n* If you provide an existing key, the previous key will be overwrite\n\n::alert{type=\"warning\"}\nThis method have no concurrency safe, if many executions for the same flow are concurrent, there is no guarantee on isolation on the value.\nThe value can be overwrite by others executions.\n::\n##### Examples\n> Set the default state for the current flow\n```yaml\nid: setState\ntype: io.kestra.core.tasks.states.Set\ndata:\n  '{{ inputs.store }}': '{{ outputs.download.md5 }}'\n```\n\n> Set the `myState` state for the current flow\n```yaml\nid: setState\ntype: io.kestra.core.tasks.states.Set\nname: myState\ndata:\n  '{{ inputs.store }}': '{{ outputs.download.md5 }}'\n```"
    },
    "io.kestra.core.tasks.states.Set-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.tasks.states.Set-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.core.tasks.states.Set" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Set the default state for the current flow\n```yaml\nid: setState\ntype: io.kestra.core.tasks.states.Set\ndata:\n  '{{ inputs.store }}': '{{ outputs.download.md5 }}'\n```\n\n> Set the `myState` state for the current flow\n```yaml\nid: setState\ntype: io.kestra.core.tasks.states.Set\nname: myState\ndata:\n  '{{ inputs.store }}': '{{ outputs.download.md5 }}'\n```"
    },
    "io.kestra.core.tasks.storages.Concat-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "files": {
          "title": "List of files to be concatenated.",
          "$dynamic": true,
          "markdownDescription": "Must be a `kestra://` storage urls, can be a list of string or json string"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "separator": {
          "type": "string",
          "title": "The separator to used between files, default is no separator",
          "$dynamic": true
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["id", "type"],
      "title": "Concat files from the internal storage.",
      "markdownDescription": "##### Examples\n> Concat 2 files with a custom separator\n```yaml\nfiles: \n  - \"kestra://long/url/file1.txt\"\n  - \"kestra://long/url/file2.txt\"\nseparator: \"\\n\"\n```\n\n> Concat files generated by an each task\n```yaml\ntasks:\n  - id: each\n    type: io.kestra.core.tasks.flows.EachSequential\n    tasks:\n      - id: start_api_call\n        type: io.kestra.core.tasks.scripts.Bash\n        commands:\n          - echo {{ taskrun.value }} > {{ temp.generated }}\n        files:\n          - generated\n    value: '[\"value1\", \"value2\", \"value3\"]'\n  - id: concat\n    type: io.kestra.core.tasks.storages.Concat\n    files:\n      - \"{{ outputs.start_api_call.value1.files.generated }}\"\n      - \"{{ outputs.start_api_call.value2.files.generated }}\"\n      - \"{{ outputs.start_api_call.value3.files.generated }}\"\n```\n\n> Concat a dynamic number of files\n```yaml\ntasks:\n  - id: echo\n    type: io.kestra.core.tasks.scripts.Bash\n    commands:\n      - echo \"Hello John\" > {{ outputDirs.output }}/1.txt\n      - echo \"Hello Jane\" > {{ outputDirs.output }}/2.txt\n      - echo \"Hello Doe\" > {{ outputDirs.output }}/3.txt\n    outputDirs:\n      - output\n  - id: concat\n    type: io.kestra.core.tasks.storages.Concat\n    files: \"{{ outputs.echo.files | jq('.[]') }}\"\n```"
    },
    "io.kestra.core.tasks.storages.Concat-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.tasks.storages.Concat-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.core.tasks.storages.Concat" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Concat 2 files with a custom separator\n```yaml\nfiles: \n  - \"kestra://long/url/file1.txt\"\n  - \"kestra://long/url/file2.txt\"\nseparator: \"\\n\"\n```\n\n> Concat files generated by an each task\n```yaml\ntasks:\n  - id: each\n    type: io.kestra.core.tasks.flows.EachSequential\n    tasks:\n      - id: start_api_call\n        type: io.kestra.core.tasks.scripts.Bash\n        commands:\n          - echo {{ taskrun.value }} > {{ temp.generated }}\n        files:\n          - generated\n    value: '[\"value1\", \"value2\", \"value3\"]'\n  - id: concat\n    type: io.kestra.core.tasks.storages.Concat\n    files:\n      - \"{{ outputs.start_api_call.value1.files.generated }}\"\n      - \"{{ outputs.start_api_call.value2.files.generated }}\"\n      - \"{{ outputs.start_api_call.value3.files.generated }}\"\n```\n\n> Concat a dynamic number of files\n```yaml\ntasks:\n  - id: echo\n    type: io.kestra.core.tasks.scripts.Bash\n    commands:\n      - echo \"Hello John\" > {{ outputDirs.output }}/1.txt\n      - echo \"Hello Jane\" > {{ outputDirs.output }}/2.txt\n      - echo \"Hello Doe\" > {{ outputDirs.output }}/3.txt\n    outputDirs:\n      - output\n  - id: concat\n    type: io.kestra.core.tasks.storages.Concat\n    files: \"{{ outputs.echo.files | jq('.[]') }}\"\n```"
    },
    "io.kestra.core.tasks.storages.Delete-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "errorOnMissing": {
          "type": "boolean",
          "title": "raise an error if the file is not found",
          "default": false,
          "$dynamic": true,
          "markdownDescription": "Default value is : `false`"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "uri": {
          "type": "string",
          "title": "the file to delete",
          "$dynamic": true,
          "markdownDescription": "Must be a `kestra://` storage url"
        }
      },
      "required": ["id", "type"],
      "title": "Delete a file from the internal storage.",
      "markdownDescription": "##### Examples\n> \n```yaml\nuri: \"kestra://long/url/file.txt\"\n```"
    },
    "io.kestra.core.tasks.storages.Delete-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.tasks.storages.Delete-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.core.tasks.storages.Delete" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nuri: \"kestra://long/url/file.txt\"\n```"
    },
    "io.kestra.core.tasks.storages.Purge-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "endDate": {
          "type": "string",
          "title": "The max date to purge",
          "$dynamic": true,
          "markdownDescription": "All data of flows executed before this date will be purged."
        },
        "flowId": {
          "type": "string",
          "title": "The flow id to purge",
          "$dynamic": true,
          "markdownDescription": "You need to provide the `namespace` properties if you want to purge a flow."
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "namespace": {
          "type": "string",
          "title": "Namespace to purge or namespace for a flow",
          "$dynamic": true,
          "markdownDescription": "If `flowId` isn't provided, this is a namespace prefix, else the namespace of the flow."
        },
        "purgeExecution": {
          "type": "boolean",
          "title": "Purge executions from the repository.",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "purgeLog": {
          "type": "boolean",
          "title": "Purge logs from the repository.",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "purgeMetric": {
          "type": "boolean",
          "title": "Purge metrics from the repository.",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "purgeStorage": {
          "type": "boolean",
          "title": "Purge files from the internal storage.",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "states": {
          "title": "The state of the execution that can be purged.",
          "$dynamic": false,
          "type": "array",
          "items": {
            "type": "string",
            "enum": [
              "CREATED",
              "RUNNING",
              "PAUSED",
              "RESTARTED",
              "KILLING",
              "SUCCESS",
              "WARNING",
              "FAILED",
              "KILLED"
            ],
            "$dynamic": false
          }
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["id", "type"],
      "title": "Purge executions, logs, metrics, and storage files.",
      "markdownDescription": "This task can be used to purge flow executions data for all flows, for a specific namespace, or for a specific flow.##### Examples\n> Purge all flow execution data for flows ended more than one month ago.\n```yaml\nendDate: \"{{ now() | dateAdd(-1, 'MONTHS') }}\"\nstates: \n - KILLED\n - FAILED\n - WARNING\n - SUCCESS\n```"
    },
    "io.kestra.core.tasks.storages.Purge-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.tasks.storages.Purge-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.core.tasks.storages.Purge" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Purge all flow execution data for flows ended more than one month ago.\n```yaml\nendDate: \"{{ now() | dateAdd(-1, 'MONTHS') }}\"\nstates: \n - KILLED\n - FAILED\n - WARNING\n - SUCCESS\n```"
    },
    "io.kestra.core.tasks.storages.PurgeExecution-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["id", "type"],
      "title": "Purge all files from the internal storage created by this execution.",
      "markdownDescription": "Will delete all the generated files from a flow for the current execution. This will delete all files from:\n- inputs\n- outputs\n- triggers\n\nIf the current execution doesn't have any generated files, the task will not fail.##### Examples\n> \n```yaml\n\n```"
    },
    "io.kestra.core.tasks.storages.PurgeExecution-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.tasks.storages.PurgeExecution-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.core.tasks.storages.PurgeExecution" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\n\n```"
    },
    "io.kestra.core.tasks.storages.Size-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "uri": {
          "type": "string",
          "title": "the file",
          "$dynamic": true,
          "markdownDescription": "Must be a `kestra://` storage URL"
        }
      },
      "required": ["id", "type"],
      "title": "Get the size of a file from the internal storage.",
      "markdownDescription": "##### Examples\n> \n```yaml\nuri: \"kestra://long/url/file.txt\"\n```"
    },
    "io.kestra.core.tasks.storages.Size-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.tasks.storages.Size-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.core.tasks.storages.Size" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nuri: \"kestra://long/url/file.txt\"\n```"
    },
    "io.kestra.core.tasks.storages.Split-1": {
      "type": "object",
      "properties": {
        "bytes": {
          "type": "string",
          "title": "Split by file size.",
          "$dynamic": true,
          "markdownDescription": "Can be provided as a string like \"10MB\" or \"200KB\", or the number of bytes. Since we divide storage per line, it's not an hard requirements and files can be a larger."
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "from": { "type": "string", "title": "The file to be split.", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "partitions": {
          "type": "integer",
          "title": "Split by a fixed number of files.",
          "$dynamic": true
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "rows": { "type": "integer", "title": "Split by file rows count.", "$dynamic": true },
        "separator": {
          "type": "string",
          "title": "The separator to used between rows",
          "default": "\n",
          "$dynamic": false,
          "markdownDescription": "Default value is : `|2+`"
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["id", "type"],
      "title": "Split a file from the internal storage onto multiple files.",
      "markdownDescription": "##### Examples\n> Split a file by size.\n```yaml\nfrom: \"kestra://long/url/file1.txt\"\nbytes: 10MB\n```\n\n> Split a file by rows count.\n```yaml\nfrom: \"kestra://long/url/file1.txt\"\nrows: 1000\n```\n\n> Split a file in a defined number of partitions.\n```yaml\nfrom: \"kestra://long/url/file1.txt\"\npartitions: 8\n```"
    },
    "io.kestra.core.tasks.storages.Split-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.core.tasks.storages.Split-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.core.tasks.storages.Split" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Split a file by size.\n```yaml\nfrom: \"kestra://long/url/file1.txt\"\nbytes: 10MB\n```\n\n> Split a file by rows count.\n```yaml\nfrom: \"kestra://long/url/file1.txt\"\nrows: 1000\n```\n\n> Split a file in a defined number of partitions.\n```yaml\nfrom: \"kestra://long/url/file1.txt\"\npartitions: 8\n```"
    },
    "io.kestra.plugin.airbyte.connections.Sync-1": {
      "type": "object",
      "properties": {
        "connectionId": {
          "type": "string",
          "title": "The connection id to sync",
          "$dynamic": true
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "maxDuration": {
          "type": "string",
          "format": "duration",
          "title": "The max total wait duration",
          "default": 3600.0,
          "$dynamic": false,
          "markdownDescription": "Default value is : `3600.000000000`"
        },
        "password": { "type": "string", "title": "Basic auth password", "$dynamic": true },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "timeout": { "type": "string", "format": "duration" },
        "token": { "type": "string", "title": "API key", "$dynamic": true },
        "type": { "type": "string", "minLength": 1 },
        "url": { "type": "string", "title": "The url of your Airbyte instance", "$dynamic": true },
        "username": { "type": "string", "title": "Basic auth username", "$dynamic": true },
        "wait": {
          "type": "boolean",
          "title": "Wait for the end of the job.",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Allowing to capture job status & logs\n\nDefault value is : `true`"
        }
      },
      "required": ["id", "type", "url"],
      "title": "Run a sync on a connection",
      "markdownDescription": "##### Examples\n> \n```yaml\nurl: http://localhost:8080\nconnectionId: e3b1ce92-547c-436f-b1e8-23b6936c12cd\n```"
    },
    "io.kestra.plugin.airbyte.connections.Sync-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.airbyte.connections.Sync-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.airbyte.connections.Sync" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nurl: http://localhost:8080\nconnectionId: e3b1ce92-547c-436f-b1e8-23b6936c12cd\n```"
    },
    "io.kestra.plugin.compress.ArchiveCompress-1": {
      "type": "object",
      "properties": {
        "algorithm": {
          "type": "string",
          "enum": ["AR", "ARJ", "CPIO", "DUMP", "JAR", "TAR", "ZIP"],
          "title": "The algorithm of the archive file",
          "$dynamic": false
        },
        "compression": {
          "type": "string",
          "enum": [
            "BROTLI",
            "BZIP2",
            "DEFLATE",
            "DEFLATE64",
            "GZIP",
            "LZ4BLOCK",
            "LZ4FRAME",
            "LZMA",
            "SNAPPY",
            "SNAPPYFRAME",
            "XZ",
            "Z",
            "ZSTD"
          ],
          "title": "The algorithm compression of the archive file",
          "$dynamic": false
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "from": {
          "title": "The files to compress",
          "additionalProperties": { "type": "string" },
          "$dynamic": true,
          "markdownDescription": "The key must be a valid path in the archive and can contains `/` in order to create directory, the value must be a kestra internal storage path.\nThe value can also be a JSON containing multiple keys/values."
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["algorithm", "from", "id", "type"],
      "title": "Decompress an archive file",
      "markdownDescription": "##### Examples\n> \n```yaml\nfrom:\n  myfile.txt: \"{{ inputs.files }} \"\nalgorithm: ZIP\ncompression: GZIP\n```\n\n> \n```yaml\nfrom: \"{{ outputs.taskId.uri }}\"\nalgorithm: ZIP\ncompression: GZIP\n```"
    },
    "io.kestra.plugin.compress.ArchiveCompress-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveCompress-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.compress.ArchiveCompress" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nfrom:\n  myfile.txt: \"{{ inputs.files }} \"\nalgorithm: ZIP\ncompression: GZIP\n```\n\n> \n```yaml\nfrom: \"{{ outputs.taskId.uri }}\"\nalgorithm: ZIP\ncompression: GZIP\n```"
    },
    "io.kestra.plugin.compress.ArchiveDecompress-1": {
      "type": "object",
      "properties": {
        "algorithm": {
          "type": "string",
          "enum": ["AR", "ARJ", "CPIO", "DUMP", "JAR", "TAR", "ZIP"],
          "title": "The algorithm of the archive file",
          "$dynamic": false
        },
        "compression": {
          "type": "string",
          "enum": [
            "BROTLI",
            "BZIP2",
            "DEFLATE",
            "DEFLATE64",
            "GZIP",
            "LZ4BLOCK",
            "LZ4FRAME",
            "LZMA",
            "SNAPPY",
            "SNAPPYFRAME",
            "XZ",
            "Z",
            "ZSTD"
          ],
          "title": "The algorithm compression of the archive file",
          "$dynamic": false
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "from": { "type": "string", "title": "The file internal storage uri", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["algorithm", "from", "id", "type"],
      "title": "Decompress an archive file",
      "markdownDescription": "##### Examples\n> \n```yaml\nfrom: \"{{ inputs.files }} \"\nalgorithm: ZIP\n```"
    },
    "io.kestra.plugin.compress.ArchiveDecompress-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.compress.ArchiveDecompress-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.compress.ArchiveDecompress" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nfrom: \"{{ inputs.files }} \"\nalgorithm: ZIP\n```"
    },
    "io.kestra.plugin.compress.FileCompress-1": {
      "type": "object",
      "properties": {
        "compression": {
          "type": "string",
          "enum": [
            "BROTLI",
            "BZIP2",
            "DEFLATE",
            "DEFLATE64",
            "GZIP",
            "LZ4BLOCK",
            "LZ4FRAME",
            "LZMA",
            "SNAPPY",
            "SNAPPYFRAME",
            "XZ",
            "Z",
            "ZSTD"
          ],
          "title": "The algorithm compression of the archive file",
          "$dynamic": false
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "from": { "type": "string", "title": "The file internal storage uri", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["compression", "from", "id", "type"],
      "title": "Compress a file",
      "markdownDescription": "##### Examples\n> \n```yaml\nfrom: \"{{ inputs.files }} \"\ncompression: Z\n```"
    },
    "io.kestra.plugin.compress.FileCompress-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.compress.FileCompress-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.compress.FileCompress" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nfrom: \"{{ inputs.files }} \"\ncompression: Z\n```"
    },
    "io.kestra.plugin.compress.FileDecompress-1": {
      "type": "object",
      "properties": {
        "compression": {
          "type": "string",
          "enum": [
            "BROTLI",
            "BZIP2",
            "DEFLATE",
            "DEFLATE64",
            "GZIP",
            "LZ4BLOCK",
            "LZ4FRAME",
            "LZMA",
            "SNAPPY",
            "SNAPPYFRAME",
            "XZ",
            "Z",
            "ZSTD"
          ],
          "title": "The algorithm compression of the archive file",
          "$dynamic": false
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "from": { "type": "string", "title": "The file internal storage uri", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["compression", "from", "id", "type"],
      "title": "Decompress a file",
      "markdownDescription": "##### Examples\n> \n```yaml\nfrom: \"{{ inputs.files }} \"\ncompression: Z\n```"
    },
    "io.kestra.plugin.compress.FileDecompress-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.compress.FileDecompress-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.compress.FileDecompress" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nfrom: \"{{ inputs.files }} \"\ncompression: Z\n```"
    },
    "io.kestra.plugin.dbt.cli.Build-1": {
      "type": "object",
      "properties": {
        "dbtPath": { "type": "string", "title": "The path to dbt cli", "$dynamic": true },
        "debug": {
          "type": "boolean",
          "title": "Display debug logging during dbt execution.",
          "$dynamic": false,
          "markdownDescription": "Useful for debugging and making bug reports."
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "dockerOptions": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.core.tasks.scripts.AbstractBash-DockerOptions" },
            { "title": "Docker options when using runner `DOCKER`", "$dynamic": false }
          ]
        },
        "env": {
          "type": "object",
          "title": "Additional environments variable to add for current process.",
          "additionalProperties": { "type": "string" },
          "$dynamic": true
        },
        "exclude": {
          "title": "Specify the models to exclude",
          "$dynamic": true,
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "exitOnFailed": {
          "type": "boolean",
          "title": "Exit if any non true return value",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "This tells bash that it should exit the script if any statement returns a non-true return value. \nThe benefit of using -e is that it prevents errors snowballing into serious issues when they could have been caught earlier.\n\nDefault value is : `true`"
        },
        "failFast": {
          "type": "boolean",
          "title": "Stop execution upon a first failure.",
          "$dynamic": false
        },
        "files": {
          "title": "The list of files that will be uploaded to internal storage, ",
          "$dynamic": true,
          "$deprecated": true,
          "markdownDescription": "use `outputFiles` property instead",
          "type": "array",
          "items": { "type": "string", "$dynamic": true, "$deprecated": true }
        },
        "fullRefresh": {
          "type": "boolean",
          "title": "If specified, dbt will drop incremental models and fully-recalculate the incremental table from the model definition.",
          "$dynamic": false
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "inputFiles": {
          "title": "Input files are extra files that will be available in the script working directory.",
          "additionalProperties": { "type": "string" },
          "$dynamic": true,
          "markdownDescription": "You can define the files as map or a JSON string.Each file can be defined inlined or can reference a file from Kestra's internal storage."
        },
        "interpreter": {
          "type": "string",
          "title": "Interpreter to used",
          "default": "/bin/sh",
          "minLength": 1,
          "$dynamic": false,
          "markdownDescription": "Default value is : `/bin/sh`"
        },
        "interpreterArgs": {
          "title": "Interpreter args used",
          "default": ["-c"],
          "$dynamic": false,
          "markdownDescription": "Default value is : `- -c`\n\nDefault value is : `- -c`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false }
        },
        "outputDirs": {
          "title": "Output dirs list that will be uploaded to internal storage",
          "$dynamic": false,
          "markdownDescription": "List of key that will generate temporary directories.\nOn the command, just can use with special variable named `outputDirs.key`.\nIf you add a files with `[\"myDir\"]`, you can use the special vars `echo 1 >> {[ outputDirs.myDir }}/file1.txt` and `echo 2 >> {[ outputDirs.myDir }}/file2.txt` and both files will be uploaded to internal storage. Then you can used them on others tasks using `{{ outputs.taskId.outputFiles['myDir/file1.txt'] }}`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false }
        },
        "outputFiles": {
          "title": "Output file list that will be uploaded to internal storage",
          "$dynamic": false,
          "markdownDescription": "List of key that will generate temporary files.\nOn the command, just can use with special variable named `outputFiles.key`.\nIf you add a files with `[\"first\"]`, you can use the special vars `echo 1 >> {[ outputFiles.first }}` and you used on others tasks using `{{ outputs.taskId.outputFiles.first }}`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false }
        },
        "outputsFiles": {
          "title": "Deprecated Output file",
          "$dynamic": false,
          "$deprecated": true,
          "markdownDescription": "use `outputFiles`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false, "$deprecated": true }
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "runner": {
          "type": "string",
          "enum": ["PROCESS", "DOCKER"],
          "title": "Runner to use",
          "default": "PROCESS",
          "$dynamic": false,
          "markdownDescription": "Default value is : `PROCESS`"
        },
        "select": {
          "title": "Specify the nodes to include",
          "$dynamic": true,
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "selector": {
          "type": "string",
          "title": "The selector name to use, as defined in selectors.yml",
          "$dynamic": true
        },
        "target": {
          "type": "string",
          "title": "Which target to load for the given profile",
          "$dynamic": true
        },
        "thread": {
          "type": "integer",
          "title": "Specify number of threads to use while executing models.",
          "$dynamic": false
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "warnError": {
          "type": "boolean",
          "title": "If dbt would normally warn, instead raise an exception.",
          "$dynamic": false,
          "markdownDescription": "Examples include --models that selects nothing, deprecations, configurations with no associated models, invalid test configurations, and missing sources/refs in tests."
        },
        "warningOnStdErr": {
          "type": "boolean",
          "title": "Use `WARNING` state if any stdErr is sent",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        }
      },
      "required": ["id", "type"],
      "title": "Invoke dbt `build` command",
      "markdownDescription": "##### Examples\n> Invoke a build command on bigquery\n```yaml\nid: dbt-run\nnamespace: io.kestra.tests\n\ntasks:\n  - id: worker\n    type: io.kestra.core.tasks.flows.Worker\n    tasks:\n      - id: bash\n        type: io.kestra.core.tasks.scripts.Bash\n        commands:\n          - git clone https://github.com/<< organization >>/dbt-project .\n        dockerOptions:\n          image: bitnami/git:latest\n        inputFiles:\n          sa.json: |\n            { service account json key }\n        warningOnStdErr: false\n      - id: dbt-setup\n        type: io.kestra.plugin.dbt.cli.Setup\n        dockerOptions:\n          image: python:3.9\n        profiles:\n          unit-kestra:\n            outputs:\n              dev:\n                type: bigquery\n                dataset: <<dataset>>\n                fixed_retries: 1\n                keyfile: sa.json\n                location: US\n                method: service-account\n                priority: interactive\n                project: <<project>>\n                threads: 1\n                timeout_seconds: 300\n            target: dev\n        requirements:\n          - dbt-bigquery\n        runner: DOCKER\n      - id: dbt-build\n        type: io.kestra.plugin.dbt.cli.Build\n        dockerOptions:\n          image: python:3.9\n        runner: DOCKER\n```"
    },
    "io.kestra.plugin.dbt.cli.Build-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Build-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.dbt.cli.Build" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Invoke a build command on bigquery\n```yaml\nid: dbt-run\nnamespace: io.kestra.tests\n\ntasks:\n  - id: worker\n    type: io.kestra.core.tasks.flows.Worker\n    tasks:\n      - id: bash\n        type: io.kestra.core.tasks.scripts.Bash\n        commands:\n          - git clone https://github.com/<< organization >>/dbt-project .\n        dockerOptions:\n          image: bitnami/git:latest\n        inputFiles:\n          sa.json: |\n            { service account json key }\n        warningOnStdErr: false\n      - id: dbt-setup\n        type: io.kestra.plugin.dbt.cli.Setup\n        dockerOptions:\n          image: python:3.9\n        profiles:\n          unit-kestra:\n            outputs:\n              dev:\n                type: bigquery\n                dataset: <<dataset>>\n                fixed_retries: 1\n                keyfile: sa.json\n                location: US\n                method: service-account\n                priority: interactive\n                project: <<project>>\n                threads: 1\n                timeout_seconds: 300\n            target: dev\n        requirements:\n          - dbt-bigquery\n        runner: DOCKER\n      - id: dbt-build\n        type: io.kestra.plugin.dbt.cli.Build\n        dockerOptions:\n          image: python:3.9\n        runner: DOCKER\n```"
    },
    "io.kestra.plugin.dbt.cli.Compile-1": {
      "type": "object",
      "properties": {
        "dbtPath": { "type": "string", "title": "The path to dbt cli", "$dynamic": true },
        "debug": {
          "type": "boolean",
          "title": "Display debug logging during dbt execution.",
          "$dynamic": false,
          "markdownDescription": "Useful for debugging and making bug reports."
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "dockerOptions": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.core.tasks.scripts.AbstractBash-DockerOptions" },
            { "title": "Docker options when using runner `DOCKER`", "$dynamic": false }
          ]
        },
        "env": {
          "type": "object",
          "title": "Additional environments variable to add for current process.",
          "additionalProperties": { "type": "string" },
          "$dynamic": true
        },
        "exclude": {
          "title": "Specify the models to exclude",
          "$dynamic": true,
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "exitOnFailed": {
          "type": "boolean",
          "title": "Exit if any non true return value",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "This tells bash that it should exit the script if any statement returns a non-true return value. \nThe benefit of using -e is that it prevents errors snowballing into serious issues when they could have been caught earlier.\n\nDefault value is : `true`"
        },
        "failFast": {
          "type": "boolean",
          "title": "Stop execution upon a first failure.",
          "$dynamic": false
        },
        "files": {
          "title": "The list of files that will be uploaded to internal storage, ",
          "$dynamic": true,
          "$deprecated": true,
          "markdownDescription": "use `outputFiles` property instead",
          "type": "array",
          "items": { "type": "string", "$dynamic": true, "$deprecated": true }
        },
        "fullRefresh": {
          "type": "boolean",
          "title": "If specified, dbt will drop incremental models and fully-recalculate the incremental table from the model definition.",
          "$dynamic": false
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "inputFiles": {
          "title": "Input files are extra files that will be available in the script working directory.",
          "additionalProperties": { "type": "string" },
          "$dynamic": true,
          "markdownDescription": "You can define the files as map or a JSON string.Each file can be defined inlined or can reference a file from Kestra's internal storage."
        },
        "interpreter": {
          "type": "string",
          "title": "Interpreter to used",
          "default": "/bin/sh",
          "minLength": 1,
          "$dynamic": false,
          "markdownDescription": "Default value is : `/bin/sh`"
        },
        "interpreterArgs": {
          "title": "Interpreter args used",
          "default": ["-c"],
          "$dynamic": false,
          "markdownDescription": "Default value is : `- -c`\n\nDefault value is : `- -c`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false }
        },
        "outputDirs": {
          "title": "Output dirs list that will be uploaded to internal storage",
          "$dynamic": false,
          "markdownDescription": "List of key that will generate temporary directories.\nOn the command, just can use with special variable named `outputDirs.key`.\nIf you add a files with `[\"myDir\"]`, you can use the special vars `echo 1 >> {[ outputDirs.myDir }}/file1.txt` and `echo 2 >> {[ outputDirs.myDir }}/file2.txt` and both files will be uploaded to internal storage. Then you can used them on others tasks using `{{ outputs.taskId.outputFiles['myDir/file1.txt'] }}`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false }
        },
        "outputFiles": {
          "title": "Output file list that will be uploaded to internal storage",
          "$dynamic": false,
          "markdownDescription": "List of key that will generate temporary files.\nOn the command, just can use with special variable named `outputFiles.key`.\nIf you add a files with `[\"first\"]`, you can use the special vars `echo 1 >> {[ outputFiles.first }}` and you used on others tasks using `{{ outputs.taskId.outputFiles.first }}`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false }
        },
        "outputsFiles": {
          "title": "Deprecated Output file",
          "$dynamic": false,
          "$deprecated": true,
          "markdownDescription": "use `outputFiles`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false, "$deprecated": true }
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "runner": {
          "type": "string",
          "enum": ["PROCESS", "DOCKER"],
          "title": "Runner to use",
          "default": "PROCESS",
          "$dynamic": false,
          "markdownDescription": "Default value is : `PROCESS`"
        },
        "select": {
          "title": "Specify the nodes to include",
          "$dynamic": true,
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "selector": {
          "type": "string",
          "title": "The selector name to use, as defined in selectors.yml",
          "$dynamic": true
        },
        "target": {
          "type": "string",
          "title": "Which target to load for the given profile",
          "$dynamic": true
        },
        "thread": {
          "type": "integer",
          "title": "Specify number of threads to use while executing models.",
          "$dynamic": false
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "warnError": {
          "type": "boolean",
          "title": "If dbt would normally warn, instead raise an exception.",
          "$dynamic": false,
          "markdownDescription": "Examples include --models that selects nothing, deprecations, configurations with no associated models, invalid test configurations, and missing sources/refs in tests."
        },
        "warningOnStdErr": {
          "type": "boolean",
          "title": "Use `WARNING` state if any stdErr is sent",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        }
      },
      "required": ["id", "type"],
      "title": "Invoke dbt `compile` command",
      "markdownDescription": "##### Examples\n> Invoke a build command on bigquery\n```yaml\nid: dbt-run\nnamespace: io.kestra.tests\n\ntasks:\n  - id: worker\n    type: io.kestra.core.tasks.flows.Worker\n    tasks:\n      - id: bash\n        type: io.kestra.core.tasks.scripts.Bash\n        commands:\n          - git clone https://github.com/<< organization >>/dbt-project .\n        dockerOptions:\n          image: bitnami/git:latest\n        inputFiles:\n          sa.json: |\n            { service account json key }\n        warningOnStdErr: false\n      - id: dbt-setup\n        type: io.kestra.plugin.dbt.cli.Setup\n        dockerOptions:\n          image: python:3.9\n        profiles:\n          unit-kestra:\n            outputs:\n              dev:\n                type: bigquery\n                dataset: <<dataset>>\n                fixed_retries: 1\n                keyfile: sa.json\n                location: US\n                method: service-account\n                priority: interactive\n                project: <<project>>\n                threads: 1\n                timeout_seconds: 300\n            target: dev\n        requirements:\n          - dbt-bigquery\n        runner: DOCKER\n      - id: dbt-build\n        type: io.kestra.plugin.dbt.cli.Build\n        dockerOptions:\n          image: python:3.9\n        runner: DOCKER\n```"
    },
    "io.kestra.plugin.dbt.cli.Compile-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Compile-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.dbt.cli.Compile" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Invoke a build command on bigquery\n```yaml\nid: dbt-run\nnamespace: io.kestra.tests\n\ntasks:\n  - id: worker\n    type: io.kestra.core.tasks.flows.Worker\n    tasks:\n      - id: bash\n        type: io.kestra.core.tasks.scripts.Bash\n        commands:\n          - git clone https://github.com/<< organization >>/dbt-project .\n        dockerOptions:\n          image: bitnami/git:latest\n        inputFiles:\n          sa.json: |\n            { service account json key }\n        warningOnStdErr: false\n      - id: dbt-setup\n        type: io.kestra.plugin.dbt.cli.Setup\n        dockerOptions:\n          image: python:3.9\n        profiles:\n          unit-kestra:\n            outputs:\n              dev:\n                type: bigquery\n                dataset: <<dataset>>\n                fixed_retries: 1\n                keyfile: sa.json\n                location: US\n                method: service-account\n                priority: interactive\n                project: <<project>>\n                threads: 1\n                timeout_seconds: 300\n            target: dev\n        requirements:\n          - dbt-bigquery\n        runner: DOCKER\n      - id: dbt-build\n        type: io.kestra.plugin.dbt.cli.Build\n        dockerOptions:\n          image: python:3.9\n        runner: DOCKER\n```"
    },
    "io.kestra.plugin.dbt.cli.Freshness-1": {
      "type": "object",
      "properties": {
        "dbtPath": { "type": "string", "title": "The path to dbt cli", "$dynamic": true },
        "debug": {
          "type": "boolean",
          "title": "Display debug logging during dbt execution.",
          "$dynamic": false,
          "markdownDescription": "Useful for debugging and making bug reports."
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "dockerOptions": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.core.tasks.scripts.AbstractBash-DockerOptions" },
            { "title": "Docker options when using runner `DOCKER`", "$dynamic": false }
          ]
        },
        "env": {
          "type": "object",
          "title": "Additional environments variable to add for current process.",
          "additionalProperties": { "type": "string" },
          "$dynamic": true
        },
        "exclude": {
          "title": "Specify the models to exclude",
          "$dynamic": true,
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "exitOnFailed": {
          "type": "boolean",
          "title": "Exit if any non true return value",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "This tells bash that it should exit the script if any statement returns a non-true return value. \nThe benefit of using -e is that it prevents errors snowballing into serious issues when they could have been caught earlier.\n\nDefault value is : `true`"
        },
        "failFast": {
          "type": "boolean",
          "title": "Stop execution upon a first failure.",
          "$dynamic": false
        },
        "files": {
          "title": "The list of files that will be uploaded to internal storage, ",
          "$dynamic": true,
          "$deprecated": true,
          "markdownDescription": "use `outputFiles` property instead",
          "type": "array",
          "items": { "type": "string", "$dynamic": true, "$deprecated": true }
        },
        "fullRefresh": {
          "type": "boolean",
          "title": "If specified, dbt will drop incremental models and fully-recalculate the incremental table from the model definition.",
          "$dynamic": false
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "inputFiles": {
          "title": "Input files are extra files that will be available in the script working directory.",
          "additionalProperties": { "type": "string" },
          "$dynamic": true,
          "markdownDescription": "You can define the files as map or a JSON string.Each file can be defined inlined or can reference a file from Kestra's internal storage."
        },
        "interpreter": {
          "type": "string",
          "title": "Interpreter to used",
          "default": "/bin/sh",
          "minLength": 1,
          "$dynamic": false,
          "markdownDescription": "Default value is : `/bin/sh`"
        },
        "interpreterArgs": {
          "title": "Interpreter args used",
          "default": ["-c"],
          "$dynamic": false,
          "markdownDescription": "Default value is : `- -c`\n\nDefault value is : `- -c`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false }
        },
        "outputDirs": {
          "title": "Output dirs list that will be uploaded to internal storage",
          "$dynamic": false,
          "markdownDescription": "List of key that will generate temporary directories.\nOn the command, just can use with special variable named `outputDirs.key`.\nIf you add a files with `[\"myDir\"]`, you can use the special vars `echo 1 >> {[ outputDirs.myDir }}/file1.txt` and `echo 2 >> {[ outputDirs.myDir }}/file2.txt` and both files will be uploaded to internal storage. Then you can used them on others tasks using `{{ outputs.taskId.outputFiles['myDir/file1.txt'] }}`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false }
        },
        "outputFiles": {
          "title": "Output file list that will be uploaded to internal storage",
          "$dynamic": false,
          "markdownDescription": "List of key that will generate temporary files.\nOn the command, just can use with special variable named `outputFiles.key`.\nIf you add a files with `[\"first\"]`, you can use the special vars `echo 1 >> {[ outputFiles.first }}` and you used on others tasks using `{{ outputs.taskId.outputFiles.first }}`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false }
        },
        "outputsFiles": {
          "title": "Deprecated Output file",
          "$dynamic": false,
          "$deprecated": true,
          "markdownDescription": "use `outputFiles`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false, "$deprecated": true }
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "runner": {
          "type": "string",
          "enum": ["PROCESS", "DOCKER"],
          "title": "Runner to use",
          "default": "PROCESS",
          "$dynamic": false,
          "markdownDescription": "Default value is : `PROCESS`"
        },
        "select": {
          "title": "Specify the nodes to include",
          "$dynamic": true,
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "selector": {
          "type": "string",
          "title": "The selector name to use, as defined in selectors.yml",
          "$dynamic": true
        },
        "target": {
          "type": "string",
          "title": "Which target to load for the given profile",
          "$dynamic": true
        },
        "thread": {
          "type": "integer",
          "title": "Specify number of threads to use while executing models.",
          "$dynamic": false
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "warnError": {
          "type": "boolean",
          "title": "If dbt would normally warn, instead raise an exception.",
          "$dynamic": false,
          "markdownDescription": "Examples include --models that selects nothing, deprecations, configurations with no associated models, invalid test configurations, and missing sources/refs in tests."
        },
        "warningOnStdErr": {
          "type": "boolean",
          "title": "Use `WARNING` state if any stdErr is sent",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        }
      },
      "required": ["id", "type"],
      "title": "Invoke dbt `freshness` command",
      "markdownDescription": "##### Examples\n> Invoke a build command on bigquery\n```yaml\nid: dbt-run\nnamespace: io.kestra.tests\n\ntasks:\n  - id: worker\n    type: io.kestra.core.tasks.flows.Worker\n    tasks:\n      - id: bash\n        type: io.kestra.core.tasks.scripts.Bash\n        commands:\n          - git clone https://github.com/<< organization >>/dbt-project .\n        dockerOptions:\n          image: bitnami/git:latest\n        inputFiles:\n          sa.json: |\n            { service account json key }\n        warningOnStdErr: false\n      - id: dbt-setup\n        type: io.kestra.plugin.dbt.cli.Setup\n        dockerOptions:\n          image: python:3.9\n        profiles:\n          unit-kestra:\n            outputs:\n              dev:\n                type: bigquery\n                dataset: <<dataset>>\n                fixed_retries: 1\n                keyfile: sa.json\n                location: US\n                method: service-account\n                priority: interactive\n                project: <<project>>\n                threads: 1\n                timeout_seconds: 300\n            target: dev\n        requirements:\n          - dbt-bigquery\n        runner: DOCKER\n      - id: dbt-build\n        type: io.kestra.plugin.dbt.cli.Build\n        dockerOptions:\n          image: python:3.9\n        runner: DOCKER\n```"
    },
    "io.kestra.plugin.dbt.cli.Freshness-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Freshness-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.dbt.cli.Freshness" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Invoke a build command on bigquery\n```yaml\nid: dbt-run\nnamespace: io.kestra.tests\n\ntasks:\n  - id: worker\n    type: io.kestra.core.tasks.flows.Worker\n    tasks:\n      - id: bash\n        type: io.kestra.core.tasks.scripts.Bash\n        commands:\n          - git clone https://github.com/<< organization >>/dbt-project .\n        dockerOptions:\n          image: bitnami/git:latest\n        inputFiles:\n          sa.json: |\n            { service account json key }\n        warningOnStdErr: false\n      - id: dbt-setup\n        type: io.kestra.plugin.dbt.cli.Setup\n        dockerOptions:\n          image: python:3.9\n        profiles:\n          unit-kestra:\n            outputs:\n              dev:\n                type: bigquery\n                dataset: <<dataset>>\n                fixed_retries: 1\n                keyfile: sa.json\n                location: US\n                method: service-account\n                priority: interactive\n                project: <<project>>\n                threads: 1\n                timeout_seconds: 300\n            target: dev\n        requirements:\n          - dbt-bigquery\n        runner: DOCKER\n      - id: dbt-build\n        type: io.kestra.plugin.dbt.cli.Build\n        dockerOptions:\n          image: python:3.9\n        runner: DOCKER\n```"
    },
    "io.kestra.plugin.dbt.cli.List-1": {
      "type": "object",
      "properties": {
        "dbtPath": { "type": "string", "title": "The path to dbt cli", "$dynamic": true },
        "debug": {
          "type": "boolean",
          "title": "Display debug logging during dbt execution.",
          "$dynamic": false,
          "markdownDescription": "Useful for debugging and making bug reports."
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "dockerOptions": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.core.tasks.scripts.AbstractBash-DockerOptions" },
            { "title": "Docker options when using runner `DOCKER`", "$dynamic": false }
          ]
        },
        "env": {
          "type": "object",
          "title": "Additional environments variable to add for current process.",
          "additionalProperties": { "type": "string" },
          "$dynamic": true
        },
        "exclude": {
          "title": "Specify the models to exclude",
          "$dynamic": true,
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "exitOnFailed": {
          "type": "boolean",
          "title": "Exit if any non true return value",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "This tells bash that it should exit the script if any statement returns a non-true return value. \nThe benefit of using -e is that it prevents errors snowballing into serious issues when they could have been caught earlier.\n\nDefault value is : `true`"
        },
        "failFast": {
          "type": "boolean",
          "title": "Stop execution upon a first failure.",
          "$dynamic": false
        },
        "files": {
          "title": "The list of files that will be uploaded to internal storage, ",
          "$dynamic": true,
          "$deprecated": true,
          "markdownDescription": "use `outputFiles` property instead",
          "type": "array",
          "items": { "type": "string", "$dynamic": true, "$deprecated": true }
        },
        "fullRefresh": {
          "type": "boolean",
          "title": "If specified, dbt will drop incremental models and fully-recalculate the incremental table from the model definition.",
          "$dynamic": false
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "inputFiles": {
          "title": "Input files are extra files that will be available in the script working directory.",
          "additionalProperties": { "type": "string" },
          "$dynamic": true,
          "markdownDescription": "You can define the files as map or a JSON string.Each file can be defined inlined or can reference a file from Kestra's internal storage."
        },
        "interpreter": {
          "type": "string",
          "title": "Interpreter to used",
          "default": "/bin/sh",
          "minLength": 1,
          "$dynamic": false,
          "markdownDescription": "Default value is : `/bin/sh`"
        },
        "interpreterArgs": {
          "title": "Interpreter args used",
          "default": ["-c"],
          "$dynamic": false,
          "markdownDescription": "Default value is : `- -c`\n\nDefault value is : `- -c`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false }
        },
        "outputDirs": {
          "title": "Output dirs list that will be uploaded to internal storage",
          "$dynamic": false,
          "markdownDescription": "List of key that will generate temporary directories.\nOn the command, just can use with special variable named `outputDirs.key`.\nIf you add a files with `[\"myDir\"]`, you can use the special vars `echo 1 >> {[ outputDirs.myDir }}/file1.txt` and `echo 2 >> {[ outputDirs.myDir }}/file2.txt` and both files will be uploaded to internal storage. Then you can used them on others tasks using `{{ outputs.taskId.outputFiles['myDir/file1.txt'] }}`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false }
        },
        "outputFiles": {
          "title": "Output file list that will be uploaded to internal storage",
          "$dynamic": false,
          "markdownDescription": "List of key that will generate temporary files.\nOn the command, just can use with special variable named `outputFiles.key`.\nIf you add a files with `[\"first\"]`, you can use the special vars `echo 1 >> {[ outputFiles.first }}` and you used on others tasks using `{{ outputs.taskId.outputFiles.first }}`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false }
        },
        "outputsFiles": {
          "title": "Deprecated Output file",
          "$dynamic": false,
          "$deprecated": true,
          "markdownDescription": "use `outputFiles`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false, "$deprecated": true }
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "runner": {
          "type": "string",
          "enum": ["PROCESS", "DOCKER"],
          "title": "Runner to use",
          "default": "PROCESS",
          "$dynamic": false,
          "markdownDescription": "Default value is : `PROCESS`"
        },
        "select": {
          "title": "Specify the nodes to include",
          "$dynamic": true,
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "selector": {
          "type": "string",
          "title": "The selector name to use, as defined in selectors.yml",
          "$dynamic": true
        },
        "target": {
          "type": "string",
          "title": "Which target to load for the given profile",
          "$dynamic": true
        },
        "thread": {
          "type": "integer",
          "title": "Specify number of threads to use while executing models.",
          "$dynamic": false
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "warnError": {
          "type": "boolean",
          "title": "If dbt would normally warn, instead raise an exception.",
          "$dynamic": false,
          "markdownDescription": "Examples include --models that selects nothing, deprecations, configurations with no associated models, invalid test configurations, and missing sources/refs in tests."
        },
        "warningOnStdErr": {
          "type": "boolean",
          "title": "Use `WARNING` state if any stdErr is sent",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        }
      },
      "required": ["id", "type"],
      "title": "Invoke dbt `list` command",
      "markdownDescription": "##### Examples\n> Invoke a build command on bigquery\n```yaml\nid: dbt-run\nnamespace: io.kestra.tests\n\ntasks:\n  - id: worker\n    type: io.kestra.core.tasks.flows.Worker\n    tasks:\n      - id: bash\n        type: io.kestra.core.tasks.scripts.Bash\n        commands:\n          - git clone https://github.com/<< organization >>/dbt-project .\n        dockerOptions:\n          image: bitnami/git:latest\n        inputFiles:\n          sa.json: |\n            { service account json key }\n        warningOnStdErr: false\n      - id: dbt-setup\n        type: io.kestra.plugin.dbt.cli.Setup\n        dockerOptions:\n          image: python:3.9\n        profiles:\n          unit-kestra:\n            outputs:\n              dev:\n                type: bigquery\n                dataset: <<dataset>>\n                fixed_retries: 1\n                keyfile: sa.json\n                location: US\n                method: service-account\n                priority: interactive\n                project: <<project>>\n                threads: 1\n                timeout_seconds: 300\n            target: dev\n        requirements:\n          - dbt-bigquery\n        runner: DOCKER\n      - id: dbt-build\n        type: io.kestra.plugin.dbt.cli.Build\n        dockerOptions:\n          image: python:3.9\n        runner: DOCKER\n```"
    },
    "io.kestra.plugin.dbt.cli.List-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.List-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.dbt.cli.List" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Invoke a build command on bigquery\n```yaml\nid: dbt-run\nnamespace: io.kestra.tests\n\ntasks:\n  - id: worker\n    type: io.kestra.core.tasks.flows.Worker\n    tasks:\n      - id: bash\n        type: io.kestra.core.tasks.scripts.Bash\n        commands:\n          - git clone https://github.com/<< organization >>/dbt-project .\n        dockerOptions:\n          image: bitnami/git:latest\n        inputFiles:\n          sa.json: |\n            { service account json key }\n        warningOnStdErr: false\n      - id: dbt-setup\n        type: io.kestra.plugin.dbt.cli.Setup\n        dockerOptions:\n          image: python:3.9\n        profiles:\n          unit-kestra:\n            outputs:\n              dev:\n                type: bigquery\n                dataset: <<dataset>>\n                fixed_retries: 1\n                keyfile: sa.json\n                location: US\n                method: service-account\n                priority: interactive\n                project: <<project>>\n                threads: 1\n                timeout_seconds: 300\n            target: dev\n        requirements:\n          - dbt-bigquery\n        runner: DOCKER\n      - id: dbt-build\n        type: io.kestra.plugin.dbt.cli.Build\n        dockerOptions:\n          image: python:3.9\n        runner: DOCKER\n```"
    },
    "io.kestra.plugin.dbt.cli.Run-1": {
      "type": "object",
      "properties": {
        "dbtPath": { "type": "string", "title": "The path to dbt cli", "$dynamic": true },
        "debug": {
          "type": "boolean",
          "title": "Display debug logging during dbt execution.",
          "$dynamic": false,
          "markdownDescription": "Useful for debugging and making bug reports."
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "dockerOptions": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.core.tasks.scripts.AbstractBash-DockerOptions" },
            { "title": "Docker options when using runner `DOCKER`", "$dynamic": false }
          ]
        },
        "env": {
          "type": "object",
          "title": "Additional environments variable to add for current process.",
          "additionalProperties": { "type": "string" },
          "$dynamic": true
        },
        "exclude": {
          "title": "Specify the models to exclude",
          "$dynamic": true,
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "exitOnFailed": {
          "type": "boolean",
          "title": "Exit if any non true return value",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "This tells bash that it should exit the script if any statement returns a non-true return value. \nThe benefit of using -e is that it prevents errors snowballing into serious issues when they could have been caught earlier.\n\nDefault value is : `true`"
        },
        "failFast": {
          "type": "boolean",
          "title": "Stop execution upon a first failure.",
          "$dynamic": false
        },
        "files": {
          "title": "The list of files that will be uploaded to internal storage, ",
          "$dynamic": true,
          "$deprecated": true,
          "markdownDescription": "use `outputFiles` property instead",
          "type": "array",
          "items": { "type": "string", "$dynamic": true, "$deprecated": true }
        },
        "fullRefresh": {
          "type": "boolean",
          "title": "If specified, dbt will drop incremental models and fully-recalculate the incremental table from the model definition.",
          "$dynamic": false
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "inputFiles": {
          "title": "Input files are extra files that will be available in the script working directory.",
          "additionalProperties": { "type": "string" },
          "$dynamic": true,
          "markdownDescription": "You can define the files as map or a JSON string.Each file can be defined inlined or can reference a file from Kestra's internal storage."
        },
        "interpreter": {
          "type": "string",
          "title": "Interpreter to used",
          "default": "/bin/sh",
          "minLength": 1,
          "$dynamic": false,
          "markdownDescription": "Default value is : `/bin/sh`"
        },
        "interpreterArgs": {
          "title": "Interpreter args used",
          "default": ["-c"],
          "$dynamic": false,
          "markdownDescription": "Default value is : `- -c`\n\nDefault value is : `- -c`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false }
        },
        "outputDirs": {
          "title": "Output dirs list that will be uploaded to internal storage",
          "$dynamic": false,
          "markdownDescription": "List of key that will generate temporary directories.\nOn the command, just can use with special variable named `outputDirs.key`.\nIf you add a files with `[\"myDir\"]`, you can use the special vars `echo 1 >> {[ outputDirs.myDir }}/file1.txt` and `echo 2 >> {[ outputDirs.myDir }}/file2.txt` and both files will be uploaded to internal storage. Then you can used them on others tasks using `{{ outputs.taskId.outputFiles['myDir/file1.txt'] }}`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false }
        },
        "outputFiles": {
          "title": "Output file list that will be uploaded to internal storage",
          "$dynamic": false,
          "markdownDescription": "List of key that will generate temporary files.\nOn the command, just can use with special variable named `outputFiles.key`.\nIf you add a files with `[\"first\"]`, you can use the special vars `echo 1 >> {[ outputFiles.first }}` and you used on others tasks using `{{ outputs.taskId.outputFiles.first }}`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false }
        },
        "outputsFiles": {
          "title": "Deprecated Output file",
          "$dynamic": false,
          "$deprecated": true,
          "markdownDescription": "use `outputFiles`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false, "$deprecated": true }
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "runner": {
          "type": "string",
          "enum": ["PROCESS", "DOCKER"],
          "title": "Runner to use",
          "default": "PROCESS",
          "$dynamic": false,
          "markdownDescription": "Default value is : `PROCESS`"
        },
        "select": {
          "title": "Specify the nodes to include",
          "$dynamic": true,
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "selector": {
          "type": "string",
          "title": "The selector name to use, as defined in selectors.yml",
          "$dynamic": true
        },
        "target": {
          "type": "string",
          "title": "Which target to load for the given profile",
          "$dynamic": true
        },
        "thread": {
          "type": "integer",
          "title": "Specify number of threads to use while executing models.",
          "$dynamic": false
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "warnError": {
          "type": "boolean",
          "title": "If dbt would normally warn, instead raise an exception.",
          "$dynamic": false,
          "markdownDescription": "Examples include --models that selects nothing, deprecations, configurations with no associated models, invalid test configurations, and missing sources/refs in tests."
        },
        "warningOnStdErr": {
          "type": "boolean",
          "title": "Use `WARNING` state if any stdErr is sent",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        }
      },
      "required": ["id", "type"],
      "title": "Invoke dbt `run` command",
      "markdownDescription": "##### Examples\n> Invoke a build command on bigquery\n```yaml\nid: dbt-run\nnamespace: io.kestra.tests\n\ntasks:\n  - id: worker\n    type: io.kestra.core.tasks.flows.Worker\n    tasks:\n      - id: bash\n        type: io.kestra.core.tasks.scripts.Bash\n        commands:\n          - git clone https://github.com/<< organization >>/dbt-project .\n        dockerOptions:\n          image: bitnami/git:latest\n        inputFiles:\n          sa.json: |\n            { service account json key }\n        warningOnStdErr: false\n      - id: dbt-setup\n        type: io.kestra.plugin.dbt.cli.Setup\n        dockerOptions:\n          image: python:3.9\n        profiles:\n          unit-kestra:\n            outputs:\n              dev:\n                type: bigquery\n                dataset: <<dataset>>\n                fixed_retries: 1\n                keyfile: sa.json\n                location: US\n                method: service-account\n                priority: interactive\n                project: <<project>>\n                threads: 1\n                timeout_seconds: 300\n            target: dev\n        requirements:\n          - dbt-bigquery\n        runner: DOCKER\n      - id: dbt-build\n        type: io.kestra.plugin.dbt.cli.Build\n        dockerOptions:\n          image: python:3.9\n        runner: DOCKER\n```"
    },
    "io.kestra.plugin.dbt.cli.Run-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Run-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.dbt.cli.Run" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Invoke a build command on bigquery\n```yaml\nid: dbt-run\nnamespace: io.kestra.tests\n\ntasks:\n  - id: worker\n    type: io.kestra.core.tasks.flows.Worker\n    tasks:\n      - id: bash\n        type: io.kestra.core.tasks.scripts.Bash\n        commands:\n          - git clone https://github.com/<< organization >>/dbt-project .\n        dockerOptions:\n          image: bitnami/git:latest\n        inputFiles:\n          sa.json: |\n            { service account json key }\n        warningOnStdErr: false\n      - id: dbt-setup\n        type: io.kestra.plugin.dbt.cli.Setup\n        dockerOptions:\n          image: python:3.9\n        profiles:\n          unit-kestra:\n            outputs:\n              dev:\n                type: bigquery\n                dataset: <<dataset>>\n                fixed_retries: 1\n                keyfile: sa.json\n                location: US\n                method: service-account\n                priority: interactive\n                project: <<project>>\n                threads: 1\n                timeout_seconds: 300\n            target: dev\n        requirements:\n          - dbt-bigquery\n        runner: DOCKER\n      - id: dbt-build\n        type: io.kestra.plugin.dbt.cli.Build\n        dockerOptions:\n          image: python:3.9\n        runner: DOCKER\n```"
    },
    "io.kestra.plugin.dbt.cli.Seed-1": {
      "type": "object",
      "properties": {
        "dbtPath": { "type": "string", "title": "The path to dbt cli", "$dynamic": true },
        "debug": {
          "type": "boolean",
          "title": "Display debug logging during dbt execution.",
          "$dynamic": false,
          "markdownDescription": "Useful for debugging and making bug reports."
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "dockerOptions": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.core.tasks.scripts.AbstractBash-DockerOptions" },
            { "title": "Docker options when using runner `DOCKER`", "$dynamic": false }
          ]
        },
        "env": {
          "type": "object",
          "title": "Additional environments variable to add for current process.",
          "additionalProperties": { "type": "string" },
          "$dynamic": true
        },
        "exclude": {
          "title": "Specify the models to exclude",
          "$dynamic": true,
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "exitOnFailed": {
          "type": "boolean",
          "title": "Exit if any non true return value",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "This tells bash that it should exit the script if any statement returns a non-true return value. \nThe benefit of using -e is that it prevents errors snowballing into serious issues when they could have been caught earlier.\n\nDefault value is : `true`"
        },
        "failFast": {
          "type": "boolean",
          "title": "Stop execution upon a first failure.",
          "$dynamic": false
        },
        "files": {
          "title": "The list of files that will be uploaded to internal storage, ",
          "$dynamic": true,
          "$deprecated": true,
          "markdownDescription": "use `outputFiles` property instead",
          "type": "array",
          "items": { "type": "string", "$dynamic": true, "$deprecated": true }
        },
        "fullRefresh": {
          "type": "boolean",
          "title": "If specified, dbt will drop incremental models and fully-recalculate the incremental table from the model definition.",
          "$dynamic": false
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "inputFiles": {
          "title": "Input files are extra files that will be available in the script working directory.",
          "additionalProperties": { "type": "string" },
          "$dynamic": true,
          "markdownDescription": "You can define the files as map or a JSON string.Each file can be defined inlined or can reference a file from Kestra's internal storage."
        },
        "interpreter": {
          "type": "string",
          "title": "Interpreter to used",
          "default": "/bin/sh",
          "minLength": 1,
          "$dynamic": false,
          "markdownDescription": "Default value is : `/bin/sh`"
        },
        "interpreterArgs": {
          "title": "Interpreter args used",
          "default": ["-c"],
          "$dynamic": false,
          "markdownDescription": "Default value is : `- -c`\n\nDefault value is : `- -c`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false }
        },
        "outputDirs": {
          "title": "Output dirs list that will be uploaded to internal storage",
          "$dynamic": false,
          "markdownDescription": "List of key that will generate temporary directories.\nOn the command, just can use with special variable named `outputDirs.key`.\nIf you add a files with `[\"myDir\"]`, you can use the special vars `echo 1 >> {[ outputDirs.myDir }}/file1.txt` and `echo 2 >> {[ outputDirs.myDir }}/file2.txt` and both files will be uploaded to internal storage. Then you can used them on others tasks using `{{ outputs.taskId.outputFiles['myDir/file1.txt'] }}`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false }
        },
        "outputFiles": {
          "title": "Output file list that will be uploaded to internal storage",
          "$dynamic": false,
          "markdownDescription": "List of key that will generate temporary files.\nOn the command, just can use with special variable named `outputFiles.key`.\nIf you add a files with `[\"first\"]`, you can use the special vars `echo 1 >> {[ outputFiles.first }}` and you used on others tasks using `{{ outputs.taskId.outputFiles.first }}`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false }
        },
        "outputsFiles": {
          "title": "Deprecated Output file",
          "$dynamic": false,
          "$deprecated": true,
          "markdownDescription": "use `outputFiles`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false, "$deprecated": true }
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "runner": {
          "type": "string",
          "enum": ["PROCESS", "DOCKER"],
          "title": "Runner to use",
          "default": "PROCESS",
          "$dynamic": false,
          "markdownDescription": "Default value is : `PROCESS`"
        },
        "select": {
          "title": "Specify the nodes to include",
          "$dynamic": true,
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "selector": {
          "type": "string",
          "title": "The selector name to use, as defined in selectors.yml",
          "$dynamic": true
        },
        "target": {
          "type": "string",
          "title": "Which target to load for the given profile",
          "$dynamic": true
        },
        "thread": {
          "type": "integer",
          "title": "Specify number of threads to use while executing models.",
          "$dynamic": false
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "warnError": {
          "type": "boolean",
          "title": "If dbt would normally warn, instead raise an exception.",
          "$dynamic": false,
          "markdownDescription": "Examples include --models that selects nothing, deprecations, configurations with no associated models, invalid test configurations, and missing sources/refs in tests."
        },
        "warningOnStdErr": {
          "type": "boolean",
          "title": "Use `WARNING` state if any stdErr is sent",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        }
      },
      "required": ["id", "type"],
      "title": "Invoke dbt `seed` command",
      "markdownDescription": "##### Examples\n> Invoke a build command on bigquery\n```yaml\nid: dbt-run\nnamespace: io.kestra.tests\n\ntasks:\n  - id: worker\n    type: io.kestra.core.tasks.flows.Worker\n    tasks:\n      - id: bash\n        type: io.kestra.core.tasks.scripts.Bash\n        commands:\n          - git clone https://github.com/<< organization >>/dbt-project .\n        dockerOptions:\n          image: bitnami/git:latest\n        inputFiles:\n          sa.json: |\n            { service account json key }\n        warningOnStdErr: false\n      - id: dbt-setup\n        type: io.kestra.plugin.dbt.cli.Setup\n        dockerOptions:\n          image: python:3.9\n        profiles:\n          unit-kestra:\n            outputs:\n              dev:\n                type: bigquery\n                dataset: <<dataset>>\n                fixed_retries: 1\n                keyfile: sa.json\n                location: US\n                method: service-account\n                priority: interactive\n                project: <<project>>\n                threads: 1\n                timeout_seconds: 300\n            target: dev\n        requirements:\n          - dbt-bigquery\n        runner: DOCKER\n      - id: dbt-build\n        type: io.kestra.plugin.dbt.cli.Build\n        dockerOptions:\n          image: python:3.9\n        runner: DOCKER\n```"
    },
    "io.kestra.plugin.dbt.cli.Seed-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Seed-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.dbt.cli.Seed" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Invoke a build command on bigquery\n```yaml\nid: dbt-run\nnamespace: io.kestra.tests\n\ntasks:\n  - id: worker\n    type: io.kestra.core.tasks.flows.Worker\n    tasks:\n      - id: bash\n        type: io.kestra.core.tasks.scripts.Bash\n        commands:\n          - git clone https://github.com/<< organization >>/dbt-project .\n        dockerOptions:\n          image: bitnami/git:latest\n        inputFiles:\n          sa.json: |\n            { service account json key }\n        warningOnStdErr: false\n      - id: dbt-setup\n        type: io.kestra.plugin.dbt.cli.Setup\n        dockerOptions:\n          image: python:3.9\n        profiles:\n          unit-kestra:\n            outputs:\n              dev:\n                type: bigquery\n                dataset: <<dataset>>\n                fixed_retries: 1\n                keyfile: sa.json\n                location: US\n                method: service-account\n                priority: interactive\n                project: <<project>>\n                threads: 1\n                timeout_seconds: 300\n            target: dev\n        requirements:\n          - dbt-bigquery\n        runner: DOCKER\n      - id: dbt-build\n        type: io.kestra.plugin.dbt.cli.Build\n        dockerOptions:\n          image: python:3.9\n        runner: DOCKER\n```"
    },
    "io.kestra.plugin.dbt.cli.Setup-1": {
      "type": "object",
      "properties": {
        "args": {
          "title": "Python command args",
          "$dynamic": true,
          "markdownDescription": "Arguments list to pass to main python script",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "dockerOptions": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.core.tasks.scripts.AbstractBash-DockerOptions" },
            { "title": "Docker options when using runner `DOCKER`", "$dynamic": false }
          ]
        },
        "env": {
          "type": "object",
          "title": "Additional environments variable to add for current process.",
          "additionalProperties": { "type": "string" },
          "$dynamic": true
        },
        "exitOnFailed": {
          "type": "boolean",
          "title": "Exit if any non true return value",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "This tells bash that it should exit the script if any statement returns a non-true return value. \nThe benefit of using -e is that it prevents errors snowballing into serious issues when they could have been caught earlier.\n\nDefault value is : `true`"
        },
        "files": {
          "title": "The list of files that will be uploaded to internal storage, ",
          "$dynamic": true,
          "$deprecated": true,
          "markdownDescription": "use `outputFiles` property instead",
          "type": "array",
          "items": { "type": "string", "$dynamic": true, "$deprecated": true }
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "inputFiles": {
          "title": "Input files are extra files that will be available in the script working directory.",
          "additionalProperties": { "type": "string" },
          "$dynamic": true,
          "markdownDescription": "You can define the files as map or a JSON string.Each file can be defined inlined or can reference a file from Kestra's internal storage."
        },
        "interpreter": {
          "type": "string",
          "title": "Interpreter to used",
          "default": "/bin/sh",
          "minLength": 1,
          "$dynamic": false,
          "markdownDescription": "Default value is : `/bin/sh`"
        },
        "interpreterArgs": {
          "title": "Interpreter args used",
          "default": ["-c"],
          "$dynamic": false,
          "markdownDescription": "Default value is : `- -c`\n\nDefault value is : `- -c`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false }
        },
        "outputDirs": {
          "title": "Output dirs list that will be uploaded to internal storage",
          "$dynamic": false,
          "markdownDescription": "List of key that will generate temporary directories.\nOn the command, just can use with special variable named `outputDirs.key`.\nIf you add a files with `[\"myDir\"]`, you can use the special vars `echo 1 >> {[ outputDirs.myDir }}/file1.txt` and `echo 2 >> {[ outputDirs.myDir }}/file2.txt` and both files will be uploaded to internal storage. Then you can used them on others tasks using `{{ outputs.taskId.outputFiles['myDir/file1.txt'] }}`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false }
        },
        "outputFiles": {
          "title": "Output file list that will be uploaded to internal storage",
          "$dynamic": false,
          "markdownDescription": "List of key that will generate temporary files.\nOn the command, just can use with special variable named `outputFiles.key`.\nIf you add a files with `[\"first\"]`, you can use the special vars `echo 1 >> {[ outputFiles.first }}` and you used on others tasks using `{{ outputs.taskId.outputFiles.first }}`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false }
        },
        "outputsFiles": {
          "title": "Deprecated Output file",
          "$dynamic": false,
          "$deprecated": true,
          "markdownDescription": "use `outputFiles`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false, "$deprecated": true }
        },
        "profiles": { "type": "object", "title": "The profiles file content", "$dynamic": true },
        "pythonPath": {
          "type": "string",
          "title": "The python interpreter to use",
          "default": "python",
          "minLength": 1,
          "$dynamic": true,
          "markdownDescription": "Set the python interpreter path to use\n\nDefault value is : `python`"
        },
        "requirements": {
          "title": "Requirements are python dependencies to add to the python execution process",
          "$dynamic": true,
          "markdownDescription": "Python dependencies list to setup in the virtualenv, in the same format than requirements.txt",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "runner": {
          "type": "string",
          "enum": ["PROCESS", "DOCKER"],
          "title": "Runner to use",
          "default": "PROCESS",
          "$dynamic": false,
          "markdownDescription": "Default value is : `PROCESS`"
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "warningOnStdErr": {
          "type": "boolean",
          "title": "Use `WARNING` state if any stdErr is sent",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        }
      },
      "required": ["id", "profiles", "type"],
      "title": "Setup dbt",
      "markdownDescription": "Install pip package & init profile directory"
    },
    "io.kestra.plugin.dbt.cli.Setup-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Setup-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.dbt.cli.Setup" } },
          "required": ["type"]
        }
      ]
    },
    "io.kestra.plugin.dbt.cli.Snapshot-1": {
      "type": "object",
      "properties": {
        "dbtPath": { "type": "string", "title": "The path to dbt cli", "$dynamic": true },
        "debug": {
          "type": "boolean",
          "title": "Display debug logging during dbt execution.",
          "$dynamic": false,
          "markdownDescription": "Useful for debugging and making bug reports."
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "dockerOptions": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.core.tasks.scripts.AbstractBash-DockerOptions" },
            { "title": "Docker options when using runner `DOCKER`", "$dynamic": false }
          ]
        },
        "env": {
          "type": "object",
          "title": "Additional environments variable to add for current process.",
          "additionalProperties": { "type": "string" },
          "$dynamic": true
        },
        "exclude": {
          "title": "Specify the models to exclude",
          "$dynamic": true,
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "exitOnFailed": {
          "type": "boolean",
          "title": "Exit if any non true return value",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "This tells bash that it should exit the script if any statement returns a non-true return value. \nThe benefit of using -e is that it prevents errors snowballing into serious issues when they could have been caught earlier.\n\nDefault value is : `true`"
        },
        "failFast": {
          "type": "boolean",
          "title": "Stop execution upon a first failure.",
          "$dynamic": false
        },
        "files": {
          "title": "The list of files that will be uploaded to internal storage, ",
          "$dynamic": true,
          "$deprecated": true,
          "markdownDescription": "use `outputFiles` property instead",
          "type": "array",
          "items": { "type": "string", "$dynamic": true, "$deprecated": true }
        },
        "fullRefresh": {
          "type": "boolean",
          "title": "If specified, dbt will drop incremental models and fully-recalculate the incremental table from the model definition.",
          "$dynamic": false
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "inputFiles": {
          "title": "Input files are extra files that will be available in the script working directory.",
          "additionalProperties": { "type": "string" },
          "$dynamic": true,
          "markdownDescription": "You can define the files as map or a JSON string.Each file can be defined inlined or can reference a file from Kestra's internal storage."
        },
        "interpreter": {
          "type": "string",
          "title": "Interpreter to used",
          "default": "/bin/sh",
          "minLength": 1,
          "$dynamic": false,
          "markdownDescription": "Default value is : `/bin/sh`"
        },
        "interpreterArgs": {
          "title": "Interpreter args used",
          "default": ["-c"],
          "$dynamic": false,
          "markdownDescription": "Default value is : `- -c`\n\nDefault value is : `- -c`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false }
        },
        "outputDirs": {
          "title": "Output dirs list that will be uploaded to internal storage",
          "$dynamic": false,
          "markdownDescription": "List of key that will generate temporary directories.\nOn the command, just can use with special variable named `outputDirs.key`.\nIf you add a files with `[\"myDir\"]`, you can use the special vars `echo 1 >> {[ outputDirs.myDir }}/file1.txt` and `echo 2 >> {[ outputDirs.myDir }}/file2.txt` and both files will be uploaded to internal storage. Then you can used them on others tasks using `{{ outputs.taskId.outputFiles['myDir/file1.txt'] }}`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false }
        },
        "outputFiles": {
          "title": "Output file list that will be uploaded to internal storage",
          "$dynamic": false,
          "markdownDescription": "List of key that will generate temporary files.\nOn the command, just can use with special variable named `outputFiles.key`.\nIf you add a files with `[\"first\"]`, you can use the special vars `echo 1 >> {[ outputFiles.first }}` and you used on others tasks using `{{ outputs.taskId.outputFiles.first }}`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false }
        },
        "outputsFiles": {
          "title": "Deprecated Output file",
          "$dynamic": false,
          "$deprecated": true,
          "markdownDescription": "use `outputFiles`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false, "$deprecated": true }
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "runner": {
          "type": "string",
          "enum": ["PROCESS", "DOCKER"],
          "title": "Runner to use",
          "default": "PROCESS",
          "$dynamic": false,
          "markdownDescription": "Default value is : `PROCESS`"
        },
        "select": {
          "title": "Specify the nodes to include",
          "$dynamic": true,
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "selector": {
          "type": "string",
          "title": "The selector name to use, as defined in selectors.yml",
          "$dynamic": true
        },
        "target": {
          "type": "string",
          "title": "Which target to load for the given profile",
          "$dynamic": true
        },
        "thread": {
          "type": "integer",
          "title": "Specify number of threads to use while executing models.",
          "$dynamic": false
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "warnError": {
          "type": "boolean",
          "title": "If dbt would normally warn, instead raise an exception.",
          "$dynamic": false,
          "markdownDescription": "Examples include --models that selects nothing, deprecations, configurations with no associated models, invalid test configurations, and missing sources/refs in tests."
        },
        "warningOnStdErr": {
          "type": "boolean",
          "title": "Use `WARNING` state if any stdErr is sent",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        }
      },
      "required": ["id", "type"],
      "title": "Invoke dbt `snapshot` command",
      "markdownDescription": "##### Examples\n> Invoke a build command on bigquery\n```yaml\nid: dbt-run\nnamespace: io.kestra.tests\n\ntasks:\n  - id: worker\n    type: io.kestra.core.tasks.flows.Worker\n    tasks:\n      - id: bash\n        type: io.kestra.core.tasks.scripts.Bash\n        commands:\n          - git clone https://github.com/<< organization >>/dbt-project .\n        dockerOptions:\n          image: bitnami/git:latest\n        inputFiles:\n          sa.json: |\n            { service account json key }\n        warningOnStdErr: false\n      - id: dbt-setup\n        type: io.kestra.plugin.dbt.cli.Setup\n        dockerOptions:\n          image: python:3.9\n        profiles:\n          unit-kestra:\n            outputs:\n              dev:\n                type: bigquery\n                dataset: <<dataset>>\n                fixed_retries: 1\n                keyfile: sa.json\n                location: US\n                method: service-account\n                priority: interactive\n                project: <<project>>\n                threads: 1\n                timeout_seconds: 300\n            target: dev\n        requirements:\n          - dbt-bigquery\n        runner: DOCKER\n      - id: dbt-build\n        type: io.kestra.plugin.dbt.cli.Build\n        dockerOptions:\n          image: python:3.9\n        runner: DOCKER\n```"
    },
    "io.kestra.plugin.dbt.cli.Snapshot-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Snapshot-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.dbt.cli.Snapshot" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Invoke a build command on bigquery\n```yaml\nid: dbt-run\nnamespace: io.kestra.tests\n\ntasks:\n  - id: worker\n    type: io.kestra.core.tasks.flows.Worker\n    tasks:\n      - id: bash\n        type: io.kestra.core.tasks.scripts.Bash\n        commands:\n          - git clone https://github.com/<< organization >>/dbt-project .\n        dockerOptions:\n          image: bitnami/git:latest\n        inputFiles:\n          sa.json: |\n            { service account json key }\n        warningOnStdErr: false\n      - id: dbt-setup\n        type: io.kestra.plugin.dbt.cli.Setup\n        dockerOptions:\n          image: python:3.9\n        profiles:\n          unit-kestra:\n            outputs:\n              dev:\n                type: bigquery\n                dataset: <<dataset>>\n                fixed_retries: 1\n                keyfile: sa.json\n                location: US\n                method: service-account\n                priority: interactive\n                project: <<project>>\n                threads: 1\n                timeout_seconds: 300\n            target: dev\n        requirements:\n          - dbt-bigquery\n        runner: DOCKER\n      - id: dbt-build\n        type: io.kestra.plugin.dbt.cli.Build\n        dockerOptions:\n          image: python:3.9\n        runner: DOCKER\n```"
    },
    "io.kestra.plugin.dbt.cli.Test-1": {
      "type": "object",
      "properties": {
        "dbtPath": { "type": "string", "title": "The path to dbt cli", "$dynamic": true },
        "debug": {
          "type": "boolean",
          "title": "Display debug logging during dbt execution.",
          "$dynamic": false,
          "markdownDescription": "Useful for debugging and making bug reports."
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "dockerOptions": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.core.tasks.scripts.AbstractBash-DockerOptions" },
            { "title": "Docker options when using runner `DOCKER`", "$dynamic": false }
          ]
        },
        "env": {
          "type": "object",
          "title": "Additional environments variable to add for current process.",
          "additionalProperties": { "type": "string" },
          "$dynamic": true
        },
        "exclude": {
          "title": "Specify the models to exclude",
          "$dynamic": true,
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "exitOnFailed": {
          "type": "boolean",
          "title": "Exit if any non true return value",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "This tells bash that it should exit the script if any statement returns a non-true return value. \nThe benefit of using -e is that it prevents errors snowballing into serious issues when they could have been caught earlier.\n\nDefault value is : `true`"
        },
        "failFast": {
          "type": "boolean",
          "title": "Stop execution upon a first failure.",
          "$dynamic": false
        },
        "files": {
          "title": "The list of files that will be uploaded to internal storage, ",
          "$dynamic": true,
          "$deprecated": true,
          "markdownDescription": "use `outputFiles` property instead",
          "type": "array",
          "items": { "type": "string", "$dynamic": true, "$deprecated": true }
        },
        "fullRefresh": {
          "type": "boolean",
          "title": "If specified, dbt will drop incremental models and fully-recalculate the incremental table from the model definition.",
          "$dynamic": false
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "inputFiles": {
          "title": "Input files are extra files that will be available in the script working directory.",
          "additionalProperties": { "type": "string" },
          "$dynamic": true,
          "markdownDescription": "You can define the files as map or a JSON string.Each file can be defined inlined or can reference a file from Kestra's internal storage."
        },
        "interpreter": {
          "type": "string",
          "title": "Interpreter to used",
          "default": "/bin/sh",
          "minLength": 1,
          "$dynamic": false,
          "markdownDescription": "Default value is : `/bin/sh`"
        },
        "interpreterArgs": {
          "title": "Interpreter args used",
          "default": ["-c"],
          "$dynamic": false,
          "markdownDescription": "Default value is : `- -c`\n\nDefault value is : `- -c`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false }
        },
        "outputDirs": {
          "title": "Output dirs list that will be uploaded to internal storage",
          "$dynamic": false,
          "markdownDescription": "List of key that will generate temporary directories.\nOn the command, just can use with special variable named `outputDirs.key`.\nIf you add a files with `[\"myDir\"]`, you can use the special vars `echo 1 >> {[ outputDirs.myDir }}/file1.txt` and `echo 2 >> {[ outputDirs.myDir }}/file2.txt` and both files will be uploaded to internal storage. Then you can used them on others tasks using `{{ outputs.taskId.outputFiles['myDir/file1.txt'] }}`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false }
        },
        "outputFiles": {
          "title": "Output file list that will be uploaded to internal storage",
          "$dynamic": false,
          "markdownDescription": "List of key that will generate temporary files.\nOn the command, just can use with special variable named `outputFiles.key`.\nIf you add a files with `[\"first\"]`, you can use the special vars `echo 1 >> {[ outputFiles.first }}` and you used on others tasks using `{{ outputs.taskId.outputFiles.first }}`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false }
        },
        "outputsFiles": {
          "title": "Deprecated Output file",
          "$dynamic": false,
          "$deprecated": true,
          "markdownDescription": "use `outputFiles`",
          "type": "array",
          "items": { "type": "string", "$dynamic": false, "$deprecated": true }
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "runner": {
          "type": "string",
          "enum": ["PROCESS", "DOCKER"],
          "title": "Runner to use",
          "default": "PROCESS",
          "$dynamic": false,
          "markdownDescription": "Default value is : `PROCESS`"
        },
        "select": {
          "title": "Specify the nodes to include",
          "$dynamic": true,
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "selector": {
          "type": "string",
          "title": "The selector name to use, as defined in selectors.yml",
          "$dynamic": true
        },
        "target": {
          "type": "string",
          "title": "Which target to load for the given profile",
          "$dynamic": true
        },
        "thread": {
          "type": "integer",
          "title": "Specify number of threads to use while executing models.",
          "$dynamic": false
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "warnError": {
          "type": "boolean",
          "title": "If dbt would normally warn, instead raise an exception.",
          "$dynamic": false,
          "markdownDescription": "Examples include --models that selects nothing, deprecations, configurations with no associated models, invalid test configurations, and missing sources/refs in tests."
        },
        "warningOnStdErr": {
          "type": "boolean",
          "title": "Use `WARNING` state if any stdErr is sent",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        }
      },
      "required": ["id", "type"],
      "title": "Invoke dbt `test` command",
      "markdownDescription": "##### Examples\n> Invoke a build command on bigquery\n```yaml\nid: dbt-run\nnamespace: io.kestra.tests\n\ntasks:\n  - id: worker\n    type: io.kestra.core.tasks.flows.Worker\n    tasks:\n      - id: bash\n        type: io.kestra.core.tasks.scripts.Bash\n        commands:\n          - git clone https://github.com/<< organization >>/dbt-project .\n        dockerOptions:\n          image: bitnami/git:latest\n        inputFiles:\n          sa.json: |\n            { service account json key }\n        warningOnStdErr: false\n      - id: dbt-setup\n        type: io.kestra.plugin.dbt.cli.Setup\n        dockerOptions:\n          image: python:3.9\n        profiles:\n          unit-kestra:\n            outputs:\n              dev:\n                type: bigquery\n                dataset: <<dataset>>\n                fixed_retries: 1\n                keyfile: sa.json\n                location: US\n                method: service-account\n                priority: interactive\n                project: <<project>>\n                threads: 1\n                timeout_seconds: 300\n            target: dev\n        requirements:\n          - dbt-bigquery\n        runner: DOCKER\n      - id: dbt-build\n        type: io.kestra.plugin.dbt.cli.Build\n        dockerOptions:\n          image: python:3.9\n        runner: DOCKER\n```"
    },
    "io.kestra.plugin.dbt.cli.Test-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.dbt.cli.Test-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.dbt.cli.Test" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Invoke a build command on bigquery\n```yaml\nid: dbt-run\nnamespace: io.kestra.tests\n\ntasks:\n  - id: worker\n    type: io.kestra.core.tasks.flows.Worker\n    tasks:\n      - id: bash\n        type: io.kestra.core.tasks.scripts.Bash\n        commands:\n          - git clone https://github.com/<< organization >>/dbt-project .\n        dockerOptions:\n          image: bitnami/git:latest\n        inputFiles:\n          sa.json: |\n            { service account json key }\n        warningOnStdErr: false\n      - id: dbt-setup\n        type: io.kestra.plugin.dbt.cli.Setup\n        dockerOptions:\n          image: python:3.9\n        profiles:\n          unit-kestra:\n            outputs:\n              dev:\n                type: bigquery\n                dataset: <<dataset>>\n                fixed_retries: 1\n                keyfile: sa.json\n                location: US\n                method: service-account\n                priority: interactive\n                project: <<project>>\n                threads: 1\n                timeout_seconds: 300\n            target: dev\n        requirements:\n          - dbt-bigquery\n        runner: DOCKER\n      - id: dbt-build\n        type: io.kestra.plugin.dbt.cli.Build\n        dockerOptions:\n          image: python:3.9\n        runner: DOCKER\n```"
    },
    "io.kestra.plugin.dbt.cloud.TriggerRun-1": {
      "type": "object",
      "properties": {
        "accountId": { "type": "string", "title": "Numeric ID of the account", "$dynamic": true },
        "cause": {
          "type": "string",
          "title": "A text description of the reason for running this job",
          "default": "Triggered by Kestra",
          "$dynamic": true,
          "markdownDescription": "Default value is : `Triggered by Kestra`"
        },
        "dbtVersionOverride": {
          "type": "string",
          "title": "Override the version of dbt used to run this job.",
          "$dynamic": true
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "generateDocsOverride": {
          "type": "boolean",
          "title": "Override whether or not this job generates docs.",
          "$dynamic": false
        },
        "gitBranch": {
          "type": "string",
          "title": "The git branch to check out before running this job",
          "$dynamic": true
        },
        "gitSha": {
          "type": "string",
          "title": "The git sha to check out before running this job",
          "$dynamic": true
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "jobId": { "type": "string", "title": "Numeric ID of the job", "$dynamic": true },
        "maxDuration": {
          "type": "string",
          "format": "duration",
          "title": "The max total wait duration",
          "default": 3600.0,
          "$dynamic": false,
          "markdownDescription": "Default value is : `3600.000000000`"
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "schemaOverride": {
          "type": "string",
          "title": "Override the destination schema in the configured target for this job.",
          "$dynamic": true
        },
        "stepsOverride": {
          "title": "Override the list of steps for this job.",
          "$dynamic": true,
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "targetNameOverride": {
          "type": "string",
          "title": "Override the target.name context variable used when running this job.",
          "$dynamic": true
        },
        "threadsOverride": {
          "type": "string",
          "title": "Override the number of threads used to run this job.",
          "$dynamic": true
        },
        "timeout": { "type": "string", "format": "duration" },
        "timeoutSecondsOverride": {
          "type": "integer",
          "title": "Override the timeout in seconds for this job.",
          "$dynamic": false
        },
        "token": { "type": "string", "title": "API key.", "$dynamic": true },
        "type": { "type": "string", "minLength": 1 },
        "wait": {
          "type": "boolean",
          "title": "Wait for the end of the run.",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Allowing to capture job status & logs\n\nDefault value is : `true`"
        }
      },
      "required": ["accountId", "id", "jobId", "token", "type"],
      "title": "Trigger job to run",
      "markdownDescription": "Use this task to kick off a run for a job. When this endpoint returns a successful response, a new run will be enqueued for the account. If you activate the `wait` option, it will wait for the job to be ended and will display all the log and dynamic tasks.##### Examples\n> \n```yaml\naccountId: \"<your-account>\"\ntoken: \"<your token>\"\njobId: \"<your job id>\"\n```"
    },
    "io.kestra.plugin.dbt.cloud.TriggerRun-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.dbt.cloud.TriggerRun-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.dbt.cloud.TriggerRun" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\naccountId: \"<your-account>\"\ntoken: \"<your token>\"\njobId: \"<your job id>\"\n```"
    },
    "io.kestra.plugin.elasticsearch.Bulk-1": {
      "type": "object",
      "properties": {
        "chunk": {
          "type": "integer",
          "title": "The size of chunk for every bulk request",
          "default": 1000,
          "$dynamic": true,
          "markdownDescription": "Default value is : `1000`"
        },
        "connection": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.ElasticsearchConnection" },
            { "title": "The connection properties." }
          ]
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "from": { "type": "string", "title": "The source file", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "routing": {
          "type": "string",
          "title": "Controls the shard routing of the request.",
          "$dynamic": true,
          "markdownDescription": "Using this value to hash the shard and not the id."
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["connection", "from", "id", "type"],
      "title": "Bulk load documents in elasticsearch using [bulk files](https://www.elastic.co/guide/en/elasticsearch/reference/current/docs-bulk.html) elastic files",
      "markdownDescription": "##### Examples\n> \n```yaml\nconnection:\n  hosts: \n   - \"http://localhost:9200\"\nfrom: \"{{ inputs.file }}\"\n```"
    },
    "io.kestra.plugin.elasticsearch.Bulk-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Bulk-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.elasticsearch.Bulk" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nconnection:\n  hosts: \n   - \"http://localhost:9200\"\nfrom: \"{{ inputs.file }}\"\n```"
    },
    "io.kestra.plugin.elasticsearch.ElasticsearchConnection": {
      "type": "object",
      "properties": {
        "basicAuth": {
          "allOf": [
            {
              "$ref": "#/definitions/io.kestra.plugin.elasticsearch.ElasticsearchConnection-BasicAuth"
            },
            { "title": "Basic Auth configuration", "$dynamic": false }
          ]
        },
        "headers": {
          "title": "List of http headers to be send on every request",
          "$dynamic": true,
          "markdownDescription": "Must be an string with key value separated with `:`, ex: `Authorization: Token XYZ`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "hosts": {
          "title": "List of http elasticsearch servers",
          "minItems": 1,
          "$dynamic": true,
          "markdownDescription": "Must be an uri like `https://elasticsearch.com:9200` with scheme and port",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "pathPrefix": {
          "type": "string",
          "title": "Sets the path's prefix for every request used by the http client.",
          "$dynamic": true,
          "markdownDescription": "For example, if this is set to `/my/path`, then any client request will become `/my/path/` + endpoint.\nIn essence, every request's endpoint is prefixed by this `pathPrefix`.\nThe path prefix is useful for when Elasticsearch is behind a proxy that provides a base path or a proxy that requires all paths to start with '/'; it is not intended for other purposes and it should not be supplied in other scenarios."
        },
        "strictDeprecationMode": {
          "type": "boolean",
          "title": "Whether the REST client should return any response containing at leas one warning header as a failure.",
          "$dynamic": false
        },
        "trustAllSsl": {
          "type": "boolean",
          "title": "Trust all SSL CA certificate",
          "$dynamic": false,
          "markdownDescription": "Use this if the server is using a self signed ssl certificate."
        }
      },
      "required": ["hosts"]
    },
    "io.kestra.plugin.elasticsearch.ElasticsearchConnection-BasicAuth": {
      "type": "object",
      "properties": {
        "password": { "type": "string", "title": "Basic Auth password", "$dynamic": true },
        "username": { "type": "string", "title": "Basic Auth username", "$dynamic": true }
      }
    },
    "io.kestra.plugin.elasticsearch.Get-1": {
      "type": "object",
      "properties": {
        "connection": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.ElasticsearchConnection" },
            { "title": "The connection properties." }
          ]
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "index": { "type": "string", "title": "The elasticsearch indice", "$dynamic": true },
        "key": { "type": "string", "title": "The elasticsearch id", "$dynamic": true },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "routing": {
          "type": "string",
          "title": "Controls the shard routing of the request.",
          "$dynamic": true,
          "markdownDescription": "Using this value to hash the shard and not the id."
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "version": {
          "type": "integer",
          "title": "Sets the version",
          "$dynamic": false,
          "markdownDescription": "which will cause the get operation to only be performed if a matching version exists and no changes happened on the doc since then."
        }
      },
      "required": ["connection", "id", "index", "key", "type", "version"],
      "title": "Get an Elasticsearch document",
      "markdownDescription": "##### Examples\n> \n```yaml\nconnection:\n  hosts: \n   - \"http://localhost:9200\"\nindex: \"my_index\"\nkey: \"my_id\"\n```"
    },
    "io.kestra.plugin.elasticsearch.Get-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Get-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.elasticsearch.Get" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nconnection:\n  hosts: \n   - \"http://localhost:9200\"\nindex: \"my_index\"\nkey: \"my_id\"\n```"
    },
    "io.kestra.plugin.elasticsearch.Load-1": {
      "type": "object",
      "properties": {
        "chunk": {
          "type": "integer",
          "title": "The size of chunk for every bulk request",
          "default": 1000,
          "$dynamic": true,
          "markdownDescription": "Default value is : `1000`"
        },
        "connection": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.ElasticsearchConnection" },
            { "title": "The connection properties." }
          ]
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "from": { "type": "string", "title": "The source file", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "idKey": { "type": "string", "title": "Use this key as id.", "$dynamic": true },
        "index": { "type": "string", "title": "The elasticsearch indice", "$dynamic": true },
        "opType": {
          "type": "string",
          "enum": ["INDEX", "CREATE", "UPDATE", "DELETE"],
          "title": "Sets the type of operation to perform.",
          "$dynamic": false
        },
        "removeIdKey": {
          "type": "boolean",
          "title": "Remove idKey from the final document",
          "default": true,
          "$dynamic": true,
          "markdownDescription": "Default value is : `true`"
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "routing": {
          "type": "string",
          "title": "Controls the shard routing of the request.",
          "$dynamic": true,
          "markdownDescription": "Using this value to hash the shard and not the id."
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["connection", "from", "id", "index", "type"],
      "title": "Bulk load documents in elasticsearch using Kestra Internal Storage file",
      "markdownDescription": "##### Examples\n> \n```yaml\nconnection:\n  hosts: \n   - \"http://localhost:9200\"\nfrom: \"{{ inputs.file }}\"\nindex: \"my_index\"\n```"
    },
    "io.kestra.plugin.elasticsearch.Load-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Load-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.elasticsearch.Load" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nconnection:\n  hosts: \n   - \"http://localhost:9200\"\nfrom: \"{{ inputs.file }}\"\nindex: \"my_index\"\n```"
    },
    "io.kestra.plugin.elasticsearch.Put-1": {
      "type": "object",
      "properties": {
        "connection": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.ElasticsearchConnection" },
            { "title": "The connection properties." }
          ]
        },
        "contentType": {
          "type": "string",
          "enum": ["JSON", "SMILE", "YAML", "CBOR"],
          "title": "The content type of `value`",
          "default": "JSON",
          "$dynamic": false,
          "markdownDescription": "Default value is : `JSON`"
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "index": { "type": "string", "title": "The elasticsearch indice", "$dynamic": true },
        "key": { "type": "string", "title": "The elasticsearch id", "$dynamic": true },
        "opType": {
          "type": "string",
          "enum": ["INDEX", "CREATE", "UPDATE", "DELETE"],
          "title": "Sets the type of operation to perform.",
          "$dynamic": false
        },
        "refreshPolicy": {
          "type": "string",
          "enum": ["NONE", "IMMEDIATE", "WAIT_UNTIL"],
          "title": "Should this request trigger a refresh",
          "default": "NONE",
          "$dynamic": false,
          "markdownDescription": "an immediate refresh `IMMEDIATE`, wait for a refresh `WAIT_UNTIL`, or proceed ignore refreshes entirely `NONE`.\n\nDefault value is : `NONE`"
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "routing": {
          "type": "string",
          "title": "Controls the shard routing of the request.",
          "$dynamic": true,
          "markdownDescription": "Using this value to hash the shard and not the id."
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "value": {
          "title": "The elasticsearch value",
          "$dynamic": true,
          "markdownDescription": "Can be a string, in this case, the contentType will be used or a raw Map"
        }
      },
      "required": ["connection", "id", "index", "type"],
      "title": "Put an Elasticsearch document",
      "markdownDescription": "##### Examples\n> Put a doc with a Map\n```yaml\nconnection:\n  hosts: \n   - \"http://localhost:9200\"\nindex: \"my_index\"\nkey: \"my_id\"\nvalue:\n  name: \"John Doe\"\n  city: \"Paris\"\n```\n\n> Put a doc from a json string\n```yaml\nindex: \"my_index\"\nkey: \"my_id\"\nvalue: \"{{ outputs.task_id.data | json }}\"\n```"
    },
    "io.kestra.plugin.elasticsearch.Put-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Put-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.elasticsearch.Put" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Put a doc with a Map\n```yaml\nconnection:\n  hosts: \n   - \"http://localhost:9200\"\nindex: \"my_index\"\nkey: \"my_id\"\nvalue:\n  name: \"John Doe\"\n  city: \"Paris\"\n```\n\n> Put a doc from a json string\n```yaml\nindex: \"my_index\"\nkey: \"my_id\"\nvalue: \"{{ outputs.task_id.data | json }}\"\n```"
    },
    "io.kestra.plugin.elasticsearch.Request-1": {
      "type": "object",
      "properties": {
        "body": {
          "title": "The full body",
          "$dynamic": true,
          "markdownDescription": "Can be a json string or raw Map that will be converted to json"
        },
        "connection": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.ElasticsearchConnection" },
            { "title": "The connection properties." }
          ]
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "endpoint": {
          "type": "string",
          "title": "The path of the request (without scheme, host, port, or prefix)",
          "$dynamic": true
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "method": {
          "type": "string",
          "enum": [
            "OPTIONS",
            "GET",
            "HEAD",
            "POST",
            "PUT",
            "DELETE",
            "TRACE",
            "CONNECT",
            "PATCH",
            "CUSTOM"
          ],
          "title": "The http method to use",
          "default": "GET",
          "$dynamic": false,
          "markdownDescription": "Default value is : `GET`"
        },
        "parameters": {
          "type": "object",
          "title": "Query string parameters.",
          "additionalProperties": { "type": "string" },
          "$dynamic": true
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "routing": {
          "type": "string",
          "title": "Controls the shard routing of the request.",
          "$dynamic": true,
          "markdownDescription": "Using this value to hash the shard and not the id."
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["connection", "id", "type"],
      "title": "Send a generic elasticsearch request",
      "markdownDescription": "##### Examples\n> \n```yaml\nconnection:\n  hosts: \n   - \"http://localhost:9200\"\nmethod: \"POST\"\nendpoint: \"my_index/_doc/john\"\nbody:\n  name: \"john\"\n```"
    },
    "io.kestra.plugin.elasticsearch.Request-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Request-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.elasticsearch.Request" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nconnection:\n  hosts: \n   - \"http://localhost:9200\"\nmethod: \"POST\"\nendpoint: \"my_index/_doc/john\"\nbody:\n  name: \"john\"\n```"
    },
    "io.kestra.plugin.elasticsearch.Scroll-1": {
      "type": "object",
      "properties": {
        "connection": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.ElasticsearchConnection" },
            { "title": "The connection properties." }
          ]
        },
        "contentType": {
          "type": "string",
          "enum": ["JSON", "SMILE", "YAML", "CBOR"],
          "title": "The content type of `value`",
          "$dynamic": false
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "indexes": {
          "title": "The elasticsearch indices",
          "$dynamic": true,
          "markdownDescription": "Default to all indices",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "request": {
          "title": "The elasticsearch value",
          "$dynamic": true,
          "markdownDescription": "Can be a json string, in this case, the contentType will be used or a raw Map"
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "routing": {
          "type": "string",
          "title": "Controls the shard routing of the request.",
          "$dynamic": true,
          "markdownDescription": "Using this value to hash the shard and not the id."
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["connection", "id", "type"],
      "title": "Scroll over search request",
      "markdownDescription": "Get all documents from a search request and store it as Kestra Internal Storage file##### Examples\n> \n```yaml\nconnection:\n  hosts: \n   - \"http://localhost:9200\"\nindexes:\n - \"my_index\"\nrequest:\n  query: \n    term:\n      name:\n        value: 'john'\n```"
    },
    "io.kestra.plugin.elasticsearch.Scroll-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Scroll-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.elasticsearch.Scroll" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nconnection:\n  hosts: \n   - \"http://localhost:9200\"\nindexes:\n - \"my_index\"\nrequest:\n  query: \n    term:\n      name:\n        value: 'john'\n```"
    },
    "io.kestra.plugin.elasticsearch.Search-1": {
      "type": "object",
      "properties": {
        "connection": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.ElasticsearchConnection" },
            { "title": "The connection properties." }
          ]
        },
        "contentType": {
          "type": "string",
          "enum": ["JSON", "SMILE", "YAML", "CBOR"],
          "title": "The content type of `value`",
          "$dynamic": false
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "indexes": {
          "title": "The elasticsearch indices",
          "$dynamic": true,
          "markdownDescription": "Default to all indices",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "request": {
          "title": "The elasticsearch value",
          "$dynamic": true,
          "markdownDescription": "Can be a json string, in this case, the contentType will be used or a raw Map"
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "routing": {
          "type": "string",
          "title": "Controls the shard routing of the request.",
          "$dynamic": true,
          "markdownDescription": "Using this value to hash the shard and not the id."
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["connection", "id", "type"],
      "title": "Send a search request",
      "markdownDescription": "Get all documents from a search request and store it as outputs##### Examples\n> \n```yaml\nconnection:\n  hosts: \n   - \"http://localhost:9200\"\nindexes:\n - \"my_index\"\nrequest:\n  query: \n    term:\n      name:\n        value: 'john'\n```"
    },
    "io.kestra.plugin.elasticsearch.Search-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.elasticsearch.Search-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.elasticsearch.Search" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nconnection:\n  hosts: \n   - \"http://localhost:9200\"\nindexes:\n - \"my_index\"\nrequest:\n  query: \n    term:\n      name:\n        value: 'john'\n```"
    },
    "io.kestra.plugin.fs.ftp.Delete-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "errorOnMissing": {
          "type": "boolean",
          "title": "raise an error if the file is not found",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "host": { "type": "string", "title": "Hostname of the remote server", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "passiveMode": {
          "type": "boolean",
          "title": "Enter into passive mode.",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "password": {
          "type": "string",
          "title": "Password on the remote server",
          "$dynamic": true
        },
        "port": {
          "type": "string",
          "title": "Port of the remote server",
          "default": "21",
          "$dynamic": true,
          "markdownDescription": "Default value is : `21`"
        },
        "proxyHost": { "type": "string", "title": "FTP proxy host", "$dynamic": true },
        "proxyPort": { "type": "string", "title": "FTP proxy port", "$dynamic": true },
        "proxyType": {
          "type": "string",
          "enum": ["DIRECT", "HTTP", "SOCKS"],
          "title": "FTP proxy type",
          "$dynamic": true
        },
        "remoteIpVerification": {
          "type": "boolean",
          "title": "Control that the server ip that emit the request is the same than send response.",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "rootDir": {
          "type": "boolean",
          "title": "Is path is relative to root dir",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "uri": { "type": "string", "title": "The file to delete" },
        "username": { "type": "string", "title": "Username on the remote server", "$dynamic": true }
      },
      "required": ["host", "id", "type"],
      "title": "Delete a file to a FTP server.",
      "markdownDescription": "##### Examples\n> \n```yaml\nhost: localhost\nport: 21\nusername: foo\npassword: pass\nuri: \"/upload/dir1/file.txt\"\n```"
    },
    "io.kestra.plugin.fs.ftp.Delete-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Delete-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.fs.ftp.Delete" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nhost: localhost\nport: 21\nusername: foo\npassword: pass\nuri: \"/upload/dir1/file.txt\"\n```"
    },
    "io.kestra.plugin.fs.ftp.Download-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "from": {
          "type": "string",
          "title": "The fully-qualified URIs that point to destination path",
          "$dynamic": true
        },
        "host": { "type": "string", "title": "Hostname of the remote server", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "passiveMode": {
          "type": "boolean",
          "title": "Enter into passive mode.",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "password": {
          "type": "string",
          "title": "Password on the remote server",
          "$dynamic": true
        },
        "port": {
          "type": "string",
          "title": "Port of the remote server",
          "default": "21",
          "$dynamic": true,
          "markdownDescription": "Default value is : `21`"
        },
        "proxyHost": { "type": "string", "title": "FTP proxy host", "$dynamic": true },
        "proxyPort": { "type": "string", "title": "FTP proxy port", "$dynamic": true },
        "proxyType": {
          "type": "string",
          "enum": ["DIRECT", "HTTP", "SOCKS"],
          "title": "FTP proxy type",
          "$dynamic": true
        },
        "remoteIpVerification": {
          "type": "boolean",
          "title": "Control that the server ip that emit the request is the same than send response.",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "rootDir": {
          "type": "boolean",
          "title": "Is path is relative to root dir",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "username": { "type": "string", "title": "Username on the remote server", "$dynamic": true }
      },
      "required": ["host", "id", "type"],
      "title": "Download file from FTP server",
      "markdownDescription": "##### Examples\n> \n```yaml\nhost: localhost\nport: 21\nusername: foo\npassword: pass\nfrom: \"/in/file.txt\"\n```"
    },
    "io.kestra.plugin.fs.ftp.Download-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Download-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.fs.ftp.Download" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nhost: localhost\nport: 21\nusername: foo\npassword: pass\nfrom: \"/in/file.txt\"\n```"
    },
    "io.kestra.plugin.fs.ftp.Downloads-1": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "enum": ["MOVE", "DELETE"],
          "title": "The action to do on find files",
          "$dynamic": true
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "from": { "type": "string", "title": "The directory to list", "$dynamic": true },
        "host": { "type": "string", "title": "Hostname of the remote server", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "moveDirectory": {
          "type": "string",
          "title": "The destination directory in case off `MOVE` ",
          "$dynamic": true
        },
        "passiveMode": {
          "type": "boolean",
          "title": "Enter into passive mode.",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "password": {
          "type": "string",
          "title": "Password on the remote server",
          "$dynamic": true
        },
        "port": {
          "type": "string",
          "title": "Port of the remote server",
          "default": "21",
          "$dynamic": true,
          "markdownDescription": "Default value is : `21`"
        },
        "proxyHost": { "type": "string", "title": "FTP proxy host", "$dynamic": true },
        "proxyPort": { "type": "string", "title": "FTP proxy port", "$dynamic": true },
        "proxyType": {
          "type": "string",
          "enum": ["DIRECT", "HTTP", "SOCKS"],
          "title": "FTP proxy type",
          "$dynamic": true
        },
        "regExp": {
          "type": "string",
          "title": "A regexp to filter on full path",
          "$dynamic": true
        },
        "remoteIpVerification": {
          "type": "boolean",
          "title": "Control that the server ip that emit the request is the same than send response.",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "rootDir": {
          "type": "boolean",
          "title": "Is path is relative to root dir",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "username": { "type": "string", "title": "Username on the remote server", "$dynamic": true }
      },
      "required": ["from", "host", "id", "type"],
      "title": "Download multiple files from FTP server",
      "markdownDescription": "##### Examples\n> Download a list of files and move it to an archive folders\n```yaml\nhost: localhost\nport: 21\nusername: foo\npassword: pass\nfrom: \"/in/\"\ninterval: PT10S\naction: MOVE\nmoveDirectory: \"/archive/\"\n```"
    },
    "io.kestra.plugin.fs.ftp.Downloads-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Downloads-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.fs.ftp.Downloads" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Download a list of files and move it to an archive folders\n```yaml\nhost: localhost\nport: 21\nusername: foo\npassword: pass\nfrom: \"/in/\"\ninterval: PT10S\naction: MOVE\nmoveDirectory: \"/archive/\"\n```"
    },
    "io.kestra.plugin.fs.ftp.List-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "from": {
          "type": "string",
          "title": "The fully-qualified URIs that point to path",
          "$dynamic": true
        },
        "host": { "type": "string", "title": "Hostname of the remote server", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "passiveMode": {
          "type": "boolean",
          "title": "Enter into passive mode.",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "password": {
          "type": "string",
          "title": "Password on the remote server",
          "$dynamic": true
        },
        "port": {
          "type": "string",
          "title": "Port of the remote server",
          "default": "21",
          "$dynamic": true,
          "markdownDescription": "Default value is : `21`"
        },
        "proxyHost": { "type": "string", "title": "FTP proxy host", "$dynamic": true },
        "proxyPort": { "type": "string", "title": "FTP proxy port", "$dynamic": true },
        "proxyType": {
          "type": "string",
          "enum": ["DIRECT", "HTTP", "SOCKS"],
          "title": "FTP proxy type",
          "$dynamic": true
        },
        "regExp": {
          "type": "string",
          "title": "A regexp to filter on full path",
          "$dynamic": true
        },
        "remoteIpVerification": {
          "type": "boolean",
          "title": "Control that the server ip that emit the request is the same than send response.",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "rootDir": {
          "type": "boolean",
          "title": "Is path is relative to root dir",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "username": { "type": "string", "title": "Username on the remote server", "$dynamic": true }
      },
      "required": ["host", "id", "type"],
      "title": "List files from FTP server directory",
      "markdownDescription": "##### Examples\n> \n```yaml\nhost: localhost\nport: 21\nusername: foo\npassword: pass\nfrom: \"/upload/dir1/\"\nregExp: \".*\\/dir1\\/.*\\.(yaml|yml)\"\n```"
    },
    "io.kestra.plugin.fs.ftp.List-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.List-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.fs.ftp.List" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nhost: localhost\nport: 21\nusername: foo\npassword: pass\nfrom: \"/upload/dir1/\"\nregExp: \".*\\/dir1\\/.*\\.(yaml|yml)\"\n```"
    },
    "io.kestra.plugin.fs.ftp.Move-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "from": { "type": "string", "title": "The file to move", "$dynamic": true },
        "host": { "type": "string", "title": "Hostname of the remote server", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "passiveMode": {
          "type": "boolean",
          "title": "Enter into passive mode.",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "password": {
          "type": "string",
          "title": "Password on the remote server",
          "$dynamic": true
        },
        "port": {
          "type": "string",
          "title": "Port of the remote server",
          "default": "21",
          "$dynamic": true,
          "markdownDescription": "Default value is : `21`"
        },
        "proxyHost": { "type": "string", "title": "FTP proxy host", "$dynamic": true },
        "proxyPort": { "type": "string", "title": "FTP proxy port", "$dynamic": true },
        "proxyType": {
          "type": "string",
          "enum": ["DIRECT", "HTTP", "SOCKS"],
          "title": "FTP proxy type",
          "$dynamic": true
        },
        "remoteIpVerification": {
          "type": "boolean",
          "title": "Control that the server ip that emit the request is the same than send response.",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "rootDir": {
          "type": "boolean",
          "title": "Is path is relative to root dir",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "timeout": { "type": "string", "format": "duration" },
        "to": {
          "type": "string",
          "title": "The destination path to move",
          "$dynamic": true,
          "markdownDescription": "The full destination path (with filename optionally)\nIf end with a `/`, the destination is considered as a directory and filename will be happen\nIf the destFile exists, it is deleted first."
        },
        "type": { "type": "string", "minLength": 1 },
        "username": { "type": "string", "title": "Username on the remote server", "$dynamic": true }
      },
      "required": ["host", "id", "type"],
      "title": "Move a file to a FTP server.",
      "markdownDescription": "If the destination directory doesn't exist, it will be created##### Examples\n> \n```yaml\nhost: localhost\nport: 21\nusername: foo\npassword: pass\nfrom: \"/upload/dir1/file.txt\"\nto: \"/upload/dir2/file.txt\"\n```"
    },
    "io.kestra.plugin.fs.ftp.Move-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Move-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.fs.ftp.Move" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nhost: localhost\nport: 21\nusername: foo\npassword: pass\nfrom: \"/upload/dir1/file.txt\"\nto: \"/upload/dir2/file.txt\"\n```"
    },
    "io.kestra.plugin.fs.ftp.Trigger-1": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "enum": ["MOVE", "DELETE"],
          "title": "The action to do on find files",
          "$dynamic": true
        },
        "conditions": {
          "title": "List of Conditions in order to limit the flow trigger.",
          "type": "array",
          "items": {
            "anyOf": [
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.NotCondition-2" },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionStatusCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.DateTimeBetweenCondition-2"
              },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.FlowCondition-2" },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionFlowCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.HasRetryAttemptCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.DayWeekInMonthCondition-2"
              },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.DayWeekCondition-2" },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.WeekendCondition-2" },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionNamespaceCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.VariableCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.FlowNamespaceCondition-2"
              },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.OrCondition-2" },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.MultipleCondition-2" }
            ]
          }
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "from": { "type": "string", "title": "The directory to list", "$dynamic": true },
        "host": { "type": "string", "title": "Hostname of the remote server", "$dynamic": true },
        "id": {
          "type": "string",
          "title": "A unique id for the whole flow",
          "minLength": 1,
          "pattern": "[a-zA-Z0-9_-]+"
        },
        "interval": {
          "type": "string",
          "format": "duration",
          "title": "The interval between test of triggers",
          "default": 60.0,
          "$dynamic": false,
          "markdownDescription": "Default value is : `60.000000000`"
        },
        "moveDirectory": {
          "type": "string",
          "title": "The destination directory in case off `MOVE` ",
          "$dynamic": true
        },
        "passiveMode": {
          "type": "boolean",
          "title": "Enter into passive mode.",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "password": {
          "type": "string",
          "title": "Password on the remote server",
          "$dynamic": true
        },
        "port": {
          "type": "string",
          "title": "Port of the remote server",
          "default": "21",
          "$dynamic": true,
          "markdownDescription": "Default value is : `21`"
        },
        "proxyHost": { "type": "string", "title": "FTP proxy host", "$dynamic": true },
        "proxyPort": { "type": "string", "title": "FTP proxy port", "$dynamic": true },
        "proxyType": {
          "type": "string",
          "enum": ["DIRECT", "HTTP", "SOCKS"],
          "title": "FTP proxy type",
          "$dynamic": true
        },
        "regExp": {
          "type": "string",
          "title": "A regexp to filter on full path",
          "$dynamic": true
        },
        "remoteIpVerification": {
          "type": "boolean",
          "title": "Control that the server ip that emit the request is the same than send response.",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "rootDir": {
          "type": "boolean",
          "title": "Is path is relative to root dir",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "type": {
          "type": "string",
          "title": "The class name for this current trigger",
          "minLength": 1
        },
        "username": { "type": "string", "title": "Username on the remote server", "$dynamic": true }
      },
      "required": ["action", "from", "host", "id", "type"],
      "title": "Wait for files on a FTP server",
      "markdownDescription": "##### Examples\n> Wait for a list of file on a FTP server and iterate through the files\n```yaml\nid: gcs-listen\nnamespace: io.kestra.tests\n\ntasks:\n  - id: each\n    type: io.kestra.core.tasks.flows.EachSequential\n    tasks:\n      - id: return\n        type: io.kestra.core.tasks.debugs.Return\n        format: \"{{taskrun.value}}\"\n    value: \"{{ trigger.files | jq('.path') }}\"\n\ntriggers:\n  - id: watch\n    type: io.kestra.plugin.fs.ftp.Trigger\n    host: localhost\n    port: 21\n    username: foo\n    password: pass\n    from: \"/in/\"\n    interval: PT10S\n    action: MOVE\n    moveDirectory: \"/archive/\"\n```"
    },
    "io.kestra.plugin.fs.ftp.Trigger-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Trigger-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.fs.ftp.Trigger" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Wait for a list of file on a FTP server and iterate through the files\n```yaml\nid: gcs-listen\nnamespace: io.kestra.tests\n\ntasks:\n  - id: each\n    type: io.kestra.core.tasks.flows.EachSequential\n    tasks:\n      - id: return\n        type: io.kestra.core.tasks.debugs.Return\n        format: \"{{taskrun.value}}\"\n    value: \"{{ trigger.files | jq('.path') }}\"\n\ntriggers:\n  - id: watch\n    type: io.kestra.plugin.fs.ftp.Trigger\n    host: localhost\n    port: 21\n    username: foo\n    password: pass\n    from: \"/in/\"\n    interval: PT10S\n    action: MOVE\n    moveDirectory: \"/archive/\"\n```"
    },
    "io.kestra.plugin.fs.ftp.Upload-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "from": { "type": "string", "title": "The file path to copy", "$dynamic": true },
        "host": { "type": "string", "title": "Hostname of the remote server", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "passiveMode": {
          "type": "boolean",
          "title": "Enter into passive mode.",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "password": {
          "type": "string",
          "title": "Password on the remote server",
          "$dynamic": true
        },
        "port": {
          "type": "string",
          "title": "Port of the remote server",
          "default": "21",
          "$dynamic": true,
          "markdownDescription": "Default value is : `21`"
        },
        "proxyHost": { "type": "string", "title": "FTP proxy host", "$dynamic": true },
        "proxyPort": { "type": "string", "title": "FTP proxy port", "$dynamic": true },
        "proxyType": {
          "type": "string",
          "enum": ["DIRECT", "HTTP", "SOCKS"],
          "title": "FTP proxy type",
          "$dynamic": true
        },
        "remoteIpVerification": {
          "type": "boolean",
          "title": "Control that the server ip that emit the request is the same than send response.",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "rootDir": {
          "type": "boolean",
          "title": "Is path is relative to root dir",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "timeout": { "type": "string", "format": "duration" },
        "to": { "type": "string", "title": "The destination path", "$dynamic": true },
        "type": { "type": "string", "minLength": 1 },
        "username": { "type": "string", "title": "Username on the remote server", "$dynamic": true }
      },
      "required": ["host", "id", "type"],
      "title": "Upload a file to a FTP server",
      "markdownDescription": "##### Examples\n> \n```yaml\nhost: localhost\nport: 21\nusername: foo\npassword: pass\nfrom: \"{{ outputs.taskid.uri }}\"\nto: \"/upload/dir2/file.txt\"\n```"
    },
    "io.kestra.plugin.fs.ftp.Upload-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.fs.ftp.Upload-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.fs.ftp.Upload" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nhost: localhost\nport: 21\nusername: foo\npassword: pass\nfrom: \"{{ outputs.taskid.uri }}\"\nto: \"/upload/dir2/file.txt\"\n```"
    },
    "io.kestra.plugin.fs.ftps.Delete-1": {
      "type": "object",
      "properties": {
        "dataChannelProtectionLevel": {
          "type": "string",
          "enum": ["C", "S", "E", "P"],
          "title": "Sets the data channel protection level (PROT).",
          "default": "P",
          "$dynamic": false,
          "markdownDescription": "Default value is : `P`"
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "errorOnMissing": {
          "type": "boolean",
          "title": "raise an error if the file is not found",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "host": { "type": "string", "title": "Hostname of the remote server", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "insecureTrustAllCertificates": {
          "type": "boolean",
          "title": "Whether the client should disable checking of the remote SSL certificate.",
          "$dynamic": false,
          "markdownDescription": "Note: This makes the SSL connection insecure, and should only be used for testing."
        },
        "mode": {
          "type": "string",
          "enum": ["IMPLICIT", "EXPLICIT"],
          "title": "Sets FTPS mode, either \"implicit\" or \"explicit\".",
          "default": "EXPLICIT",
          "$dynamic": false,
          "markdownDescription": "Default value is : `EXPLICIT`"
        },
        "passiveMode": {
          "type": "boolean",
          "title": "Enter into passive mode.",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "password": {
          "type": "string",
          "title": "Password on the remote server",
          "$dynamic": true
        },
        "port": {
          "type": "string",
          "title": "Port of the remote server",
          "default": "990",
          "$dynamic": true,
          "markdownDescription": "Default value is : `990`"
        },
        "proxyHost": { "type": "string", "title": "FTP proxy host", "$dynamic": true },
        "proxyPort": { "type": "string", "title": "FTP proxy port", "$dynamic": true },
        "proxyType": {
          "type": "string",
          "enum": ["DIRECT", "HTTP", "SOCKS"],
          "title": "FTP proxy type",
          "$dynamic": true
        },
        "remoteIpVerification": {
          "type": "boolean",
          "title": "Control that the server ip that emit the request is the same than send response.",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "rootDir": {
          "type": "boolean",
          "title": "Is path is relative to root dir",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "uri": { "type": "string", "title": "The file to delete" },
        "username": { "type": "string", "title": "Username on the remote server", "$dynamic": true }
      },
      "required": ["host", "id", "type"],
      "title": "Delete a file to a FTPS server.",
      "markdownDescription": "##### Examples\n> \n```yaml\nhost: localhost\nport: 990\nusername: foo\npassword: pass\nuri: \"/upload/dir1/file.txt\"\n```"
    },
    "io.kestra.plugin.fs.ftps.Delete-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Delete-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.fs.ftps.Delete" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nhost: localhost\nport: 990\nusername: foo\npassword: pass\nuri: \"/upload/dir1/file.txt\"\n```"
    },
    "io.kestra.plugin.fs.ftps.Download-1": {
      "type": "object",
      "properties": {
        "dataChannelProtectionLevel": {
          "type": "string",
          "enum": ["C", "S", "E", "P"],
          "title": "Sets the data channel protection level (PROT).",
          "default": "P",
          "$dynamic": false,
          "markdownDescription": "Default value is : `P`"
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "from": {
          "type": "string",
          "title": "The fully-qualified URIs that point to destination path",
          "$dynamic": true
        },
        "host": { "type": "string", "title": "Hostname of the remote server", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "insecureTrustAllCertificates": {
          "type": "boolean",
          "title": "Whether the client should disable checking of the remote SSL certificate.",
          "$dynamic": false,
          "markdownDescription": "Note: This makes the SSL connection insecure, and should only be used for testing."
        },
        "mode": {
          "type": "string",
          "enum": ["IMPLICIT", "EXPLICIT"],
          "title": "Sets FTPS mode, either \"implicit\" or \"explicit\".",
          "default": "EXPLICIT",
          "$dynamic": false,
          "markdownDescription": "Default value is : `EXPLICIT`"
        },
        "passiveMode": {
          "type": "boolean",
          "title": "Enter into passive mode.",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "password": {
          "type": "string",
          "title": "Password on the remote server",
          "$dynamic": true
        },
        "port": {
          "type": "string",
          "title": "Port of the remote server",
          "default": "990",
          "$dynamic": true,
          "markdownDescription": "Default value is : `990`"
        },
        "proxyHost": { "type": "string", "title": "FTP proxy host", "$dynamic": true },
        "proxyPort": { "type": "string", "title": "FTP proxy port", "$dynamic": true },
        "proxyType": {
          "type": "string",
          "enum": ["DIRECT", "HTTP", "SOCKS"],
          "title": "FTP proxy type",
          "$dynamic": true
        },
        "remoteIpVerification": {
          "type": "boolean",
          "title": "Control that the server ip that emit the request is the same than send response.",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "rootDir": {
          "type": "boolean",
          "title": "Is path is relative to root dir",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "username": { "type": "string", "title": "Username on the remote server", "$dynamic": true }
      },
      "required": ["host", "id", "type"],
      "title": "Download file from FTPS server",
      "markdownDescription": "##### Examples\n> \n```yaml\nhost: localhost\nport: 990\nusername: foo\npassword: pass\nfrom: \"/in/file.txt\"\n```"
    },
    "io.kestra.plugin.fs.ftps.Download-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Download-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.fs.ftps.Download" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nhost: localhost\nport: 990\nusername: foo\npassword: pass\nfrom: \"/in/file.txt\"\n```"
    },
    "io.kestra.plugin.fs.ftps.Downloads-1": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "enum": ["MOVE", "DELETE"],
          "title": "The action to do on find files",
          "$dynamic": true
        },
        "dataChannelProtectionLevel": {
          "type": "string",
          "enum": ["C", "S", "E", "P"],
          "title": "Sets the data channel protection level (PROT).",
          "default": "P",
          "$dynamic": false,
          "markdownDescription": "Default value is : `P`"
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "from": { "type": "string", "title": "The directory to list", "$dynamic": true },
        "host": { "type": "string", "title": "Hostname of the remote server", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "insecureTrustAllCertificates": {
          "type": "boolean",
          "title": "Whether the client should disable checking of the remote SSL certificate.",
          "$dynamic": false,
          "markdownDescription": "Note: This makes the SSL connection insecure, and should only be used for testing."
        },
        "mode": {
          "type": "string",
          "enum": ["IMPLICIT", "EXPLICIT"],
          "title": "Sets FTPS mode, either \"implicit\" or \"explicit\".",
          "default": "EXPLICIT",
          "$dynamic": false,
          "markdownDescription": "Default value is : `EXPLICIT`"
        },
        "moveDirectory": {
          "type": "string",
          "title": "The destination directory in case off `MOVE` ",
          "$dynamic": true
        },
        "passiveMode": {
          "type": "boolean",
          "title": "Enter into passive mode.",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "password": {
          "type": "string",
          "title": "Password on the remote server",
          "$dynamic": true
        },
        "port": {
          "type": "string",
          "title": "Port of the remote server",
          "default": "990",
          "$dynamic": true,
          "markdownDescription": "Default value is : `990`"
        },
        "proxyHost": { "type": "string", "title": "FTP proxy host", "$dynamic": true },
        "proxyPort": { "type": "string", "title": "FTP proxy port", "$dynamic": true },
        "proxyType": {
          "type": "string",
          "enum": ["DIRECT", "HTTP", "SOCKS"],
          "title": "FTP proxy type",
          "$dynamic": true
        },
        "regExp": {
          "type": "string",
          "title": "A regexp to filter on full path",
          "$dynamic": true
        },
        "remoteIpVerification": {
          "type": "boolean",
          "title": "Control that the server ip that emit the request is the same than send response.",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "rootDir": {
          "type": "boolean",
          "title": "Is path is relative to root dir",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "username": { "type": "string", "title": "Username on the remote server", "$dynamic": true }
      },
      "required": ["from", "host", "id", "type"],
      "title": "Download multiple files from FTPS server",
      "markdownDescription": "##### Examples\n> Download a list of files and move it to an archive folders\n```yaml\nhost: localhost\nport: 990\nusername: foo\npassword: pass\nfrom: \"/in/\"\ninterval: PT10S\naction: MOVE\nmoveDirectory: \"/archive/\"\n```"
    },
    "io.kestra.plugin.fs.ftps.Downloads-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Downloads-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.fs.ftps.Downloads" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Download a list of files and move it to an archive folders\n```yaml\nhost: localhost\nport: 990\nusername: foo\npassword: pass\nfrom: \"/in/\"\ninterval: PT10S\naction: MOVE\nmoveDirectory: \"/archive/\"\n```"
    },
    "io.kestra.plugin.fs.ftps.List-1": {
      "type": "object",
      "properties": {
        "dataChannelProtectionLevel": {
          "type": "string",
          "enum": ["C", "S", "E", "P"],
          "title": "Sets the data channel protection level (PROT).",
          "default": "P",
          "$dynamic": false,
          "markdownDescription": "Default value is : `P`"
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "from": {
          "type": "string",
          "title": "The fully-qualified URIs that point to path",
          "$dynamic": true
        },
        "host": { "type": "string", "title": "Hostname of the remote server", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "insecureTrustAllCertificates": {
          "type": "boolean",
          "title": "Whether the client should disable checking of the remote SSL certificate.",
          "$dynamic": false,
          "markdownDescription": "Note: This makes the SSL connection insecure, and should only be used for testing."
        },
        "mode": {
          "type": "string",
          "enum": ["IMPLICIT", "EXPLICIT"],
          "title": "Sets FTPS mode, either \"implicit\" or \"explicit\".",
          "default": "EXPLICIT",
          "$dynamic": false,
          "markdownDescription": "Default value is : `EXPLICIT`"
        },
        "passiveMode": {
          "type": "boolean",
          "title": "Enter into passive mode.",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "password": {
          "type": "string",
          "title": "Password on the remote server",
          "$dynamic": true
        },
        "port": {
          "type": "string",
          "title": "Port of the remote server",
          "default": "990",
          "$dynamic": true,
          "markdownDescription": "Default value is : `990`"
        },
        "proxyHost": { "type": "string", "title": "FTP proxy host", "$dynamic": true },
        "proxyPort": { "type": "string", "title": "FTP proxy port", "$dynamic": true },
        "proxyType": {
          "type": "string",
          "enum": ["DIRECT", "HTTP", "SOCKS"],
          "title": "FTP proxy type",
          "$dynamic": true
        },
        "regExp": {
          "type": "string",
          "title": "A regexp to filter on full path",
          "$dynamic": true
        },
        "remoteIpVerification": {
          "type": "boolean",
          "title": "Control that the server ip that emit the request is the same than send response.",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "rootDir": {
          "type": "boolean",
          "title": "Is path is relative to root dir",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "username": { "type": "string", "title": "Username on the remote server", "$dynamic": true }
      },
      "required": ["host", "id", "type"],
      "title": "List files from FTPS server directory",
      "markdownDescription": "##### Examples\n> \n```yaml\nhost: localhost\nport: 990\nusername: foo\npassword: pass\nfrom: \"/upload/dir1/\"\nregExp: \".*\\/dir1\\/.*\\.(yaml|yml)\"\n```"
    },
    "io.kestra.plugin.fs.ftps.List-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.List-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.fs.ftps.List" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nhost: localhost\nport: 990\nusername: foo\npassword: pass\nfrom: \"/upload/dir1/\"\nregExp: \".*\\/dir1\\/.*\\.(yaml|yml)\"\n```"
    },
    "io.kestra.plugin.fs.ftps.Move-1": {
      "type": "object",
      "properties": {
        "dataChannelProtectionLevel": {
          "type": "string",
          "enum": ["C", "S", "E", "P"],
          "title": "Sets the data channel protection level (PROT).",
          "default": "P",
          "$dynamic": false,
          "markdownDescription": "Default value is : `P`"
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "from": { "type": "string", "title": "The file to move", "$dynamic": true },
        "host": { "type": "string", "title": "Hostname of the remote server", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "insecureTrustAllCertificates": {
          "type": "boolean",
          "title": "Whether the client should disable checking of the remote SSL certificate.",
          "$dynamic": false,
          "markdownDescription": "Note: This makes the SSL connection insecure, and should only be used for testing."
        },
        "mode": {
          "type": "string",
          "enum": ["IMPLICIT", "EXPLICIT"],
          "title": "Sets FTPS mode, either \"implicit\" or \"explicit\".",
          "default": "EXPLICIT",
          "$dynamic": false,
          "markdownDescription": "Default value is : `EXPLICIT`"
        },
        "passiveMode": {
          "type": "boolean",
          "title": "Enter into passive mode.",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "password": {
          "type": "string",
          "title": "Password on the remote server",
          "$dynamic": true
        },
        "port": {
          "type": "string",
          "title": "Port of the remote server",
          "default": "990",
          "$dynamic": true,
          "markdownDescription": "Default value is : `990`"
        },
        "proxyHost": { "type": "string", "title": "FTP proxy host", "$dynamic": true },
        "proxyPort": { "type": "string", "title": "FTP proxy port", "$dynamic": true },
        "proxyType": {
          "type": "string",
          "enum": ["DIRECT", "HTTP", "SOCKS"],
          "title": "FTP proxy type",
          "$dynamic": true
        },
        "remoteIpVerification": {
          "type": "boolean",
          "title": "Control that the server ip that emit the request is the same than send response.",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "rootDir": {
          "type": "boolean",
          "title": "Is path is relative to root dir",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "timeout": { "type": "string", "format": "duration" },
        "to": {
          "type": "string",
          "title": "The destination path to move",
          "$dynamic": true,
          "markdownDescription": "The full destination path (with filename optionally)\nIf end with a `/`, the destination is considered as a directory and filename will be happen\nIf the destFile exists, it is deleted first."
        },
        "type": { "type": "string", "minLength": 1 },
        "username": { "type": "string", "title": "Username on the remote server", "$dynamic": true }
      },
      "required": ["host", "id", "type"],
      "title": "Move a file to a FTPS server.",
      "markdownDescription": "If the destination directory doesn't exist, it will be created##### Examples\n> \n```yaml\nhost: localhost\nport: 990\nusername: foo\npassword: pass\nfrom: \"/upload/dir1/file.txt\"\nto: \"/upload/dir2/file.txt\"\n```"
    },
    "io.kestra.plugin.fs.ftps.Move-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Move-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.fs.ftps.Move" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nhost: localhost\nport: 990\nusername: foo\npassword: pass\nfrom: \"/upload/dir1/file.txt\"\nto: \"/upload/dir2/file.txt\"\n```"
    },
    "io.kestra.plugin.fs.ftps.Trigger-1": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "enum": ["MOVE", "DELETE"],
          "title": "The action to do on find files",
          "$dynamic": true
        },
        "conditions": {
          "title": "List of Conditions in order to limit the flow trigger.",
          "type": "array",
          "items": {
            "anyOf": [
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.NotCondition-2" },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionStatusCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.DateTimeBetweenCondition-2"
              },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.FlowCondition-2" },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionFlowCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.HasRetryAttemptCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.DayWeekInMonthCondition-2"
              },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.DayWeekCondition-2" },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.WeekendCondition-2" },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionNamespaceCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.VariableCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.FlowNamespaceCondition-2"
              },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.OrCondition-2" },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.MultipleCondition-2" }
            ]
          }
        },
        "dataChannelProtectionLevel": {
          "type": "string",
          "enum": ["C", "S", "E", "P"],
          "title": "Sets the data channel protection level (PROT).",
          "default": "P",
          "$dynamic": false,
          "markdownDescription": "Default value is : `P`"
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "from": { "type": "string", "title": "The directory to list", "$dynamic": true },
        "host": { "type": "string", "title": "Hostname of the remote server", "$dynamic": true },
        "id": {
          "type": "string",
          "title": "A unique id for the whole flow",
          "minLength": 1,
          "pattern": "[a-zA-Z0-9_-]+"
        },
        "insecureTrustAllCertificates": {
          "type": "boolean",
          "title": "Whether the client should disable checking of the remote SSL certificate.",
          "$dynamic": false,
          "markdownDescription": "Note: This makes the SSL connection insecure, and should only be used for testing."
        },
        "interval": {
          "type": "string",
          "format": "duration",
          "title": "The interval between test of triggers",
          "default": 60.0,
          "$dynamic": false,
          "markdownDescription": "Default value is : `60.000000000`"
        },
        "mode": {
          "type": "string",
          "enum": ["IMPLICIT", "EXPLICIT"],
          "title": "Sets FTPS mode, either \"implicit\" or \"explicit\".",
          "default": "EXPLICIT",
          "$dynamic": false,
          "markdownDescription": "Default value is : `EXPLICIT`"
        },
        "moveDirectory": {
          "type": "string",
          "title": "The destination directory in case off `MOVE` ",
          "$dynamic": true
        },
        "passiveMode": {
          "type": "boolean",
          "title": "Enter into passive mode.",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "password": {
          "type": "string",
          "title": "Password on the remote server",
          "$dynamic": true
        },
        "port": {
          "type": "string",
          "title": "Port of the remote server",
          "default": "990",
          "$dynamic": true,
          "markdownDescription": "Default value is : `990`"
        },
        "proxyHost": { "type": "string", "title": "FTP proxy host", "$dynamic": true },
        "proxyPort": { "type": "string", "title": "FTP proxy port", "$dynamic": true },
        "proxyType": {
          "type": "string",
          "enum": ["DIRECT", "HTTP", "SOCKS"],
          "title": "FTP proxy type",
          "$dynamic": true
        },
        "regExp": {
          "type": "string",
          "title": "A regexp to filter on full path",
          "$dynamic": true
        },
        "remoteIpVerification": {
          "type": "boolean",
          "title": "Control that the server ip that emit the request is the same than send response.",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "rootDir": {
          "type": "boolean",
          "title": "Is path is relative to root dir",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "type": {
          "type": "string",
          "title": "The class name for this current trigger",
          "minLength": 1
        },
        "username": { "type": "string", "title": "Username on the remote server", "$dynamic": true }
      },
      "required": ["action", "from", "host", "id", "type"],
      "title": "Wait for files on a FTPS server",
      "markdownDescription": "##### Examples\n> Wait for a list of file on a FTP server and iterate through the files\n```yaml\nid: gcs-listen\nnamespace: io.kestra.tests\n\ntasks:\n  - id: each\n    type: io.kestra.core.tasks.flows.EachSequential\n    tasks:\n      - id: return\n        type: io.kestra.core.tasks.debugs.Return\n        format: \"{{taskrun.value}}\"\n    value: \"{{ trigger.files | jq('.path') }}\"\n\ntriggers:\n  - id: watch\n    type: io.kestra.plugin.fs.ftp.Trigger\n    host: localhost\n    port: 990\n    username: foo\n    password: pass\n    from: \"/in/\"\n    interval: PT10S\n    action: MOVE\n    moveDirectory: \"/archive/\"\n```"
    },
    "io.kestra.plugin.fs.ftps.Trigger-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Trigger-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.fs.ftps.Trigger" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Wait for a list of file on a FTP server and iterate through the files\n```yaml\nid: gcs-listen\nnamespace: io.kestra.tests\n\ntasks:\n  - id: each\n    type: io.kestra.core.tasks.flows.EachSequential\n    tasks:\n      - id: return\n        type: io.kestra.core.tasks.debugs.Return\n        format: \"{{taskrun.value}}\"\n    value: \"{{ trigger.files | jq('.path') }}\"\n\ntriggers:\n  - id: watch\n    type: io.kestra.plugin.fs.ftp.Trigger\n    host: localhost\n    port: 990\n    username: foo\n    password: pass\n    from: \"/in/\"\n    interval: PT10S\n    action: MOVE\n    moveDirectory: \"/archive/\"\n```"
    },
    "io.kestra.plugin.fs.ftps.Upload-1": {
      "type": "object",
      "properties": {
        "dataChannelProtectionLevel": {
          "type": "string",
          "enum": ["C", "S", "E", "P"],
          "title": "Sets the data channel protection level (PROT).",
          "default": "P",
          "$dynamic": false,
          "markdownDescription": "Default value is : `P`"
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "from": { "type": "string", "title": "The file path to copy", "$dynamic": true },
        "host": { "type": "string", "title": "Hostname of the remote server", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "insecureTrustAllCertificates": {
          "type": "boolean",
          "title": "Whether the client should disable checking of the remote SSL certificate.",
          "$dynamic": false,
          "markdownDescription": "Note: This makes the SSL connection insecure, and should only be used for testing."
        },
        "mode": {
          "type": "string",
          "enum": ["IMPLICIT", "EXPLICIT"],
          "title": "Sets FTPS mode, either \"implicit\" or \"explicit\".",
          "default": "EXPLICIT",
          "$dynamic": false,
          "markdownDescription": "Default value is : `EXPLICIT`"
        },
        "passiveMode": {
          "type": "boolean",
          "title": "Enter into passive mode.",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "password": {
          "type": "string",
          "title": "Password on the remote server",
          "$dynamic": true
        },
        "port": {
          "type": "string",
          "title": "Port of the remote server",
          "default": "990",
          "$dynamic": true,
          "markdownDescription": "Default value is : `990`"
        },
        "proxyHost": { "type": "string", "title": "FTP proxy host", "$dynamic": true },
        "proxyPort": { "type": "string", "title": "FTP proxy port", "$dynamic": true },
        "proxyType": {
          "type": "string",
          "enum": ["DIRECT", "HTTP", "SOCKS"],
          "title": "FTP proxy type",
          "$dynamic": true
        },
        "remoteIpVerification": {
          "type": "boolean",
          "title": "Control that the server ip that emit the request is the same than send response.",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "rootDir": {
          "type": "boolean",
          "title": "Is path is relative to root dir",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "timeout": { "type": "string", "format": "duration" },
        "to": { "type": "string", "title": "The destination path", "$dynamic": true },
        "type": { "type": "string", "minLength": 1 },
        "username": { "type": "string", "title": "Username on the remote server", "$dynamic": true }
      },
      "required": ["host", "id", "type"],
      "title": "Upload a file to a FTPS server",
      "markdownDescription": "##### Examples\n> \n```yaml\nhost: localhost\nport: 990\nusername: foo\npassword: pass\nfrom: \"{{ outputs.taskid.uri }}\"\nto: \"/upload/dir2/file.txt\"\n```"
    },
    "io.kestra.plugin.fs.ftps.Upload-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.fs.ftps.Upload-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.fs.ftps.Upload" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nhost: localhost\nport: 990\nusername: foo\npassword: pass\nfrom: \"{{ outputs.taskid.uri }}\"\nto: \"/upload/dir2/file.txt\"\n```"
    },
    "io.kestra.plugin.fs.http.AbstractHttp-RequestOptions": {
      "type": "object",
      "properties": {
        "basicAuthPassword": {
          "type": "string",
          "title": "The basicAuth password.",
          "$dynamic": true
        },
        "basicAuthUser": { "type": "string", "title": "The basicAuth username.", "$dynamic": true },
        "connectTimeout": {
          "type": "string",
          "format": "duration",
          "title": "The connect timeout.",
          "$dynamic": false
        },
        "connectionPoolIdleTimeout": {
          "type": "string",
          "format": "duration",
          "title": "The idle timeout for connection in the client connection pool. ",
          "default": 0.0,
          "$dynamic": false,
          "markdownDescription": "Default value is : `0.0`"
        },
        "defaultCharset": {
          "allOf": [
            { "$ref": "#/definitions/java.nio.charset.Charset" },
            {
              "title": "Sets the default charset to use.",
              "default": "UTF-8",
              "$dynamic": false,
              "markdownDescription": "Default value is : `UTF-8`"
            }
          ]
        },
        "followRedirects": {
          "type": "boolean",
          "title": "Whether redirects should be followed.",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "logLevel": {
          "type": "string",
          "enum": ["ALL", "TRACE", "DEBUG", "INFO", "WARN", "ERROR", "OFF", "NOT_SPECIFIED"],
          "title": "The level to enable trace logging at.",
          "$dynamic": false
        },
        "maxContentLength": {
          "type": "integer",
          "title": "Sets the maximum content length the client can consume.",
          "default": 10485760,
          "$dynamic": false,
          "markdownDescription": "Default value is : `10485760`"
        },
        "proxyAddress": { "type": "string", "title": "The proxy to use.", "$dynamic": true },
        "proxyPassword": {
          "type": "string",
          "title": "The proxy password to use.",
          "$dynamic": true
        },
        "proxyPort": { "type": "integer", "title": "The proxy port to use.", "$dynamic": false },
        "proxyType": {
          "type": "string",
          "enum": ["DIRECT", "HTTP", "SOCKS"],
          "title": "The proxy type to use.",
          "default": "DIRECT",
          "$dynamic": false,
          "markdownDescription": "Default value is : `DIRECT`"
        },
        "proxyUsername": { "type": "string", "title": "The proxy user to use.", "$dynamic": true },
        "readIdleTimeout": {
          "type": "string",
          "format": "duration",
          "title": "The default amount of time to allow read operation connections to remain idle.",
          "default": 300.0,
          "$dynamic": false,
          "markdownDescription": "Default value is : `300.000000000`"
        },
        "readTimeout": {
          "type": "string",
          "format": "duration",
          "title": "The default read timeout.",
          "default": 10.0,
          "$dynamic": false,
          "markdownDescription": "Default value is : `10.000000000`"
        }
      }
    },
    "io.kestra.plugin.fs.http.AbstractHttp-SslOptions": {
      "type": "object",
      "properties": {
        "insecureTrustAllCertificates": {
          "type": "boolean",
          "title": "Whether the client should disable checking of the remote SSL certificate.",
          "$dynamic": false,
          "markdownDescription": "Only applies if no trust store is configured. Note: This makes the SSL connection insecure, and should only be used for testing. If you are using a self-signed certificate, set up a trust store instead."
        }
      }
    },
    "io.kestra.plugin.fs.http.Download-1": {
      "type": "object",
      "properties": {
        "body": { "type": "string", "title": "The full body as string", "$dynamic": true },
        "contentType": { "type": "string", "title": "The request content type", "$dynamic": true },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "formData": { "type": "object", "title": "The form data to be send", "$dynamic": true },
        "headers": {
          "type": "object",
          "title": "The header to pass to current request",
          "$dynamic": true
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "method": {
          "type": "string",
          "enum": [
            "OPTIONS",
            "GET",
            "HEAD",
            "POST",
            "PUT",
            "DELETE",
            "TRACE",
            "CONNECT",
            "PATCH",
            "CUSTOM"
          ],
          "title": "The http method to use",
          "default": "GET",
          "$dynamic": false,
          "markdownDescription": "Default value is : `GET`"
        },
        "options": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.plugin.fs.http.AbstractHttp-RequestOptions" },
            { "title": "The http request options" }
          ]
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "sslOptions": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.plugin.fs.http.AbstractHttp-SslOptions" },
            { "title": "The ssl request options" }
          ]
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "uri": {
          "type": "string",
          "title": "The fully-qualified URIs that point to destination http server",
          "$dynamic": true
        }
      },
      "required": ["id", "type"],
      "title": "Download file from http server",
      "markdownDescription": "This task connects to http server and copy file to kestra file storage##### Examples\n> \n```yaml\nheaders: \n  user-agent: \"kestra-io\"\nuri: \"https://server.com/file\"\n```"
    },
    "io.kestra.plugin.fs.http.Download-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.fs.http.Download-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.fs.http.Download" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nheaders: \n  user-agent: \"kestra-io\"\nuri: \"https://server.com/file\"\n```"
    },
    "io.kestra.plugin.fs.http.Request-1": {
      "type": "object",
      "properties": {
        "allowFailed": {
          "type": "boolean",
          "title": "If true, allow failed response code (response code >=400)",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "body": { "type": "string", "title": "The full body as string", "$dynamic": true },
        "contentType": { "type": "string", "title": "The request content type", "$dynamic": true },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "formData": { "type": "object", "title": "The form data to be send", "$dynamic": true },
        "headers": {
          "type": "object",
          "title": "The header to pass to current request",
          "$dynamic": true
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "method": {
          "type": "string",
          "enum": [
            "OPTIONS",
            "GET",
            "HEAD",
            "POST",
            "PUT",
            "DELETE",
            "TRACE",
            "CONNECT",
            "PATCH",
            "CUSTOM"
          ],
          "title": "The http method to use",
          "default": "GET",
          "$dynamic": false,
          "markdownDescription": "Default value is : `GET`"
        },
        "options": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.plugin.fs.http.AbstractHttp-RequestOptions" },
            { "title": "The http request options" }
          ]
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "sslOptions": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.plugin.fs.http.AbstractHttp-SslOptions" },
            { "title": "The ssl request options" }
          ]
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "uri": {
          "type": "string",
          "title": "The fully-qualified URIs that point to destination http server",
          "$dynamic": true
        }
      },
      "required": ["id", "type"],
      "title": "Request an http server",
      "markdownDescription": "This task connects to http server, request the provided url and store the response as output##### Examples\n> Post request to a webserver\n```yaml\nuri: \"https://server.com/login\"\nheaders: \n  user-agent: \"kestra-io\"\nmethod: \"POST\"\nformData:\n  user: \"user\"\n  password: \"pass\"\n```\n\n> Post a multipart request to a webserver\n```yaml\nuri: \"https://server.com/upload\"\nheaders: \n  user-agent: \"kestra-io\"\nmethod: \"POST\"\ncontentType: \"multipart/form-data\"\nformData:\n  user: \"{{ inputs.file }}\"\n```"
    },
    "io.kestra.plugin.fs.http.Request-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.fs.http.Request-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.fs.http.Request" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Post request to a webserver\n```yaml\nuri: \"https://server.com/login\"\nheaders: \n  user-agent: \"kestra-io\"\nmethod: \"POST\"\nformData:\n  user: \"user\"\n  password: \"pass\"\n```\n\n> Post a multipart request to a webserver\n```yaml\nuri: \"https://server.com/upload\"\nheaders: \n  user-agent: \"kestra-io\"\nmethod: \"POST\"\ncontentType: \"multipart/form-data\"\nformData:\n  user: \"{{ inputs.file }}\"\n```"
    },
    "io.kestra.plugin.fs.sftp.Delete-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "errorOnMissing": {
          "type": "boolean",
          "title": "raise an error if the file is not found",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "host": { "type": "string", "title": "Hostname of the remote server", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "keyfile": {
          "type": "string",
          "title": "Private keyfile to login on the source server with ssh",
          "$dynamic": true
        },
        "passphrase": { "type": "string", "title": "Passphrase of the ssh key", "$dynamic": true },
        "password": {
          "type": "string",
          "title": "Password on the remote server",
          "$dynamic": true
        },
        "port": {
          "type": "string",
          "title": "Port of the remote server",
          "default": "22",
          "$dynamic": true,
          "markdownDescription": "Default value is : `22`"
        },
        "proxyHost": { "type": "string", "title": "SFTP proxy host", "$dynamic": true },
        "proxyPassword": { "type": "string", "title": "SFTP proxy password", "$dynamic": true },
        "proxyPort": { "type": "string", "title": "SFTP proxy port", "$dynamic": true },
        "proxyType": { "type": "string", "title": "SFTP proxy type", "$dynamic": true },
        "proxyUser": { "type": "string", "title": "SFTP proxy user", "$dynamic": true },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "rootDir": {
          "type": "boolean",
          "title": "Is path is relative to root dir",
          "default": true,
          "$dynamic": true,
          "markdownDescription": "Default value is : `true`"
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "uri": { "type": "string", "title": "The file to delete" },
        "username": { "type": "string", "title": "Username on the remote server", "$dynamic": true }
      },
      "required": ["host", "id", "type"],
      "title": "Delete a file to a SFTP server.",
      "markdownDescription": "##### Examples\n> \n```yaml\nhost: localhost\nport: 22\nusername: foo\npassword: pass\nuri: \"/upload/dir1/file.txt\"\n```"
    },
    "io.kestra.plugin.fs.sftp.Delete-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Delete-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.fs.sftp.Delete" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nhost: localhost\nport: 22\nusername: foo\npassword: pass\nuri: \"/upload/dir1/file.txt\"\n```"
    },
    "io.kestra.plugin.fs.sftp.Download-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "from": {
          "type": "string",
          "title": "The fully-qualified URIs that point to destination path",
          "$dynamic": true
        },
        "host": { "type": "string", "title": "Hostname of the remote server", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "keyfile": {
          "type": "string",
          "title": "Private keyfile to login on the source server with ssh",
          "$dynamic": true
        },
        "passphrase": { "type": "string", "title": "Passphrase of the ssh key", "$dynamic": true },
        "password": {
          "type": "string",
          "title": "Password on the remote server",
          "$dynamic": true
        },
        "port": {
          "type": "string",
          "title": "Port of the remote server",
          "default": "22",
          "$dynamic": true,
          "markdownDescription": "Default value is : `22`"
        },
        "proxyHost": { "type": "string", "title": "SFTP proxy host", "$dynamic": true },
        "proxyPassword": { "type": "string", "title": "SFTP proxy password", "$dynamic": true },
        "proxyPort": { "type": "string", "title": "SFTP proxy port", "$dynamic": true },
        "proxyType": { "type": "string", "title": "SFTP proxy type", "$dynamic": true },
        "proxyUser": { "type": "string", "title": "SFTP proxy user", "$dynamic": true },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "rootDir": {
          "type": "boolean",
          "title": "Is path is relative to root dir",
          "default": true,
          "$dynamic": true,
          "markdownDescription": "Default value is : `true`"
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "username": { "type": "string", "title": "Username on the remote server", "$dynamic": true }
      },
      "required": ["host", "id", "type"],
      "title": "Download file from SFTP server",
      "markdownDescription": "##### Examples\n> \n```yaml\nhost: localhost\nport: 22\nusername: foo\npassword: pass\nfrom: \"/in/file.txt\"\n```"
    },
    "io.kestra.plugin.fs.sftp.Download-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Download-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.fs.sftp.Download" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nhost: localhost\nport: 22\nusername: foo\npassword: pass\nfrom: \"/in/file.txt\"\n```"
    },
    "io.kestra.plugin.fs.sftp.Downloads-1": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "enum": ["MOVE", "DELETE"],
          "title": "The action to do on find files",
          "$dynamic": true
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "from": { "type": "string", "title": "The directory to list", "$dynamic": true },
        "host": { "type": "string", "title": "Hostname of the remote server", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "keyfile": {
          "type": "string",
          "title": "Private keyfile to login on the source server with ssh",
          "$dynamic": true
        },
        "moveDirectory": {
          "type": "string",
          "title": "The destination directory in case off `MOVE` ",
          "$dynamic": true
        },
        "passphrase": { "type": "string", "title": "Passphrase of the ssh key", "$dynamic": true },
        "password": {
          "type": "string",
          "title": "Password on the remote server",
          "$dynamic": true
        },
        "port": {
          "type": "string",
          "title": "Port of the remote server",
          "default": "22",
          "$dynamic": true,
          "markdownDescription": "Default value is : `22`"
        },
        "proxyHost": { "type": "string", "title": "SFTP proxy host", "$dynamic": true },
        "proxyPassword": { "type": "string", "title": "SFTP proxy password", "$dynamic": true },
        "proxyPort": { "type": "string", "title": "SFTP proxy port", "$dynamic": true },
        "proxyType": { "type": "string", "title": "SFTP proxy type", "$dynamic": true },
        "proxyUser": { "type": "string", "title": "SFTP proxy user", "$dynamic": true },
        "regExp": {
          "type": "string",
          "title": "A regexp to filter on full path",
          "$dynamic": true
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "rootDir": {
          "type": "boolean",
          "title": "Is path is relative to root dir",
          "default": true,
          "$dynamic": true,
          "markdownDescription": "Default value is : `true`"
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "username": { "type": "string", "title": "Username on the remote server", "$dynamic": true }
      },
      "required": ["from", "host", "id", "type"],
      "title": "Download multiple files from SFTP server",
      "markdownDescription": "##### Examples\n> Download a list of files and move it to an archive folders\n```yaml\nhost: localhost\nport: 22\nusername: foo\npassword: pass\nfrom: \"/in/\"\ninterval: PT10S\naction: MOVE\nmoveDirectory: \"/archive/\"\n```"
    },
    "io.kestra.plugin.fs.sftp.Downloads-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Downloads-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.fs.sftp.Downloads" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Download a list of files and move it to an archive folders\n```yaml\nhost: localhost\nport: 22\nusername: foo\npassword: pass\nfrom: \"/in/\"\ninterval: PT10S\naction: MOVE\nmoveDirectory: \"/archive/\"\n```"
    },
    "io.kestra.plugin.fs.sftp.List-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "from": {
          "type": "string",
          "title": "The fully-qualified URIs that point to path",
          "$dynamic": true
        },
        "host": { "type": "string", "title": "Hostname of the remote server", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "keyfile": {
          "type": "string",
          "title": "Private keyfile to login on the source server with ssh",
          "$dynamic": true
        },
        "passphrase": { "type": "string", "title": "Passphrase of the ssh key", "$dynamic": true },
        "password": {
          "type": "string",
          "title": "Password on the remote server",
          "$dynamic": true
        },
        "port": {
          "type": "string",
          "title": "Port of the remote server",
          "default": "22",
          "$dynamic": true,
          "markdownDescription": "Default value is : `22`"
        },
        "proxyHost": { "type": "string", "title": "SFTP proxy host", "$dynamic": true },
        "proxyPassword": { "type": "string", "title": "SFTP proxy password", "$dynamic": true },
        "proxyPort": { "type": "string", "title": "SFTP proxy port", "$dynamic": true },
        "proxyType": { "type": "string", "title": "SFTP proxy type", "$dynamic": true },
        "proxyUser": { "type": "string", "title": "SFTP proxy user", "$dynamic": true },
        "regExp": {
          "type": "string",
          "title": "A regexp to filter on full path",
          "$dynamic": true
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "rootDir": {
          "type": "boolean",
          "title": "Is path is relative to root dir",
          "default": true,
          "$dynamic": true,
          "markdownDescription": "Default value is : `true`"
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "username": { "type": "string", "title": "Username on the remote server", "$dynamic": true }
      },
      "required": ["host", "id", "type"],
      "title": "List files from a SFTP server directory",
      "markdownDescription": "##### Examples\n> \n```yaml\nhost: localhost\nport: 22\nusername: foo\npassword: pass\nfrom: \"/upload/dir1/\"\nregExp: \".*\\/dir1\\/.*\\.(yaml|yml)\"\n```"
    },
    "io.kestra.plugin.fs.sftp.List-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.List-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.fs.sftp.List" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nhost: localhost\nport: 22\nusername: foo\npassword: pass\nfrom: \"/upload/dir1/\"\nregExp: \".*\\/dir1\\/.*\\.(yaml|yml)\"\n```"
    },
    "io.kestra.plugin.fs.sftp.Move-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "from": { "type": "string", "title": "The file to move", "$dynamic": true },
        "host": { "type": "string", "title": "Hostname of the remote server", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "keyfile": {
          "type": "string",
          "title": "Private keyfile to login on the source server with ssh",
          "$dynamic": true
        },
        "passphrase": { "type": "string", "title": "Passphrase of the ssh key", "$dynamic": true },
        "password": {
          "type": "string",
          "title": "Password on the remote server",
          "$dynamic": true
        },
        "port": {
          "type": "string",
          "title": "Port of the remote server",
          "default": "22",
          "$dynamic": true,
          "markdownDescription": "Default value is : `22`"
        },
        "proxyHost": { "type": "string", "title": "SFTP proxy host", "$dynamic": true },
        "proxyPassword": { "type": "string", "title": "SFTP proxy password", "$dynamic": true },
        "proxyPort": { "type": "string", "title": "SFTP proxy port", "$dynamic": true },
        "proxyType": { "type": "string", "title": "SFTP proxy type", "$dynamic": true },
        "proxyUser": { "type": "string", "title": "SFTP proxy user", "$dynamic": true },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "rootDir": {
          "type": "boolean",
          "title": "Is path is relative to root dir",
          "default": true,
          "$dynamic": true,
          "markdownDescription": "Default value is : `true`"
        },
        "timeout": { "type": "string", "format": "duration" },
        "to": {
          "type": "string",
          "title": "The destination path to move",
          "$dynamic": true,
          "markdownDescription": "The full destination path (with filename optionally)\nIf end with a `/`, the destination is considered as a directory and filename will be happen\nIf the destFile exists, it is deleted first."
        },
        "type": { "type": "string", "minLength": 1 },
        "username": { "type": "string", "title": "Username on the remote server", "$dynamic": true }
      },
      "required": ["host", "id", "type"],
      "title": "Move a file to a SFTP server.",
      "markdownDescription": "If the destination directory doesn't exist, it will be created##### Examples\n> \n```yaml\nhost: localhost\nport: 22\nusername: foo\npassword: pass\nfrom: \"/upload/dir1/file.txt\"\nto: \"/upload/dir2/file.txt\"\n```"
    },
    "io.kestra.plugin.fs.sftp.Move-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Move-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.fs.sftp.Move" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nhost: localhost\nport: 22\nusername: foo\npassword: pass\nfrom: \"/upload/dir1/file.txt\"\nto: \"/upload/dir2/file.txt\"\n```"
    },
    "io.kestra.plugin.fs.sftp.Trigger-1": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "enum": ["MOVE", "DELETE"],
          "title": "The action to do on find files",
          "$dynamic": true
        },
        "conditions": {
          "title": "List of Conditions in order to limit the flow trigger.",
          "type": "array",
          "items": {
            "anyOf": [
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.NotCondition-2" },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionStatusCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.DateTimeBetweenCondition-2"
              },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.FlowCondition-2" },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionFlowCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.HasRetryAttemptCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.DayWeekInMonthCondition-2"
              },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.DayWeekCondition-2" },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.WeekendCondition-2" },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionNamespaceCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.VariableCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.FlowNamespaceCondition-2"
              },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.OrCondition-2" },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.MultipleCondition-2" }
            ]
          }
        },
        "description": { "type": "string" },
        "disabled": { "type": "boolean" },
        "from": { "type": "string", "title": "The directory to list", "$dynamic": true },
        "host": { "type": "string", "title": "Hostname of the remote server", "$dynamic": true },
        "id": {
          "type": "string",
          "title": "A unique id for the whole flow",
          "minLength": 1,
          "pattern": "[a-zA-Z0-9_-]+"
        },
        "interval": {
          "type": "string",
          "format": "duration",
          "title": "The interval between test of triggers",
          "$dynamic": false
        },
        "keyfile": {
          "type": "string",
          "title": "Private keyfile to login on the source server with ssh",
          "$dynamic": true
        },
        "moveDirectory": {
          "type": "string",
          "title": "The destination directory in case off `MOVE` ",
          "$dynamic": true
        },
        "passphrase": { "type": "string", "title": "Passphrase of the ssh key", "$dynamic": true },
        "password": {
          "type": "string",
          "title": "Password on the remote server",
          "$dynamic": true
        },
        "port": {
          "type": "string",
          "title": "Port of the remote server",
          "default": "22",
          "$dynamic": true,
          "markdownDescription": "Default value is : `22`"
        },
        "proxyHost": { "type": "string", "title": "SFTP proxy host", "$dynamic": true },
        "proxyPassword": { "type": "string", "title": "SFTP proxy password", "$dynamic": true },
        "proxyPort": { "type": "string", "title": "SFTP proxy port", "$dynamic": true },
        "proxyType": { "type": "string", "title": "SFTP proxy type", "$dynamic": true },
        "proxyUser": { "type": "string", "title": "SFTP proxy user", "$dynamic": true },
        "regExp": {
          "type": "string",
          "title": "A regexp to filter on full path",
          "$dynamic": true
        },
        "rootDir": {
          "type": "boolean",
          "title": "Is path is relative to root dir",
          "default": true,
          "$dynamic": true,
          "markdownDescription": "Default value is : `true`"
        },
        "type": {
          "type": "string",
          "title": "The class name for this current trigger",
          "minLength": 1
        },
        "username": { "type": "string", "title": "Username on the remote server", "$dynamic": true }
      },
      "required": ["action", "disabled", "from", "host", "id", "type"],
      "title": "Wait for files on a SFTP server",
      "markdownDescription": "##### Examples\n> Wait for a list of file on a SFTP server and iterate through the files\n```yaml\nid: gcs-listen\nnamespace: io.kestra.tests\n\ntasks:\n  - id: each\n    type: io.kestra.core.tasks.flows.EachSequential\n    tasks:\n      - id: return\n        type: io.kestra.core.tasks.debugs.Return\n        format: \"{{taskrun.value}}\"\n    value: \"{{ trigger.files | jq('.path') }}\"\n\ntriggers:\n  - id: watch\n    type: io.kestra.plugin.fs.sftp.Trigger\n    host: localhost\n    port: 6622\n    username: foo\n    password: pass\n    from: \"/in/\"\n    interval: PT10S\n    action: MOVE\n    moveDirectory: \"/archive/\"\n```"
    },
    "io.kestra.plugin.fs.sftp.Trigger-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Trigger-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.fs.sftp.Trigger" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Wait for a list of file on a SFTP server and iterate through the files\n```yaml\nid: gcs-listen\nnamespace: io.kestra.tests\n\ntasks:\n  - id: each\n    type: io.kestra.core.tasks.flows.EachSequential\n    tasks:\n      - id: return\n        type: io.kestra.core.tasks.debugs.Return\n        format: \"{{taskrun.value}}\"\n    value: \"{{ trigger.files | jq('.path') }}\"\n\ntriggers:\n  - id: watch\n    type: io.kestra.plugin.fs.sftp.Trigger\n    host: localhost\n    port: 6622\n    username: foo\n    password: pass\n    from: \"/in/\"\n    interval: PT10S\n    action: MOVE\n    moveDirectory: \"/archive/\"\n```"
    },
    "io.kestra.plugin.fs.sftp.Upload-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "from": { "type": "string", "title": "The file path to copy", "$dynamic": true },
        "host": { "type": "string", "title": "Hostname of the remote server", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "keyfile": {
          "type": "string",
          "title": "Private keyfile to login on the source server with ssh",
          "$dynamic": true
        },
        "passphrase": { "type": "string", "title": "Passphrase of the ssh key", "$dynamic": true },
        "password": {
          "type": "string",
          "title": "Password on the remote server",
          "$dynamic": true
        },
        "port": {
          "type": "string",
          "title": "Port of the remote server",
          "default": "22",
          "$dynamic": true,
          "markdownDescription": "Default value is : `22`"
        },
        "proxyHost": { "type": "string", "title": "SFTP proxy host", "$dynamic": true },
        "proxyPassword": { "type": "string", "title": "SFTP proxy password", "$dynamic": true },
        "proxyPort": { "type": "string", "title": "SFTP proxy port", "$dynamic": true },
        "proxyType": { "type": "string", "title": "SFTP proxy type", "$dynamic": true },
        "proxyUser": { "type": "string", "title": "SFTP proxy user", "$dynamic": true },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "rootDir": {
          "type": "boolean",
          "title": "Is path is relative to root dir",
          "default": true,
          "$dynamic": true,
          "markdownDescription": "Default value is : `true`"
        },
        "timeout": { "type": "string", "format": "duration" },
        "to": { "type": "string", "title": "The destination path", "$dynamic": true },
        "type": { "type": "string", "minLength": 1 },
        "username": { "type": "string", "title": "Username on the remote server", "$dynamic": true }
      },
      "required": ["host", "id", "type"],
      "title": "Upload a file to a sftp server",
      "markdownDescription": "##### Examples\n> \n```yaml\nhost: localhost\nport: 22\nusername: foo\npassword: pass\nfrom: \"{{ outputs.taskid.uri }}\"\nto: \"/upload/dir2/file.txt\"\n```"
    },
    "io.kestra.plugin.fs.sftp.Upload-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.fs.sftp.Upload-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.fs.sftp.Upload" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nhost: localhost\nport: 22\nusername: foo\npassword: pass\nfrom: \"{{ outputs.taskid.uri }}\"\nto: \"/upload/dir2/file.txt\"\n```"
    },
    "io.kestra.plugin.gcp.auth.OauthAccessToken-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "projectId": { "type": "string", "title": "The GCP project id", "$dynamic": true },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/cloud-platform"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/cloud-platform`\n\nDefault value is : `- https://www.googleapis.com/auth/cloud-platform`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["id", "type"],
      "title": "Fetch an OAuth access token."
    },
    "io.kestra.plugin.gcp.auth.OauthAccessToken-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.gcp.auth.OauthAccessToken-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.gcp.auth.OauthAccessToken" } },
          "required": ["type"]
        }
      ]
    },
    "io.kestra.plugin.gcp.bigquery.AbstractLoad-AvroOptions": {
      "type": "object",
      "properties": {
        "useAvroLogicalTypes": {
          "type": "boolean",
          "title": "If Format option is set to AVRO, you can interpret logical types into their corresponding types (such as TIMESTAMP) instead of only using their raw types (such as INTEGER)",
          "$dynamic": false,
          "markdownDescription": "The value may be null."
        }
      }
    },
    "io.kestra.plugin.gcp.bigquery.AbstractLoad-CsvOptions": {
      "type": "object",
      "properties": {
        "allowJaggedRows": {
          "type": "boolean",
          "title": "Whether BigQuery should accept rows that are missing trailing optional columns",
          "$dynamic": false,
          "markdownDescription": "If true, BigQuery treats missing trailing columns as null values. If {@code false}, records with missing trailing columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. By default, rows with missing trailing columns are considered bad records."
        },
        "allowQuotedNewLines": {
          "type": "boolean",
          "title": "Whether BigQuery should allow quoted data sections that contain newline characters in a CSV file",
          "$dynamic": true,
          "markdownDescription": "By default quoted newline are not allowed."
        },
        "encoding": {
          "type": "string",
          "title": "The character encoding of the data",
          "$dynamic": true,
          "markdownDescription": "The supported values are UTF-8 or ISO-8859-1. The default value is UTF-8. BigQuery decodes the data after the raw, binary data has been split using the values set in {@link #setQuote(String)} and {@link #setFieldDelimiter(String)}."
        },
        "fieldDelimiter": {
          "type": "string",
          "title": "The separator for fields in a CSV file",
          "$dynamic": true,
          "markdownDescription": "BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. BigQuery also supports the escape sequence \"\\t\" to specify a tab separator. The default value is a comma (',')."
        },
        "quote": {
          "type": "string",
          "title": "The value that is used to quote data sections in a CSV file",
          "$dynamic": true,
          "markdownDescription": "BigQuery converts the string to ISO-8859-1 encoding, and then uses the first byte of the encoded string to split the data in its raw, binary state. The default value is a double-quote ('\"'). If your data does not contain quoted sections, set the property value to an empty string. If your data contains quoted newline characters, you must also set {@link #setAllowQuotedNewLines(boolean)} property to {@code true}."
        },
        "skipLeadingRows": {
          "type": "integer",
          "title": "The number of rows at the top of a CSV file that BigQuery will skip when reading the data",
          "$dynamic": false,
          "markdownDescription": "The default value is 0. This property is useful if you have header rows in the file that should be skipped."
        }
      }
    },
    "io.kestra.plugin.gcp.bigquery.Copy-1": {
      "type": "object",
      "properties": {
        "createDisposition": {
          "type": "string",
          "enum": ["CREATE_IF_NEEDED", "CREATE_NEVER"],
          "title": "Whether the job is allowed to create tables",
          "$dynamic": false
        },
        "description": { "type": "string" },
        "destinationTable": {
          "type": "string",
          "title": "The destination table",
          "$dynamic": true,
          "markdownDescription": "If not provided a new table is created."
        },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "dryRun": {
          "type": "boolean",
          "title": "Sets whether the job has to be dry run or no.",
          "default": false,
          "$dynamic": false,
          "markdownDescription": " A valid query will return a mostly empty response with some processing statistics, while an invalid query will return the same error it would if it wasn't a dry run.\n\nDefault value is : `false`"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "jobTimeout": {
          "type": "string",
          "format": "duration",
          "title": "Job timeout.",
          "$dynamic": false,
          "markdownDescription": "If this time limit is exceeded, BigQuery may attempt to terminate the job."
        },
        "labels": {
          "type": "object",
          "title": "The labels associated with this job.",
          "$dynamic": true,
          "markdownDescription": "You can use these to organize and group your jobs. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key."
        },
        "location": {
          "type": "string",
          "title": "The geographic location where the dataset should reside",
          "$dynamic": true,
          "markdownDescription": "This property is experimental and might be subject to change or removed.\n \n See <a href=\"https://cloud.google.com/bigquery/docs/reference/v2/datasets#location\">Dataset Location</a>"
        },
        "operationType": {
          "type": "string",
          "enum": ["COPY", "SNAPSHOT", "RESTORE", "CLONE"],
          "title": "Sets the supported operation types in table copy job. ",
          "$dynamic": true,
          "markdownDescription": "* `COPY`: The source and destination table have the same table type.\n* `SNAPSHOT`: The source table type is TABLE and the destination table type is SNAPSHOT.\n* `RESTORE`: The source table type is SNAPSHOT and the destination table type is TABLE.\n* `CLONE`: The source and destination table have the same table type, but only bill for unique data."
        },
        "projectId": { "type": "string", "title": "The GCP project id", "$dynamic": true },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "retryAuto": {
          "anyOf": [
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            },
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            },
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            }
          ]
        },
        "retryMessages": {
          "title": "The message that are valid for a automatic retry.",
          "default": ["due to concurrent update", "Retrying the job may solve the problem"],
          "$dynamic": true,
          "markdownDescription": "Message is tested as a substring of the full message and case insensitive\n\nDefault value is : `- due to concurrent update\n- Retrying the job may solve the problem`\n\nDefault value is : `- due to concurrent update\n- Retrying the job may solve the problem`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "retryReasons": {
          "title": "The reason that are valid for a automatic retry.",
          "default": ["rateLimitExceeded", "jobBackendError", "internalError", "jobInternalError"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- rateLimitExceeded\n- jobBackendError\n- internalError\n- jobInternalError`\n\nDefault value is : `- rateLimitExceeded\n- jobBackendError\n- internalError\n- jobInternalError`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/cloud-platform"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/cloud-platform`\n\nDefault value is : `- https://www.googleapis.com/auth/cloud-platform`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "sourceTables": {
          "title": "The source tables",
          "$dynamic": true,
          "markdownDescription": "Can be table or partitions.",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "writeDisposition": {
          "type": "string",
          "enum": ["WRITE_TRUNCATE", "WRITE_APPEND", "WRITE_EMPTY"],
          "title": "The action that should occur if the destination table already exists",
          "$dynamic": false
        }
      },
      "required": ["destinationTable", "id", "operationType", "sourceTables", "type"],
      "title": "Copy a BigQuery table or partition to other one",
      "markdownDescription": "##### Examples\n> \n```yaml\nsourceTables:\n- \"my_project.my_dataset.my_table$20130908\"\ndestinationTable: \"my_project.my_dataset.my_table\"\n```"
    },
    "io.kestra.plugin.gcp.bigquery.Copy-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Copy-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.gcp.bigquery.Copy" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nsourceTables:\n- \"my_project.my_dataset.my_table$20130908\"\ndestinationTable: \"my_project.my_dataset.my_table\"\n```"
    },
    "io.kestra.plugin.gcp.bigquery.CopyPartitions-1": {
      "type": "object",
      "properties": {
        "createDisposition": {
          "type": "string",
          "enum": ["CREATE_IF_NEEDED", "CREATE_NEVER"],
          "title": "Whether the job is allowed to create tables",
          "$dynamic": false
        },
        "dataset": { "type": "string", "title": "The dataset's user-defined id", "$dynamic": true },
        "description": { "type": "string" },
        "destinationTable": {
          "type": "string",
          "title": "The table where to put query results",
          "$dynamic": true,
          "markdownDescription": "If not provided a new table is created."
        },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "dryRun": {
          "type": "boolean",
          "title": "Sets whether the job has to be dry run or no.",
          "default": false,
          "$dynamic": false,
          "markdownDescription": " A valid query will return a mostly empty response with some processing statistics, while an invalid query will return the same error it would if it wasn't a dry run.\n\nDefault value is : `false`"
        },
        "from": {
          "type": "string",
          "title": "The inclusive starting date or integer",
          "$dynamic": true,
          "markdownDescription": "If the partition :- is a numeric range, must be a valid integer\n- is a date, must a valid datetime like `{{ now() }}`"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "jobTimeout": {
          "type": "string",
          "format": "duration",
          "title": "Job timeout.",
          "$dynamic": false,
          "markdownDescription": "If this time limit is exceeded, BigQuery may attempt to terminate the job."
        },
        "labels": {
          "type": "object",
          "title": "The labels associated with this job.",
          "$dynamic": true,
          "markdownDescription": "You can use these to organize and group your jobs. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key."
        },
        "location": {
          "type": "string",
          "title": "The geographic location where the dataset should reside",
          "$dynamic": true,
          "markdownDescription": "This property is experimental and might be subject to change or removed.\n \n See <a href=\"https://cloud.google.com/bigquery/docs/reference/v2/datasets#location\">Dataset Location</a>"
        },
        "partitionType": {
          "type": "string",
          "enum": ["DAY", "HOUR", "MONTH", "YEAR", "RANGE"],
          "title": "The partition type of the table",
          "$dynamic": true
        },
        "projectId": { "type": "string", "title": "The GCP project id", "$dynamic": true },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "retryAuto": {
          "anyOf": [
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            },
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            },
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            }
          ]
        },
        "retryMessages": {
          "title": "The message that are valid for a automatic retry.",
          "default": ["due to concurrent update", "Retrying the job may solve the problem"],
          "$dynamic": true,
          "markdownDescription": "Message is tested as a substring of the full message and case insensitive\n\nDefault value is : `- due to concurrent update\n- Retrying the job may solve the problem`\n\nDefault value is : `- due to concurrent update\n- Retrying the job may solve the problem`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "retryReasons": {
          "title": "The reason that are valid for a automatic retry.",
          "default": ["rateLimitExceeded", "jobBackendError", "internalError", "jobInternalError"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- rateLimitExceeded\n- jobBackendError\n- internalError\n- jobInternalError`\n\nDefault value is : `- rateLimitExceeded\n- jobBackendError\n- internalError\n- jobInternalError`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/cloud-platform"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/cloud-platform`\n\nDefault value is : `- https://www.googleapis.com/auth/cloud-platform`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "table": { "type": "string", "title": "The table user-defined id", "$dynamic": true },
        "timeout": { "type": "string", "format": "duration" },
        "to": {
          "type": "string",
          "title": "The inclusive ending date or integer",
          "$dynamic": true,
          "markdownDescription": "If the partition :- is a numeric range, must be a valid integer\n- is a date, must a valid datetime like `{{ now() }}`"
        },
        "type": { "type": "string", "minLength": 1 },
        "writeDisposition": {
          "type": "string",
          "enum": ["WRITE_TRUNCATE", "WRITE_APPEND", "WRITE_EMPTY"],
          "title": "The action that should occur if the destination table already exists",
          "$dynamic": false
        }
      },
      "required": ["dataset", "from", "id", "partitionType", "table", "to", "type"],
      "title": "Copy partitions between interval to another table ",
      "markdownDescription": "##### Examples\n> \n```yaml\nprojectId: my-project\ndataset: my-dataset\ntable: my-table\ndestinationTable: my-dest-table\npartitionType: DAY\nfrom: \"{{ now() | dateAdd(-30, 'DAYS') }}\"\nto: \"{{ now() | dateAdd(-7, 'DAYS') }}\"\n```"
    },
    "io.kestra.plugin.gcp.bigquery.CopyPartitions-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CopyPartitions-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.gcp.bigquery.CopyPartitions" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nprojectId: my-project\ndataset: my-dataset\ntable: my-table\ndestinationTable: my-dest-table\npartitionType: DAY\nfrom: \"{{ now() | dateAdd(-30, 'DAYS') }}\"\nto: \"{{ now() | dateAdd(-7, 'DAYS') }}\"\n```"
    },
    "io.kestra.plugin.gcp.bigquery.CreateDataset-1": {
      "type": "object",
      "properties": {
        "acl": {
          "title": "The dataset's access control configuration",
          "type": "array",
          "items": { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.models.AccessControl" }
        },
        "defaultEncryptionConfiguration": {
          "allOf": [
            { "$ref": "#/definitions/com.google.cloud.bigquery.EncryptionConfiguration" },
            {
              "title": "The default encryption key for all tables in the dataset",
              "markdownDescription": "Once this property is set, all newly-created partitioned tables in the dataset will have encryption key set to this value, unless table creation request (or query) overrides the key."
            }
          ]
        },
        "defaultPartitionExpirationMs": {
          "type": "integer",
          "title": "[Optional] The default partition expiration time for all partitioned tables in the dataset, in milliseconds",
          "markdownDescription": " Once this property is set, all newly-created partitioned tables in the  dataset will has an expirationMs property in the timePartitioning settings set to this value. Changing the value only affect new tables, not existing ones. The storage in a partition will have an expiration time of its partition time plus this value. Setting this property overrides the use of defaultTableExpirationMs for partitioned tables: only one of defaultTableExpirationMs and defaultPartitionExpirationMs will be used for any new partitioned table. If you provide an explicit timePartitioning.expirationMs when creating or updating a partitioned table, that value takes precedence over the default partition expiration time indicated by this property. The value may be null."
        },
        "defaultTableLifetime": {
          "type": "integer",
          "title": "The default lifetime of all tables in the dataset, in milliseconds",
          "markdownDescription": "The minimum value is 3600000 milliseconds (one hour). Once this property is set, all newly-created tables in the dataset will have an expirationTime property set to the creation time plus the value in this property, and changing the value will only affect new tables, not existing ones. When the expirationTime for a given table is reached, that table will be deleted automatically. If a table's expirationTime is modified or removed before the table expires, or if you provide an explicit expirationTime when creating a table, that value takes precedence over the default expiration time indicated by this property. This property is experimental and might be subject to change or removed."
        },
        "description": {
          "type": "string",
          "title": "Description",
          "$dynamic": true,
          "markdownDescription": "A user-friendly description for the dataset."
        },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "friendlyName": {
          "type": "string",
          "title": "A user-friendly name for the dataset",
          "$dynamic": true
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "ifExists": {
          "type": "string",
          "enum": ["ERROR", "UPDATE", "SKIP"],
          "title": "Policy to apply if a dataset already exists.",
          "default": "ERROR",
          "markdownDescription": "Default value is : `ERROR`"
        },
        "labels": { "type": "object", "title": "The dataset's labels", "$dynamic": true },
        "location": {
          "type": "string",
          "title": "The geographic location where the dataset should reside",
          "$dynamic": true,
          "markdownDescription": "This property is experimental and might be subject to change or removed. \n See <a href=\"https://cloud.google.com/bigquery/docs/reference/v2/datasets#location\">Dataset      Location</a>"
        },
        "name": { "type": "string", "title": "The dataset's user-defined id", "$dynamic": true },
        "projectId": { "type": "string", "title": "The GCP project id", "$dynamic": true },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "retryAuto": {
          "anyOf": [
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            },
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            },
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            }
          ]
        },
        "retryMessages": {
          "title": "The message that are valid for a automatic retry.",
          "default": ["due to concurrent update", "Retrying the job may solve the problem"],
          "$dynamic": true,
          "markdownDescription": "Message is tested as a substring of the full message and case insensitive\n\nDefault value is : `- due to concurrent update\n- Retrying the job may solve the problem`\n\nDefault value is : `- due to concurrent update\n- Retrying the job may solve the problem`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "retryReasons": {
          "title": "The reason that are valid for a automatic retry.",
          "default": ["rateLimitExceeded", "jobBackendError", "internalError", "jobInternalError"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- rateLimitExceeded\n- jobBackendError\n- internalError\n- jobInternalError`\n\nDefault value is : `- rateLimitExceeded\n- jobBackendError\n- internalError\n- jobInternalError`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/cloud-platform"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/cloud-platform`\n\nDefault value is : `- https://www.googleapis.com/auth/cloud-platform`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["id", "name", "type"],
      "title": "Create a dataset or update if it already exists.",
      "markdownDescription": "##### Examples\n> Create a dataset if not exits\n```yaml\nname: \"my_dataset\"\nlocation: \"EU\"\nifExists: \"SKIP\"\n```"
    },
    "io.kestra.plugin.gcp.bigquery.CreateDataset-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateDataset-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.gcp.bigquery.CreateDataset" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Create a dataset if not exits\n```yaml\nname: \"my_dataset\"\nlocation: \"EU\"\nifExists: \"SKIP\"\n```"
    },
    "io.kestra.plugin.gcp.bigquery.CreateTable-1": {
      "type": "object",
      "properties": {
        "dataset": { "type": "string", "title": "The dataset's user-defined id", "$dynamic": true },
        "description": {
          "type": "string",
          "title": "The user-friendly description for the table",
          "$dynamic": true
        },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "encryptionConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.models.EncryptionConfiguration"
            },
            { "title": "The encryption configuration" }
          ]
        },
        "expirationDuration": {
          "type": "string",
          "format": "duration",
          "title": "Sets the duration since now when this table expires.",
          "markdownDescription": "If not present, the table will persist indefinitely. Expired tables will be deleted and their storage reclaimed."
        },
        "friendlyName": {
          "type": "string",
          "title": "The user-friendly name for the table",
          "$dynamic": true
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "labels": {
          "type": "object",
          "title": "Return a map for labels applied to the table",
          "$dynamic": true
        },
        "location": {
          "type": "string",
          "title": "The geographic location where the dataset should reside",
          "$dynamic": true,
          "markdownDescription": "This property is experimental and might be subject to change or removed.\n \n See <a href=\"https://cloud.google.com/bigquery/docs/reference/v2/datasets#location\">Dataset Location</a>"
        },
        "projectId": { "type": "string", "title": "The GCP project id", "$dynamic": true },
        "requirePartitionFilter": {
          "type": "boolean",
          "title": "Return true if a partition filter (that can be used for partition elimination) is required for queries over this table."
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "retryAuto": {
          "anyOf": [
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            },
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            },
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            }
          ]
        },
        "retryMessages": {
          "title": "The message that are valid for a automatic retry.",
          "default": ["due to concurrent update", "Retrying the job may solve the problem"],
          "$dynamic": true,
          "markdownDescription": "Message is tested as a substring of the full message and case insensitive\n\nDefault value is : `- due to concurrent update\n- Retrying the job may solve the problem`\n\nDefault value is : `- due to concurrent update\n- Retrying the job may solve the problem`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "retryReasons": {
          "title": "The reason that are valid for a automatic retry.",
          "default": ["rateLimitExceeded", "jobBackendError", "internalError", "jobInternalError"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- rateLimitExceeded\n- jobBackendError\n- internalError\n- jobInternalError`\n\nDefault value is : `- rateLimitExceeded\n- jobBackendError\n- internalError\n- jobInternalError`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/cloud-platform"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/cloud-platform`\n\nDefault value is : `- https://www.googleapis.com/auth/cloud-platform`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "table": { "type": "string", "title": "The table user-defined id", "$dynamic": true },
        "tableDefinition": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.models.TableDefinition" },
            { "title": "The table definition" }
          ]
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["dataset", "id", "table", "type"],
      "title": "Create a table",
      "markdownDescription": "##### Examples\n> \n```yaml\nprojectId: my-project\ndataset: my-dataset\ntable: my-table\ntableDefinition:\n  type: TABLE\n  schema:\n    fields:\n    - name: id\n      type: INT64\n    - name: name\n      type: STRING\n  standardTableDefinition:\n    clustering:\n    - id\n    - name\nfriendlyName: new_table\n```"
    },
    "io.kestra.plugin.gcp.bigquery.CreateTable-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.CreateTable-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.gcp.bigquery.CreateTable" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nprojectId: my-project\ndataset: my-dataset\ntable: my-table\ntableDefinition:\n  type: TABLE\n  schema:\n    fields:\n    - name: id\n      type: INT64\n    - name: name\n      type: STRING\n  standardTableDefinition:\n    clustering:\n    - id\n    - name\nfriendlyName: new_table\n```"
    },
    "io.kestra.plugin.gcp.bigquery.DeleteDataset-1": {
      "type": "object",
      "properties": {
        "deleteContents": {
          "type": "boolean",
          "title": "Whether to delete a dataset even if non-empty",
          "markdownDescription": "If not provided, attempting to delete a non-empty dataset will result in a exception being thrown."
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "location": {
          "type": "string",
          "title": "The geographic location where the dataset should reside",
          "$dynamic": true,
          "markdownDescription": "This property is experimental and might be subject to change or removed.\n \n See <a href=\"https://cloud.google.com/bigquery/docs/reference/v2/datasets#location\">Dataset Location</a>"
        },
        "name": { "type": "string", "title": "The dataset's user-defined id", "$dynamic": true },
        "projectId": { "type": "string", "title": "The GCP project id", "$dynamic": true },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "retryAuto": {
          "anyOf": [
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            },
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            },
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            }
          ]
        },
        "retryMessages": {
          "title": "The message that are valid for a automatic retry.",
          "default": ["due to concurrent update", "Retrying the job may solve the problem"],
          "$dynamic": true,
          "markdownDescription": "Message is tested as a substring of the full message and case insensitive\n\nDefault value is : `- due to concurrent update\n- Retrying the job may solve the problem`\n\nDefault value is : `- due to concurrent update\n- Retrying the job may solve the problem`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "retryReasons": {
          "title": "The reason that are valid for a automatic retry.",
          "default": ["rateLimitExceeded", "jobBackendError", "internalError", "jobInternalError"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- rateLimitExceeded\n- jobBackendError\n- internalError\n- jobInternalError`\n\nDefault value is : `- rateLimitExceeded\n- jobBackendError\n- internalError\n- jobInternalError`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/cloud-platform"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/cloud-platform`\n\nDefault value is : `- https://www.googleapis.com/auth/cloud-platform`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["id", "name", "type"],
      "title": "Delete a dataset.",
      "markdownDescription": "##### Examples\n> Delete a dataset\n```yaml\nname: \"my-bucket\"\ndeleteContents: true\n```"
    },
    "io.kestra.plugin.gcp.bigquery.DeleteDataset-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteDataset-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.gcp.bigquery.DeleteDataset" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Delete a dataset\n```yaml\nname: \"my-bucket\"\ndeleteContents: true\n```"
    },
    "io.kestra.plugin.gcp.bigquery.DeletePartitions-1": {
      "type": "object",
      "properties": {
        "dataset": { "type": "string", "title": "The dataset's user-defined id", "$dynamic": true },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "from": {
          "type": "string",
          "title": "The inclusive starting date or integer",
          "$dynamic": true,
          "markdownDescription": "If the partition :- is a numeric range, must be a valid integer\n- is a date, must a valid datetime like `{{ now() }}`"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "location": {
          "type": "string",
          "title": "The geographic location where the dataset should reside",
          "$dynamic": true,
          "markdownDescription": "This property is experimental and might be subject to change or removed.\n \n See <a href=\"https://cloud.google.com/bigquery/docs/reference/v2/datasets#location\">Dataset Location</a>"
        },
        "partitionType": {
          "type": "string",
          "enum": ["DAY", "HOUR", "MONTH", "YEAR", "RANGE"],
          "title": "The partition type of the table",
          "$dynamic": true
        },
        "projectId": { "type": "string", "title": "The GCP project id", "$dynamic": true },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "retryAuto": {
          "anyOf": [
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            },
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            },
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            }
          ]
        },
        "retryMessages": {
          "title": "The message that are valid for a automatic retry.",
          "default": ["due to concurrent update", "Retrying the job may solve the problem"],
          "$dynamic": true,
          "markdownDescription": "Message is tested as a substring of the full message and case insensitive\n\nDefault value is : `- due to concurrent update\n- Retrying the job may solve the problem`\n\nDefault value is : `- due to concurrent update\n- Retrying the job may solve the problem`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "retryReasons": {
          "title": "The reason that are valid for a automatic retry.",
          "default": ["rateLimitExceeded", "jobBackendError", "internalError", "jobInternalError"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- rateLimitExceeded\n- jobBackendError\n- internalError\n- jobInternalError`\n\nDefault value is : `- rateLimitExceeded\n- jobBackendError\n- internalError\n- jobInternalError`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/cloud-platform"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/cloud-platform`\n\nDefault value is : `- https://www.googleapis.com/auth/cloud-platform`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "table": { "type": "string", "title": "The table user-defined id", "$dynamic": true },
        "timeout": { "type": "string", "format": "duration" },
        "to": {
          "type": "string",
          "title": "The inclusive ending date or integer",
          "$dynamic": true,
          "markdownDescription": "If the partition :- is a numeric range, must be a valid integer\n- is a date, must a valid datetime like `{{ now() }}`"
        },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["dataset", "from", "id", "partitionType", "table", "to", "type"],
      "title": "Delete partitions between interval",
      "markdownDescription": "##### Examples\n> \n```yaml\nprojectId: my-project\ndataset: my-dataset\ntable: my-table\npartitionType: DAY\nfrom: \"{{ now() | dateAdd(-30, 'DAYS') }}\"\nto: \"{{ now() | dateAdd(-7, 'DAYS') }}\"\n```"
    },
    "io.kestra.plugin.gcp.bigquery.DeletePartitions-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeletePartitions-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.gcp.bigquery.DeletePartitions" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nprojectId: my-project\ndataset: my-dataset\ntable: my-table\npartitionType: DAY\nfrom: \"{{ now() | dateAdd(-30, 'DAYS') }}\"\nto: \"{{ now() | dateAdd(-7, 'DAYS') }}\"\n```"
    },
    "io.kestra.plugin.gcp.bigquery.DeleteTable-1": {
      "type": "object",
      "properties": {
        "dataset": { "type": "string", "title": "The dataset's user-defined id", "$dynamic": true },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "location": {
          "type": "string",
          "title": "The geographic location where the dataset should reside",
          "$dynamic": true,
          "markdownDescription": "This property is experimental and might be subject to change or removed.\n \n See <a href=\"https://cloud.google.com/bigquery/docs/reference/v2/datasets#location\">Dataset Location</a>"
        },
        "projectId": { "type": "string", "title": "The GCP project id", "$dynamic": true },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "retryAuto": {
          "anyOf": [
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            },
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            },
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            }
          ]
        },
        "retryMessages": {
          "title": "The message that are valid for a automatic retry.",
          "default": ["due to concurrent update", "Retrying the job may solve the problem"],
          "$dynamic": true,
          "markdownDescription": "Message is tested as a substring of the full message and case insensitive\n\nDefault value is : `- due to concurrent update\n- Retrying the job may solve the problem`\n\nDefault value is : `- due to concurrent update\n- Retrying the job may solve the problem`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "retryReasons": {
          "title": "The reason that are valid for a automatic retry.",
          "default": ["rateLimitExceeded", "jobBackendError", "internalError", "jobInternalError"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- rateLimitExceeded\n- jobBackendError\n- internalError\n- jobInternalError`\n\nDefault value is : `- rateLimitExceeded\n- jobBackendError\n- internalError\n- jobInternalError`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/cloud-platform"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/cloud-platform`\n\nDefault value is : `- https://www.googleapis.com/auth/cloud-platform`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "table": { "type": "string", "title": "The table user-defined id", "$dynamic": true },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["dataset", "id", "table", "type"],
      "title": "Delete a table or a partition",
      "markdownDescription": "##### Examples\n> Delete a partition\n```yaml\nprojectId: my-project\ndataset: my-dataset\ntable: my-table$20130908\n```"
    },
    "io.kestra.plugin.gcp.bigquery.DeleteTable-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.DeleteTable-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.gcp.bigquery.DeleteTable" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Delete a partition\n```yaml\nprojectId: my-project\ndataset: my-dataset\ntable: my-table$20130908\n```"
    },
    "io.kestra.plugin.gcp.bigquery.ExtractToGcs-1": {
      "type": "object",
      "properties": {
        "compression": {
          "type": "string",
          "title": "the compression value to use for exported files. If not set exported files are not compressed. ",
          "$dynamic": true
        },
        "description": { "type": "string" },
        "destinationUris": {
          "title": "The list of fully-qualified Google Cloud Storage URIs (e.g. gs://bucket/path) where the extracted table should be written.",
          "$dynamic": true,
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "fieldDelimiter": {
          "type": "string",
          "title": "The delimiter to use between fields in the exported data. By default \",\" is used.",
          "$dynamic": true
        },
        "format": {
          "type": "string",
          "title": "The exported file format. If not set table is exported in CSV format. ",
          "$dynamic": true
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "jobTimeoutMs": {
          "type": "integer",
          "title": "[Optional] Job timeout in milliseconds. If this time limit is exceeded, BigQuery may attempt to terminate the job."
        },
        "labels": {
          "type": "object",
          "title": "The labels associated with this job.",
          "$dynamic": true,
          "markdownDescription": "The labels associated with this job. You can use these to organize and group your jobs. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key.\nParameters:\n    labels - labels or null for none "
        },
        "location": {
          "type": "string",
          "title": "The geographic location where the dataset should reside",
          "$dynamic": true,
          "markdownDescription": "This property is experimental and might be subject to change or removed.\n \n See <a href=\"https://cloud.google.com/bigquery/docs/reference/v2/datasets#location\">Dataset Location</a>"
        },
        "printHeader": {
          "type": "boolean",
          "title": "Whether to print out a header row in the results. By default an header is printed."
        },
        "projectId": { "type": "string", "title": "The GCP project id", "$dynamic": true },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "retryAuto": {
          "anyOf": [
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            },
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            },
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            }
          ]
        },
        "retryMessages": {
          "title": "The message that are valid for a automatic retry.",
          "default": ["due to concurrent update", "Retrying the job may solve the problem"],
          "$dynamic": true,
          "markdownDescription": "Message is tested as a substring of the full message and case insensitive\n\nDefault value is : `- due to concurrent update\n- Retrying the job may solve the problem`\n\nDefault value is : `- due to concurrent update\n- Retrying the job may solve the problem`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "retryReasons": {
          "title": "The reason that are valid for a automatic retry.",
          "default": ["rateLimitExceeded", "jobBackendError", "internalError", "jobInternalError"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- rateLimitExceeded\n- jobBackendError\n- internalError\n- jobInternalError`\n\nDefault value is : `- rateLimitExceeded\n- jobBackendError\n- internalError\n- jobInternalError`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/cloud-platform"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/cloud-platform`\n\nDefault value is : `- https://www.googleapis.com/auth/cloud-platform`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "sourceTable": { "type": "string", "title": "The table to export.", "$dynamic": true },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "useAvroLogicalTypes": {
          "type": "boolean",
          "title": "[Optional] Flag if format is set to \"AVRO\".",
          "markdownDescription": "[Optional] If destinationFormat is set to \"AVRO\", this flag indicates whether to enable extracting applicable column types (such as TIMESTAMP) to their corresponding AVRO logical types (timestamp-micros), instead of only using their raw types (avro-long). \nParameters:\n    useAvroLogicalTypes - useAvroLogicalTypes or null for none "
        }
      },
      "required": ["id", "type"],
      "title": "Extract data from BigQuery table to GCS (Google Cloud Storage)",
      "markdownDescription": "##### Examples\n> Extract a BigQuery table to a gcs bucket\n```yaml\ndestinationUris: \n  - \"gs://bucket_name/filename.csv\"\nsourceTable: \"my_project.my_dataset.my_table\"\nformat: CSV\nfieldDelimiter: ';'\nprintHeader: true\n```"
    },
    "io.kestra.plugin.gcp.bigquery.ExtractToGcs-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.ExtractToGcs-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.gcp.bigquery.ExtractToGcs" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Extract a BigQuery table to a gcs bucket\n```yaml\ndestinationUris: \n  - \"gs://bucket_name/filename.csv\"\nsourceTable: \"my_project.my_dataset.my_table\"\nformat: CSV\nfieldDelimiter: ';'\nprintHeader: true\n```"
    },
    "io.kestra.plugin.gcp.bigquery.Load-1": {
      "type": "object",
      "properties": {
        "autodetect": {
          "type": "boolean",
          "title": "[Experimental] Automatic inference of the options and schema for CSV and JSON sources",
          "$dynamic": false
        },
        "avroOptions": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.AbstractLoad-AvroOptions" },
            { "title": "Avro parsing options" }
          ]
        },
        "clusteringFields": {
          "title": "The clustering specification for the destination table",
          "$dynamic": true,
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "createDisposition": {
          "type": "string",
          "enum": ["CREATE_IF_NEEDED", "CREATE_NEVER"],
          "title": "Whether the job is allowed to create tables",
          "$dynamic": false
        },
        "csvOptions": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.AbstractLoad-CsvOptions" },
            { "title": "Csv parsing options" }
          ]
        },
        "description": { "type": "string" },
        "destinationTable": {
          "type": "string",
          "title": "The table where to put query results",
          "$dynamic": true,
          "markdownDescription": "If not provided a new table is created."
        },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "format": {
          "type": "string",
          "enum": ["CSV", "JSON", "AVRO", "PARQUET", "ORC"],
          "title": "The source format, and possibly some parsing options, of the external data",
          "$dynamic": false
        },
        "from": {
          "type": "string",
          "title": "The fully-qualified URIs that point to source data",
          "$dynamic": true
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "ignoreUnknownValues": {
          "type": "boolean",
          "title": "Whether BigQuery should allow extra values that are not represented in the table schema",
          "$dynamic": false,
          "markdownDescription": " If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. By default unknown values are not allowed."
        },
        "location": {
          "type": "string",
          "title": "The geographic location where the dataset should reside",
          "$dynamic": true,
          "markdownDescription": "This property is experimental and might be subject to change or removed.\n \n See <a href=\"https://cloud.google.com/bigquery/docs/reference/v2/datasets#location\">Dataset Location</a>"
        },
        "maxBadRecords": {
          "type": "integer",
          "title": "The maximum number of bad records that BigQuery can ignore when running the job",
          "$dynamic": false,
          "markdownDescription": " If the number of bad records exceeds this value, an invalid error is returned in the job result. By default no bad record is ignored."
        },
        "projectId": { "type": "string", "title": "The GCP project id", "$dynamic": true },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "retryAuto": {
          "anyOf": [
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            },
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            },
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            }
          ]
        },
        "retryMessages": {
          "title": "The message that are valid for a automatic retry.",
          "default": ["due to concurrent update", "Retrying the job may solve the problem"],
          "$dynamic": true,
          "markdownDescription": "Message is tested as a substring of the full message and case insensitive\n\nDefault value is : `- due to concurrent update\n- Retrying the job may solve the problem`\n\nDefault value is : `- due to concurrent update\n- Retrying the job may solve the problem`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "retryReasons": {
          "title": "The reason that are valid for a automatic retry.",
          "default": ["rateLimitExceeded", "jobBackendError", "internalError", "jobInternalError"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- rateLimitExceeded\n- jobBackendError\n- internalError\n- jobInternalError`\n\nDefault value is : `- rateLimitExceeded\n- jobBackendError\n- internalError\n- jobInternalError`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "schema": {
          "type": "object",
          "title": "The schema for the destination table",
          "$dynamic": false,
          "markdownDescription": "The schema can be omitted if the destination table already exists, or if you're loading data from a Google Cloud Datastore backup (i.e.  DATASTORE_BACKUP format option).\n```yaml\nschema:\n  fields:\n    - name: colA\n      type: STRING\n    - name: colB\n      type: NUMERIC\n```\nSee type from [StandardSQLTypeName](https://javadoc.io/static/com.google.cloud/google-cloud-bigquery/1.88.0/com/google/cloud/bigquery/StandardSQLTypeName.html)"
        },
        "schemaUpdateOptions": {
          "title": "[Experimental] Options allowing the schema of the destination table to be updated as a side effect of the query job",
          "$dynamic": false,
          "markdownDescription": "Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["ALLOW_FIELD_ADDITION", "ALLOW_FIELD_RELAXATION"],
            "$dynamic": false
          }
        },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/cloud-platform"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/cloud-platform`\n\nDefault value is : `- https://www.googleapis.com/auth/cloud-platform`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "timePartitioningField": {
          "type": "string",
          "title": "The time partitioning field for the destination table",
          "$dynamic": true
        },
        "timePartitioningType": {
          "type": "string",
          "enum": ["DAY", "HOUR", "MONTH", "YEAR"],
          "title": "The time partitioning type specification for the destination table",
          "default": "DAY",
          "$dynamic": true,
          "markdownDescription": "Default value is : `DAY`"
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "writeDisposition": {
          "type": "string",
          "enum": ["WRITE_TRUNCATE", "WRITE_APPEND", "WRITE_EMPTY"],
          "title": "The action that should occur if the destination table already exists",
          "$dynamic": false
        }
      },
      "required": ["id", "type"],
      "title": "Load data from local file to BigQuery",
      "markdownDescription": "##### Examples\n> Load an csv file from an input file\n```yaml\nfrom: \"{{ inputs.file }}\"\ndestinationTable: \"my_project.my_dataset.my_table\"\nformat: CSV\ncsvOptions:\n  fieldDelimiter: \";\"\n```"
    },
    "io.kestra.plugin.gcp.bigquery.Load-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Load-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.gcp.bigquery.Load" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Load an csv file from an input file\n```yaml\nfrom: \"{{ inputs.file }}\"\ndestinationTable: \"my_project.my_dataset.my_table\"\nformat: CSV\ncsvOptions:\n  fieldDelimiter: \";\"\n```"
    },
    "io.kestra.plugin.gcp.bigquery.LoadFromGcs-1": {
      "type": "object",
      "properties": {
        "autodetect": {
          "type": "boolean",
          "title": "[Experimental] Automatic inference of the options and schema for CSV and JSON sources",
          "$dynamic": false
        },
        "avroOptions": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.AbstractLoad-AvroOptions" },
            { "title": "Avro parsing options" }
          ]
        },
        "clusteringFields": {
          "title": "The clustering specification for the destination table",
          "$dynamic": true,
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "createDisposition": {
          "type": "string",
          "enum": ["CREATE_IF_NEEDED", "CREATE_NEVER"],
          "title": "Whether the job is allowed to create tables",
          "$dynamic": false
        },
        "csvOptions": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.AbstractLoad-CsvOptions" },
            { "title": "Csv parsing options" }
          ]
        },
        "description": { "type": "string" },
        "destinationTable": {
          "type": "string",
          "title": "The table where to put query results",
          "$dynamic": true,
          "markdownDescription": "If not provided a new table is created."
        },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "format": {
          "type": "string",
          "enum": ["CSV", "JSON", "AVRO", "PARQUET", "ORC"],
          "title": "The source format, and possibly some parsing options, of the external data",
          "$dynamic": false
        },
        "from": {
          "title": "Google Cloud Storage source data",
          "$dynamic": true,
          "markdownDescription": "The fully-qualified URIs that point to source data in Google Cloud Storage (e.g. gs://bucket/path). Each URI can contain one '*' wildcard character and it must come after the 'bucket' name.",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "ignoreUnknownValues": {
          "type": "boolean",
          "title": "Whether BigQuery should allow extra values that are not represented in the table schema",
          "$dynamic": false,
          "markdownDescription": " If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result. By default unknown values are not allowed."
        },
        "location": {
          "type": "string",
          "title": "The geographic location where the dataset should reside",
          "$dynamic": true,
          "markdownDescription": "This property is experimental and might be subject to change or removed.\n \n See <a href=\"https://cloud.google.com/bigquery/docs/reference/v2/datasets#location\">Dataset Location</a>"
        },
        "maxBadRecords": {
          "type": "integer",
          "title": "The maximum number of bad records that BigQuery can ignore when running the job",
          "$dynamic": false,
          "markdownDescription": " If the number of bad records exceeds this value, an invalid error is returned in the job result. By default no bad record is ignored."
        },
        "projectId": { "type": "string", "title": "The GCP project id", "$dynamic": true },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "retryAuto": {
          "anyOf": [
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            },
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            },
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            }
          ]
        },
        "retryMessages": {
          "title": "The message that are valid for a automatic retry.",
          "default": ["due to concurrent update", "Retrying the job may solve the problem"],
          "$dynamic": true,
          "markdownDescription": "Message is tested as a substring of the full message and case insensitive\n\nDefault value is : `- due to concurrent update\n- Retrying the job may solve the problem`\n\nDefault value is : `- due to concurrent update\n- Retrying the job may solve the problem`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "retryReasons": {
          "title": "The reason that are valid for a automatic retry.",
          "default": ["rateLimitExceeded", "jobBackendError", "internalError", "jobInternalError"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- rateLimitExceeded\n- jobBackendError\n- internalError\n- jobInternalError`\n\nDefault value is : `- rateLimitExceeded\n- jobBackendError\n- internalError\n- jobInternalError`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "schema": {
          "type": "object",
          "title": "The schema for the destination table",
          "$dynamic": false,
          "markdownDescription": "The schema can be omitted if the destination table already exists, or if you're loading data from a Google Cloud Datastore backup (i.e.  DATASTORE_BACKUP format option).\n```yaml\nschema:\n  fields:\n    - name: colA\n      type: STRING\n    - name: colB\n      type: NUMERIC\n```\nSee type from [StandardSQLTypeName](https://javadoc.io/static/com.google.cloud/google-cloud-bigquery/1.88.0/com/google/cloud/bigquery/StandardSQLTypeName.html)"
        },
        "schemaUpdateOptions": {
          "title": "[Experimental] Options allowing the schema of the destination table to be updated as a side effect of the query job",
          "$dynamic": false,
          "markdownDescription": "Schema update options are supported in two cases: when writeDisposition is WRITE_APPEND; when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. For normal tables, WRITE_TRUNCATE will always overwrite the schema.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["ALLOW_FIELD_ADDITION", "ALLOW_FIELD_RELAXATION"],
            "$dynamic": false
          }
        },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/cloud-platform"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/cloud-platform`\n\nDefault value is : `- https://www.googleapis.com/auth/cloud-platform`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "timePartitioningField": {
          "type": "string",
          "title": "The time partitioning field for the destination table",
          "$dynamic": true
        },
        "timePartitioningType": {
          "type": "string",
          "enum": ["DAY", "HOUR", "MONTH", "YEAR"],
          "title": "The time partitioning type specification for the destination table",
          "default": "DAY",
          "$dynamic": true,
          "markdownDescription": "Default value is : `DAY`"
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "writeDisposition": {
          "type": "string",
          "enum": ["WRITE_TRUNCATE", "WRITE_APPEND", "WRITE_EMPTY"],
          "title": "The action that should occur if the destination table already exists",
          "$dynamic": false
        }
      },
      "required": ["id", "type"],
      "title": "Load data from GCS (Google Cloud Storage) to BigQuery",
      "markdownDescription": "##### Examples\n> Load an avro file from a gcs bucket\n```yaml\nfrom:\n  - \"{{ outputs['avro-to-gcs'] }}\"\ndestinationTable: \"my_project.my_dataset.my_table\"\nformat: AVRO\navroOptions:\n  useAvroLogicalTypes: true\n```\n\n> Load a csv file with a defined schema\n```yaml\n- id: load_files_test\n  type: io.kestra.plugin.gcp.bigquery.LoadFromGcs\n  destinationTable: \"myDataset.myTable\"\n  ignoreUnknownValues: true\n  schema:\n    fields:\n      - name: colA\n        type: STRING\n      - name: colB\n        type: NUMERIC\n      - name: colC\n        type: STRING\n  format: CSV\n  csvOptions:\n    allowJaggedRows: true\n    encoding: UTF-8\n    fieldDelimiter: \",\"\n  from:\n  - gs://myBucket/myFile.csv\n```"
    },
    "io.kestra.plugin.gcp.bigquery.LoadFromGcs-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.LoadFromGcs-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.gcp.bigquery.LoadFromGcs" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Load an avro file from a gcs bucket\n```yaml\nfrom:\n  - \"{{ outputs['avro-to-gcs'] }}\"\ndestinationTable: \"my_project.my_dataset.my_table\"\nformat: AVRO\navroOptions:\n  useAvroLogicalTypes: true\n```\n\n> Load a csv file with a defined schema\n```yaml\n- id: load_files_test\n  type: io.kestra.plugin.gcp.bigquery.LoadFromGcs\n  destinationTable: \"myDataset.myTable\"\n  ignoreUnknownValues: true\n  schema:\n    fields:\n      - name: colA\n        type: STRING\n      - name: colB\n        type: NUMERIC\n      - name: colC\n        type: STRING\n  format: CSV\n  csvOptions:\n    allowJaggedRows: true\n    encoding: UTF-8\n    fieldDelimiter: \",\"\n  from:\n  - gs://myBucket/myFile.csv\n```"
    },
    "io.kestra.plugin.gcp.bigquery.Query-1": {
      "type": "object",
      "properties": {
        "allowLargeResults": {
          "type": "boolean",
          "title": "Sets whether the job is enabled to create arbitrarily large results.",
          "$dynamic": false,
          "markdownDescription": "If `true` the query is allowed to create large results at a slight cost in performance. `destinationTable` must be provide"
        },
        "clusteringFields": {
          "title": "The clustering specification for the destination table",
          "$dynamic": true,
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "createDisposition": {
          "type": "string",
          "enum": ["CREATE_IF_NEEDED", "CREATE_NEVER"],
          "title": "Whether the job is allowed to create tables",
          "$dynamic": false
        },
        "defaultDataset": {
          "type": "string",
          "title": "Sets the default dataset.",
          "$dynamic": true,
          "markdownDescription": "This dataset is used for all unqualified table names used in the query."
        },
        "description": { "type": "string" },
        "destinationTable": {
          "type": "string",
          "title": "The table where to put query results",
          "$dynamic": true,
          "markdownDescription": "If not provided a new table is created."
        },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "dryRun": {
          "type": "boolean",
          "title": "Sets whether the job has to be dry run or no.",
          "default": false,
          "$dynamic": false,
          "markdownDescription": " A valid query will return a mostly empty response with some processing statistics, while an invalid query will return the same error it would if it wasn't a dry run.\n\nDefault value is : `false`"
        },
        "fetch": {
          "type": "boolean",
          "title": "Whether to Fetch the data from the query result to the task output",
          "default": false,
          "$dynamic": false,
          "markdownDescription": "Default value is : `false`"
        },
        "fetchOne": {
          "type": "boolean",
          "title": "Whether to Fetch only one data row from the query result to the task output",
          "default": false,
          "$dynamic": false,
          "markdownDescription": "Default value is : `false`"
        },
        "flattenResults": {
          "type": "boolean",
          "title": "Sets whether nested and repeated fields should be flattened.",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "If set to `false`, allowLargeResults must be `true`\n\nDefault value is : `true`"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "jobTimeout": {
          "type": "string",
          "format": "duration",
          "title": "Job timeout.",
          "$dynamic": false,
          "markdownDescription": "If this time limit is exceeded, BigQuery may attempt to terminate the job."
        },
        "labels": {
          "type": "object",
          "title": "The labels associated with this job.",
          "$dynamic": true,
          "markdownDescription": "You can use these to organize and group your jobs. Label keys and values can be no longer than 63 characters, can only contain lowercase letters, numeric characters, underscores and dashes. International characters are allowed. Label values are optional. Label keys must start with a letter and each label in the list must have a different key."
        },
        "legacySql": {
          "type": "boolean",
          "title": "Whether to use BigQuery's legacy SQL dialect for this query",
          "default": false,
          "$dynamic": false,
          "markdownDescription": "By default this property is set to false.\n\nDefault value is : `false`"
        },
        "location": {
          "type": "string",
          "title": "The geographic location where the dataset should reside",
          "$dynamic": true,
          "markdownDescription": "This property is experimental and might be subject to change or removed.\n \n See <a href=\"https://cloud.google.com/bigquery/docs/reference/v2/datasets#location\">Dataset Location</a>"
        },
        "maxResults": {
          "type": "integer",
          "title": "This is only supported in the fast query path.",
          "$dynamic": false,
          "markdownDescription": "The maximum number of rows of data to return per page of results. Setting this flag to a small value such as 1000 and then paging through results might improve reliability when the query result set is large. In addition to this limit, responses are also limited to 10 MB. By default, there is no maximum row count, and only the byte limit applies."
        },
        "maximumBillingTier": {
          "type": "integer",
          "title": "Limits the billing tier for this job.",
          "$dynamic": false,
          "markdownDescription": "Queries that have resource usage beyond this tier will fail (without incurring a charge). If unspecified, this will be set to your project default."
        },
        "maximumBytesBilled": {
          "type": "integer",
          "title": "Limits the bytes billed for this job.",
          "$dynamic": false,
          "markdownDescription": "Queries that will have bytes billed beyond this limit will fail (without incurring a charge). If unspecified, this will be set to your project default."
        },
        "priority": {
          "type": "string",
          "enum": ["INTERACTIVE", "BATCH"],
          "title": "Sets a priority for the query.",
          "default": "INTERACTIVE",
          "$dynamic": false,
          "markdownDescription": "Default value is : `INTERACTIVE`"
        },
        "projectId": { "type": "string", "title": "The GCP project id", "$dynamic": true },
        "rangePartitioningEnd": {
          "type": "integer",
          "title": "The end range partitioning, inclusive.",
          "$dynamic": true
        },
        "rangePartitioningField": {
          "type": "string",
          "title": "Range partitioning field for the destination table.",
          "$dynamic": true
        },
        "rangePartitioningInterval": {
          "type": "integer",
          "title": "The width of each interval.",
          "$dynamic": true
        },
        "rangePartitioningStart": {
          "type": "integer",
          "title": "The start of range partitioning, inclusive.",
          "$dynamic": true
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "retryAuto": {
          "anyOf": [
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            },
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            },
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            }
          ]
        },
        "retryMessages": {
          "title": "The message that are valid for a automatic retry.",
          "default": ["due to concurrent update", "Retrying the job may solve the problem"],
          "$dynamic": true,
          "markdownDescription": "Message is tested as a substring of the full message and case insensitive\n\nDefault value is : `- due to concurrent update\n- Retrying the job may solve the problem`\n\nDefault value is : `- due to concurrent update\n- Retrying the job may solve the problem`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "retryReasons": {
          "title": "The reason that are valid for a automatic retry.",
          "default": ["rateLimitExceeded", "jobBackendError", "internalError", "jobInternalError"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- rateLimitExceeded\n- jobBackendError\n- internalError\n- jobInternalError`\n\nDefault value is : `- rateLimitExceeded\n- jobBackendError\n- internalError\n- jobInternalError`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "schemaUpdateOptions": {
          "title": "[Experimental] Options allowing the schema of the destination table to be updated as a side effect of the query job",
          "$dynamic": false,
          "markdownDescription": " Schema update options are supported in two cases: * when writeDisposition is WRITE_APPEND; \n* when writeDisposition is WRITE_TRUNCATE and the destination table is a partition of a table, specified by partition decorators. \n For normal tables, WRITE_TRUNCATE will always overwrite the schema.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["ALLOW_FIELD_ADDITION", "ALLOW_FIELD_RELAXATION"],
            "$dynamic": false
          }
        },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/cloud-platform"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/cloud-platform`\n\nDefault value is : `- https://www.googleapis.com/auth/cloud-platform`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "sql": { "type": "string", "title": "The sql query to run", "$dynamic": true },
        "store": {
          "type": "boolean",
          "title": "Whether to store the data from the query result into an ion serialized data file",
          "default": false,
          "$dynamic": false,
          "markdownDescription": "Default value is : `false`"
        },
        "timePartitioningField": {
          "type": "string",
          "title": "The time partitioning field for the destination table.",
          "$dynamic": true
        },
        "timePartitioningType": {
          "type": "string",
          "enum": ["DAY", "HOUR", "MONTH", "YEAR"],
          "title": "The time partitioning type specification.",
          "default": "DAY",
          "$dynamic": true,
          "markdownDescription": "Default value is : `DAY`"
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "useLegacySql": {
          "type": "boolean",
          "title": "Sets whether to use BigQuery's legacy SQL dialect for this query.",
          "default": false,
          "$dynamic": false,
          "markdownDescription": " A valid query will return a mostly empty response with some processing statistics, while an invalid query will return the same error it would if it wasn't a dry run.\n\nDefault value is : `false`"
        },
        "useQueryCache": {
          "type": "boolean",
          "title": "Sets whether to look for the result in the query cache.",
          "$dynamic": false,
          "markdownDescription": "The query cache is a best-effort cache that will be flushed whenever tables in the query are modified. Moreover, the query cache is only available when `destinationTable` is not set "
        },
        "writeDisposition": {
          "type": "string",
          "enum": ["WRITE_TRUNCATE", "WRITE_APPEND", "WRITE_EMPTY"],
          "title": "The action that should occur if the destination table already exists",
          "$dynamic": false
        }
      },
      "required": ["id", "type"],
      "title": "Execute BigQuery SQL query in a specific BigQuery database",
      "markdownDescription": "##### Examples\n> Create a table with a custom query\n```yaml\ndestinationTable: \"my_project.my_dataset.my_table\"\nwriteDisposition: WRITE_APPEND\nsql: |\n  SELECT \n    \"hello\" as string,\n    NULL AS `nullable`,\n    1 as int,\n    1.25 AS float,\n    DATE(\"2008-12-25\") AS date,\n    DATETIME \"2008-12-25 15:30:00.123456\" AS datetime,\n    TIME(DATETIME \"2008-12-25 15:30:00.123456\") AS time,\n    TIMESTAMP(\"2008-12-25 15:30:00.123456\") AS timestamp,\n    ST_GEOGPOINT(50.6833, 2.9) AS geopoint,\n    ARRAY(SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3) AS `array`,\n    STRUCT(4 AS x, 0 AS y, ARRAY(SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3) AS z) AS `struct`\n```\n\n> Execute a query and fetch results sets on another task\n```yaml\ntasks:\n- id: fetch\n  type: io.kestra.plugin.gcp.bigquery.Query\n  fetch: true\n  sql: |\n    SELECT 1 as id, \"John\" as name\n    UNION ALL\n    SELECT 2 as id, \"Doe\" as name\n- id: use-fetched-data\n  type: io.kestra.core.tasks.debugs.Return\n  format: |\n    {{#each outputs.fetch.rows}}\n    id : {{ this.id }}, name: {{ this.name }}\n    {{/each}}\n```"
    },
    "io.kestra.plugin.gcp.bigquery.Query-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Query-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.gcp.bigquery.Query" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Create a table with a custom query\n```yaml\ndestinationTable: \"my_project.my_dataset.my_table\"\nwriteDisposition: WRITE_APPEND\nsql: |\n  SELECT \n    \"hello\" as string,\n    NULL AS `nullable`,\n    1 as int,\n    1.25 AS float,\n    DATE(\"2008-12-25\") AS date,\n    DATETIME \"2008-12-25 15:30:00.123456\" AS datetime,\n    TIME(DATETIME \"2008-12-25 15:30:00.123456\") AS time,\n    TIMESTAMP(\"2008-12-25 15:30:00.123456\") AS timestamp,\n    ST_GEOGPOINT(50.6833, 2.9) AS geopoint,\n    ARRAY(SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3) AS `array`,\n    STRUCT(4 AS x, 0 AS y, ARRAY(SELECT 1 UNION ALL SELECT 2 UNION ALL SELECT 3) AS z) AS `struct`\n```\n\n> Execute a query and fetch results sets on another task\n```yaml\ntasks:\n- id: fetch\n  type: io.kestra.plugin.gcp.bigquery.Query\n  fetch: true\n  sql: |\n    SELECT 1 as id, \"John\" as name\n    UNION ALL\n    SELECT 2 as id, \"Doe\" as name\n- id: use-fetched-data\n  type: io.kestra.core.tasks.debugs.Return\n  format: |\n    {{#each outputs.fetch.rows}}\n    id : {{ this.id }}, name: {{ this.name }}\n    {{/each}}\n```"
    },
    "io.kestra.plugin.gcp.bigquery.StorageWrite-1": {
      "type": "object",
      "properties": {
        "bufferSize": {
          "type": "integer",
          "title": "The number of records to send on each query",
          "default": 1000,
          "$dynamic": false,
          "markdownDescription": "Default value is : `1000`"
        },
        "description": { "type": "string" },
        "destinationTable": {
          "type": "string",
          "title": "The table where to load data",
          "minLength": 1,
          "markdownDescription": "The table must be created beefore."
        },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "from": {
          "type": "string",
          "title": "The fully-qualified URIs that point to source data",
          "$dynamic": true
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "location": {
          "type": "string",
          "title": "The geographic location where the dataset should reside",
          "$dynamic": true,
          "markdownDescription": "This property is experimental and might be subject to change or removed.\n \n See <a href=\"https://cloud.google.com/bigquery/docs/reference/v2/datasets#location\">Dataset Location</a>"
        },
        "projectId": { "type": "string", "title": "The GCP project id", "$dynamic": true },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/cloud-platform"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/cloud-platform`\n\nDefault value is : `- https://www.googleapis.com/auth/cloud-platform`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "writeStreamType": {
          "type": "string",
          "enum": ["DEFAULT", "COMMITTED", "PENDING"],
          "title": "The type of write stream to use",
          "default": "DEFAULT",
          "markdownDescription": "Default value is : `DEFAULT`"
        }
      },
      "required": ["destinationTable", "id", "type"],
      "title": "Load an kestra internal storage file on bigquery using [BigQuery Storage API](https://cloud.google.com/bigquery/docs/write-api#write_to_a_stream_in_committed_mode)",
      "markdownDescription": "##### Examples\n> \n```yaml\nfrom: \"{{ outputs.read.uri }}\"\ndestinationTable: \"my_project.my_dataset.my_table\"\nwriteStreamType: DEFAULT\n```"
    },
    "io.kestra.plugin.gcp.bigquery.StorageWrite-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.StorageWrite-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.gcp.bigquery.StorageWrite" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nfrom: \"{{ outputs.read.uri }}\"\ndestinationTable: \"my_project.my_dataset.my_table\"\nwriteStreamType: DEFAULT\n```"
    },
    "io.kestra.plugin.gcp.bigquery.TableMetadata-1": {
      "type": "object",
      "properties": {
        "dataset": { "type": "string", "title": "The dataset's user-defined id", "$dynamic": true },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "ifNotExists": {
          "type": "string",
          "enum": ["ERROR", "SKIP"],
          "title": "Policy to apply if a table don't exists.",
          "default": "ERROR",
          "markdownDescription": "If the policy is `SKIP`, the output will contain only null value, otherwize an error is raised.\n\nDefault value is : `ERROR`"
        },
        "location": {
          "type": "string",
          "title": "The geographic location where the dataset should reside",
          "$dynamic": true,
          "markdownDescription": "This property is experimental and might be subject to change or removed.\n \n See <a href=\"https://cloud.google.com/bigquery/docs/reference/v2/datasets#location\">Dataset Location</a>"
        },
        "projectId": { "type": "string", "title": "The GCP project id", "$dynamic": true },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "retryAuto": {
          "anyOf": [
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            },
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            },
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            }
          ]
        },
        "retryMessages": {
          "title": "The message that are valid for a automatic retry.",
          "default": ["due to concurrent update", "Retrying the job may solve the problem"],
          "$dynamic": true,
          "markdownDescription": "Message is tested as a substring of the full message and case insensitive\n\nDefault value is : `- due to concurrent update\n- Retrying the job may solve the problem`\n\nDefault value is : `- due to concurrent update\n- Retrying the job may solve the problem`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "retryReasons": {
          "title": "The reason that are valid for a automatic retry.",
          "default": ["rateLimitExceeded", "jobBackendError", "internalError", "jobInternalError"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- rateLimitExceeded\n- jobBackendError\n- internalError\n- jobInternalError`\n\nDefault value is : `- rateLimitExceeded\n- jobBackendError\n- internalError\n- jobInternalError`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/cloud-platform"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/cloud-platform`\n\nDefault value is : `- https://www.googleapis.com/auth/cloud-platform`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "table": { "type": "string", "title": "The table user-defined id", "$dynamic": true },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["dataset", "id", "table", "type"],
      "title": "Get table metadata",
      "markdownDescription": "##### Examples\n> \n```yaml\nprojectId: my-project\ndataset: my-dataset\ntable: my-table\n```"
    },
    "io.kestra.plugin.gcp.bigquery.TableMetadata-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.TableMetadata-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.gcp.bigquery.TableMetadata" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nprojectId: my-project\ndataset: my-dataset\ntable: my-table\n```"
    },
    "io.kestra.plugin.gcp.bigquery.Trigger-1": {
      "type": "object",
      "properties": {
        "conditions": {
          "title": "List of Conditions in order to limit the flow trigger.",
          "type": "array",
          "items": {
            "anyOf": [
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.NotCondition-2" },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionStatusCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.DateTimeBetweenCondition-2"
              },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.FlowCondition-2" },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionFlowCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.HasRetryAttemptCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.DayWeekInMonthCondition-2"
              },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.DayWeekCondition-2" },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.WeekendCondition-2" },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionNamespaceCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.VariableCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.FlowNamespaceCondition-2"
              },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.OrCondition-2" },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.MultipleCondition-2" }
            ]
          }
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "fetch": {
          "type": "boolean",
          "title": "Whether to Fetch the data from the query result to the task output",
          "default": false,
          "$dynamic": false,
          "markdownDescription": "Default value is : `false`"
        },
        "fetchOne": {
          "type": "boolean",
          "title": "Whether to Fetch only one data row from the query result to the task output",
          "default": false,
          "$dynamic": false,
          "markdownDescription": "Default value is : `false`"
        },
        "id": {
          "type": "string",
          "title": "A unique id for the whole flow",
          "minLength": 1,
          "pattern": "[a-zA-Z0-9_-]+"
        },
        "interval": {
          "type": "string",
          "format": "duration",
          "title": "Interval between polling",
          "default": "PT1S",
          "$dynamic": false,
          "markdownDescription": "The interval between 2 different test of schedule, this can avoid to overload the remote system with too many call. For most of trigger that depend on external system, a minimal interval must be at least PT30S.\nSee [ISO_8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) for more information of available interval value\n\nDefault value is : `PT1S`"
        },
        "legacySql": {
          "type": "boolean",
          "title": "Whether to use BigQuery's legacy SQL dialect for this query",
          "default": false,
          "$dynamic": false,
          "markdownDescription": "By default this property is set to false.\n\nDefault value is : `false`"
        },
        "projectId": { "type": "string" },
        "scopes": {
          "default": ["https://www.googleapis.com/auth/cloud-platform"],
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/cloud-platform`\n\nDefault value is : `- https://www.googleapis.com/auth/cloud-platform`",
          "type": "array",
          "items": { "type": "string" }
        },
        "serviceAccount": { "type": "string" },
        "sql": { "type": "string", "title": "The sql query to run", "$dynamic": true },
        "store": {
          "type": "boolean",
          "title": "Whether to store the data from the query result into an ion serialized data file",
          "default": false,
          "$dynamic": false,
          "markdownDescription": "Default value is : `false`"
        },
        "type": {
          "type": "string",
          "title": "The class name for this current trigger",
          "minLength": 1
        }
      },
      "required": ["id", "type"],
      "title": "Wait for query on BigQuery",
      "markdownDescription": "##### Examples\n> Wait for a sql query to return results and iterate through rows\n```yaml\nid: bigquery-listen\nnamespace: io.kestra.tests\n\ntasks:\n  - id: each\n    type: io.kestra.core.tasks.flows.EachSequential\n    tasks:\n      - id: return\n        type: io.kestra.core.tasks.debugs.Return\n        format: \"{{json taskrun.value}}\"\n    value: \"{{ trigger.rows }}\"\n\ntriggers:\n  - id: watch\n    type: io.kestra.plugin.gcp.bigquery.Trigger\n    interval: \"PT5M\"\n    sql: \"SELECT * FROM `myproject.mydataset.mytable`\"\n```"
    },
    "io.kestra.plugin.gcp.bigquery.Trigger-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.Trigger-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.gcp.bigquery.Trigger" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Wait for a sql query to return results and iterate through rows\n```yaml\nid: bigquery-listen\nnamespace: io.kestra.tests\n\ntasks:\n  - id: each\n    type: io.kestra.core.tasks.flows.EachSequential\n    tasks:\n      - id: return\n        type: io.kestra.core.tasks.debugs.Return\n        format: \"{{json taskrun.value}}\"\n    value: \"{{ trigger.rows }}\"\n\ntriggers:\n  - id: watch\n    type: io.kestra.plugin.gcp.bigquery.Trigger\n    interval: \"PT5M\"\n    sql: \"SELECT * FROM `myproject.mydataset.mytable`\"\n```"
    },
    "io.kestra.plugin.gcp.bigquery.UpdateDataset-1": {
      "type": "object",
      "properties": {
        "acl": {
          "title": "The dataset's access control configuration",
          "type": "array",
          "items": { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.models.AccessControl" }
        },
        "defaultEncryptionConfiguration": {
          "allOf": [
            { "$ref": "#/definitions/com.google.cloud.bigquery.EncryptionConfiguration" },
            {
              "title": "The default encryption key for all tables in the dataset",
              "markdownDescription": "Once this property is set, all newly-created partitioned tables in the dataset will have encryption key set to this value, unless table creation request (or query) overrides the key."
            }
          ]
        },
        "defaultPartitionExpirationMs": {
          "type": "integer",
          "title": "[Optional] The default partition expiration time for all partitioned tables in the dataset, in milliseconds",
          "markdownDescription": " Once this property is set, all newly-created partitioned tables in the  dataset will has an expirationMs property in the timePartitioning settings set to this value. Changing the value only affect new tables, not existing ones. The storage in a partition will have an expiration time of its partition time plus this value. Setting this property overrides the use of defaultTableExpirationMs for partitioned tables: only one of defaultTableExpirationMs and defaultPartitionExpirationMs will be used for any new partitioned table. If you provide an explicit timePartitioning.expirationMs when creating or updating a partitioned table, that value takes precedence over the default partition expiration time indicated by this property. The value may be null."
        },
        "defaultTableLifetime": {
          "type": "integer",
          "title": "The default lifetime of all tables in the dataset, in milliseconds",
          "markdownDescription": "The minimum value is 3600000 milliseconds (one hour). Once this property is set, all newly-created tables in the dataset will have an expirationTime property set to the creation time plus the value in this property, and changing the value will only affect new tables, not existing ones. When the expirationTime for a given table is reached, that table will be deleted automatically. If a table's expirationTime is modified or removed before the table expires, or if you provide an explicit expirationTime when creating a table, that value takes precedence over the default expiration time indicated by this property. This property is experimental and might be subject to change or removed."
        },
        "description": {
          "type": "string",
          "title": "Description",
          "$dynamic": true,
          "markdownDescription": "A user-friendly description for the dataset."
        },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "friendlyName": {
          "type": "string",
          "title": "A user-friendly name for the dataset",
          "$dynamic": true
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "labels": { "type": "object", "title": "The dataset's labels", "$dynamic": true },
        "location": {
          "type": "string",
          "title": "The geographic location where the dataset should reside",
          "$dynamic": true,
          "markdownDescription": "This property is experimental and might be subject to change or removed. \n See <a href=\"https://cloud.google.com/bigquery/docs/reference/v2/datasets#location\">Dataset      Location</a>"
        },
        "name": { "type": "string", "title": "The dataset's user-defined id", "$dynamic": true },
        "projectId": { "type": "string", "title": "The GCP project id", "$dynamic": true },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "retryAuto": {
          "anyOf": [
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            },
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            },
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            }
          ]
        },
        "retryMessages": {
          "title": "The message that are valid for a automatic retry.",
          "default": ["due to concurrent update", "Retrying the job may solve the problem"],
          "$dynamic": true,
          "markdownDescription": "Message is tested as a substring of the full message and case insensitive\n\nDefault value is : `- due to concurrent update\n- Retrying the job may solve the problem`\n\nDefault value is : `- due to concurrent update\n- Retrying the job may solve the problem`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "retryReasons": {
          "title": "The reason that are valid for a automatic retry.",
          "default": ["rateLimitExceeded", "jobBackendError", "internalError", "jobInternalError"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- rateLimitExceeded\n- jobBackendError\n- internalError\n- jobInternalError`\n\nDefault value is : `- rateLimitExceeded\n- jobBackendError\n- internalError\n- jobInternalError`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/cloud-platform"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/cloud-platform`\n\nDefault value is : `- https://www.googleapis.com/auth/cloud-platform`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["id", "name", "type"],
      "title": "Update a dataset.",
      "markdownDescription": "##### Examples\n> \n```yaml\nname: \"my_dataset\"\nlocation: \"EU\"\nfriendlyName: \"new Friendly Name\"\n```"
    },
    "io.kestra.plugin.gcp.bigquery.UpdateDataset-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateDataset-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.gcp.bigquery.UpdateDataset" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nname: \"my_dataset\"\nlocation: \"EU\"\nfriendlyName: \"new Friendly Name\"\n```"
    },
    "io.kestra.plugin.gcp.bigquery.UpdateTable-1": {
      "type": "object",
      "properties": {
        "dataset": { "type": "string", "title": "The dataset's user-defined id", "$dynamic": true },
        "description": {
          "type": "string",
          "title": "The user-friendly description for the table",
          "$dynamic": true
        },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "encryptionConfiguration": {
          "allOf": [
            {
              "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.models.EncryptionConfiguration"
            },
            { "title": "The encryption configuration" }
          ]
        },
        "expirationDuration": {
          "type": "string",
          "format": "duration",
          "title": "Sets the duration since now when this table expires.",
          "markdownDescription": "If not present, the table will persist indefinitely. Expired tables will be deleted and their storage reclaimed."
        },
        "friendlyName": {
          "type": "string",
          "title": "The user-friendly name for the table",
          "$dynamic": true
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "labels": {
          "type": "object",
          "title": "Return a map for labels applied to the table",
          "$dynamic": true
        },
        "location": {
          "type": "string",
          "title": "The geographic location where the dataset should reside",
          "$dynamic": true,
          "markdownDescription": "This property is experimental and might be subject to change or removed.\n \n See <a href=\"https://cloud.google.com/bigquery/docs/reference/v2/datasets#location\">Dataset Location</a>"
        },
        "projectId": { "type": "string", "title": "The GCP project id", "$dynamic": true },
        "requirePartitionFilter": {
          "type": "boolean",
          "title": "Return true if a partition filter (that can be used for partition elimination) is required for queries over this table."
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "retryAuto": {
          "anyOf": [
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            },
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            },
            {
              "allOf": [
                { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" },
                {
                  "title": "Automatic retry for retryable bigquery exceptions",
                  "$dynamic": true,
                  "markdownDescription": "Some exceptions (espacially rate limit) are not retried by default by BigQuery client, we use by default a transparent retry (not the kestra one) to handle this case.\nThe default values are Exponential of 5 seconds for max 15 minutes and 10 attempts"
                }
              ]
            }
          ]
        },
        "retryMessages": {
          "title": "The message that are valid for a automatic retry.",
          "default": ["due to concurrent update", "Retrying the job may solve the problem"],
          "$dynamic": true,
          "markdownDescription": "Message is tested as a substring of the full message and case insensitive\n\nDefault value is : `- due to concurrent update\n- Retrying the job may solve the problem`\n\nDefault value is : `- due to concurrent update\n- Retrying the job may solve the problem`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "retryReasons": {
          "title": "The reason that are valid for a automatic retry.",
          "default": ["rateLimitExceeded", "jobBackendError", "internalError", "jobInternalError"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- rateLimitExceeded\n- jobBackendError\n- internalError\n- jobInternalError`\n\nDefault value is : `- rateLimitExceeded\n- jobBackendError\n- internalError\n- jobInternalError`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/cloud-platform"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/cloud-platform`\n\nDefault value is : `- https://www.googleapis.com/auth/cloud-platform`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "table": { "type": "string", "title": "The table user-defined id", "$dynamic": true },
        "tableDefinition": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.models.TableDefinition" },
            { "title": "The table definition" }
          ]
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["dataset", "id", "table", "type"],
      "title": "Update table metadata",
      "markdownDescription": "##### Examples\n> \n```yaml\nprojectId: my-project\ndataset: my-dataset\ntable: my-table\nexpirationDuration: PT2D\n```"
    },
    "io.kestra.plugin.gcp.bigquery.UpdateTable-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.UpdateTable-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.gcp.bigquery.UpdateTable" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nprojectId: my-project\ndataset: my-dataset\ntable: my-table\nexpirationDuration: PT2D\n```"
    },
    "io.kestra.plugin.gcp.bigquery.models.AccessControl": {
      "type": "object",
      "properties": {
        "entity": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.models.Entity" },
            { "title": "The entity", "$dynamic": true }
          ]
        },
        "role": {
          "type": "string",
          "enum": ["READER", "WRITER", "OWNER"],
          "title": "The role to assign to the entity",
          "$dynamic": true
        }
      },
      "required": ["entity", "role"]
    },
    "io.kestra.plugin.gcp.bigquery.models.EncryptionConfiguration": {
      "type": "object",
      "properties": { "the Kms key name": { "type": "string", "$dynamic": true } }
    },
    "io.kestra.plugin.gcp.bigquery.models.Entity": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["DOMAIN", "GROUP", "USER", "IAM_MEMBER"],
          "title": "The type of the entity (USER, GROUP, DOMAIN or IAM_MEMBER)",
          "$dynamic": true
        },
        "value": {
          "type": "string",
          "title": "The value for the entity (ex : user email if the type is USER ...)",
          "$dynamic": true
        }
      },
      "required": ["type", "value"]
    },
    "io.kestra.plugin.gcp.bigquery.models.ExternalTableDefinition": {
      "type": "object",
      "properties": {
        "autodetect": {
          "type": "boolean",
          "title": "whether automatic detection of schema and format options should be performed."
        },
        "compression": {
          "type": "string",
          "title": "the compression type of the data source.",
          "$dynamic": true
        },
        "formatType": {
          "type": "string",
          "enum": [
            "CSV",
            "JSON",
            "BIGTABLE",
            "DATASTORE_BACKUP",
            "AVRO",
            "GOOGLE_SHEETS",
            "PARQUET",
            "ORC"
          ],
          "title": "the source format, and possibly some parsing options, of the external data."
        },
        "ignoreUnknownValues": {
          "type": "boolean",
          "title": "whether BigQuery should allow extra values that are not represented in the table schema.",
          "markdownDescription": "If true, the extra values are ignored. If false, records with extra columns are treated as bad records, and if there are too many bad records, an invalid error is returned in the job result."
        },
        "maxBadRecords": {
          "type": "integer",
          "title": "the maximum number of bad records that BigQuery can ignore when reading data.",
          "markdownDescription": "If the number of bad records exceeds this value, an invalid error is returned in the job result."
        },
        "sourceUris": {
          "title": "the fully-qualified URIs that point to your data in Google Cloud Storage.",
          "$dynamic": true,
          "markdownDescription": "Each URI can\n* contain one '*' wildcard character that must come after the bucket's name. Size limits related\n* to load jobs apply to external data sources, plus an additional limit of 10 GB maximum size\n* across all URIs.",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        }
      }
    },
    "io.kestra.plugin.gcp.bigquery.models.Field": {
      "type": "object",
      "properties": {
        "description": { "type": "string", "title": "the field description.", "$dynamic": true },
        "mode": {
          "type": "string",
          "enum": ["NULLABLE", "REQUIRED", "REPEATED"],
          "title": "the field mode.",
          "$dynamic": true,
          "markdownDescription": "By default `Field.Mode.NULLABLE` is used."
        },
        "name": { "type": "string", "title": "the field name.", "$dynamic": true },
        "policyTags": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.models.PolicyTags" },
            { "title": "the policy tags for the field.", "$dynamic": true }
          ]
        },
        "subFields": {
          "title": "the list of sub-fields if `type` is a `LegacySQLType.RECORD`. Returns null otherwise.",
          "$dynamic": true,
          "type": "array",
          "items": {
            "allOf": [
              { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.models.Field" },
              { "$dynamic": true }
            ]
          }
        },
        "type": {
          "type": "string",
          "enum": [
            "BOOL",
            "INT64",
            "FLOAT64",
            "NUMERIC",
            "BIGNUMERIC",
            "STRING",
            "BYTES",
            "STRUCT",
            "ARRAY",
            "TIMESTAMP",
            "DATE",
            "TIME",
            "DATETIME",
            "GEOGRAPHY",
            "JSON",
            "INTERVAL"
          ],
          "title": "the field name.",
          "$dynamic": false
        }
      }
    },
    "io.kestra.plugin.gcp.bigquery.models.MaterializedViewDefinition": {
      "type": "object",
      "properties": {
        "enableRefresh": {
          "type": "boolean",
          "title": "is enable automatic refresh of the materialized view when the base table is updated",
          "$dynamic": false
        },
        "lastRefreshDate": {
          "type": "string",
          "title": "Date when this materialized view was last modified"
        },
        "query": {
          "type": "string",
          "title": "the query whose result is persisted",
          "$dynamic": true
        },
        "refreshInterval": {
          "type": "string",
          "format": "duration",
          "title": "the maximum frequency at which this materialized view will be refreshed",
          "$dynamic": false
        }
      }
    },
    "io.kestra.plugin.gcp.bigquery.models.PolicyTags": {
      "type": "object",
      "properties": {
        "the policy tags names.": {
          "$dynamic": true,
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        }
      }
    },
    "io.kestra.plugin.gcp.bigquery.models.RangePartitioning": {
      "type": "object",
      "properties": {
        "the range of range partitioning.": {
          "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.models.RangePartitioning-Range"
        },
        "the range partitioning field.": { "type": "string", "$dynamic": true }
      }
    },
    "io.kestra.plugin.gcp.bigquery.models.RangePartitioning-Range": {
      "type": "object",
      "properties": {
        "the end of range partitioning.": { "type": "integer", "$dynamic": false },
        "the start of range partitioning.": { "type": "integer", "$dynamic": false },
        "the width of each interval.": { "type": "integer", "$dynamic": false }
      }
    },
    "io.kestra.plugin.gcp.bigquery.models.Schema": {
      "type": "object",
      "properties": {
        "the fields associated to this schema.": {
          "type": "array",
          "items": { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.models.Field" }
        }
      }
    },
    "io.kestra.plugin.gcp.bigquery.models.StandardTableDefinition": {
      "type": "object",
      "properties": {
        "clustering": {
          "title": "Returns the clustering configuration for this table. If {@code null}, the table is not clustered.",
          "type": "array",
          "items": { "type": "string" }
        },
        "rangePartitioning": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.models.RangePartitioning" },
            {
              "title": "Returns the range partitioning configuration for this table. If {@code null}, the table is not range-partitioned."
            }
          ]
        },
        "streamingBuffer": {
          "allOf": [
            {
              "$ref": "#/definitions/com.google.cloud.bigquery.StandardTableDefinition-StreamingBuffer"
            },
            {
              "title": "Returns information on the table's streaming buffer if any exists. Returns {@code null} if no streaming buffer exists."
            }
          ]
        },
        "timePartitioning": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.models.TimePartitioning" },
            {
              "title": "Returns the time partitioning configuration for this table. If {@code null}, the table is not time-partitioned."
            }
          ]
        }
      }
    },
    "io.kestra.plugin.gcp.bigquery.models.TableDefinition": {
      "type": "object",
      "properties": {
        "externalTableDefinition": {
          "allOf": [
            {
              "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.models.ExternalTableDefinition"
            },
            { "title": "the external table definition if the type is `EXTERNAL`" }
          ]
        },
        "materializedViewDefinition": {
          "allOf": [
            {
              "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.models.MaterializedViewDefinition"
            },
            { "title": "the materialized view definition if the type is `MATERIALIZED_VIEW`" }
          ]
        },
        "schema": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.models.Schema" },
            { "title": "the table's schema." }
          ]
        },
        "standardTableDefinition": {
          "allOf": [
            {
              "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.models.StandardTableDefinition"
            },
            { "title": "the table definition if the type is `TABLE`" }
          ]
        },
        "type": {
          "type": "string",
          "enum": ["TABLE", "VIEW", "MATERIALIZED_VIEW", "EXTERNAL", "MODEL"],
          "title": "the table's type."
        },
        "viewDefinition": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.models.ViewDefinition" },
            { "title": "the view definition if the type is `VIEW`" }
          ]
        }
      }
    },
    "io.kestra.plugin.gcp.bigquery.models.TimePartitioning": {
      "type": "object",
      "properties": {
        "expiration": {
          "type": "string",
          "format": "duration",
          "title": "the number of milliseconds for which to keep the storage for a partition. When expired, the storage for the partition is reclaimed. If null, the partion does not expire.",
          "$dynamic": false
        },
        "field": {
          "type": "string",
          "title": "if not set, the table is partitioned by pseudo column '_PARTITIONTIME'; if set, the table is partitioned by this field.",
          "$dynamic": true
        },
        "requirePartitionFilter": {
          "type": "boolean",
          "title": "If set to true, queries over this table require a partition filter (that can be used for partition elimination) to be specified.",
          "$dynamic": false
        },
        "type": {
          "type": "string",
          "enum": ["DAY", "HOUR", "MONTH", "YEAR"],
          "title": "the time partitioning type.",
          "$dynamic": false
        }
      }
    },
    "io.kestra.plugin.gcp.bigquery.models.UserDefinedFunction": {
      "type": "object",
      "properties": {
        "Type of UserDefinedFunction": {
          "type": "string",
          "$dynamic": true,
          "markdownDescription": "If `type` is UserDefinedFunction.Type.INLINE this method returns a code blob.\nIf `type` is UserDefinedFunction.Type.FROM_URI the method returns a Google Cloud Storage URI (e.g. gs://bucket/path)"
        },
        "the type of user defined function.": {
          "type": "string",
          "enum": ["INLINE", "FROM_URI"],
          "$dynamic": false
        }
      }
    },
    "io.kestra.plugin.gcp.bigquery.models.ViewDefinition": {
      "type": "object",
      "properties": {
        "query": {
          "type": "string",
          "title": "The query whose result is persisted",
          "$dynamic": true
        },
        "viewUserDefinedFunctions": {
          "title": "User defined functions that can be used by query. Returns null if not set.",
          "type": "array",
          "items": {
            "$ref": "#/definitions/io.kestra.plugin.gcp.bigquery.models.UserDefinedFunction"
          }
        }
      }
    },
    "io.kestra.plugin.gcp.gcs.Compose-1": {
      "type": "object",
      "properties": {
        "allowEmpty": {
          "type": "boolean",
          "title": "if `true`, don't failed if no result",
          "default": false,
          "$dynamic": false,
          "markdownDescription": "Default value is : `false`"
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "list": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Compose-List" },
            { "title": "The directory to list", "$dynamic": true }
          ]
        },
        "projectId": { "type": "string", "title": "The GCP project id", "$dynamic": true },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/cloud-platform"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/cloud-platform`\n\nDefault value is : `- https://www.googleapis.com/auth/cloud-platform`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "timeout": { "type": "string", "format": "duration" },
        "to": { "type": "string", "title": "The destination path", "$dynamic": true },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["id", "list", "type"],
      "title": "List file on a GCS bucket.",
      "markdownDescription": "##### Examples\n> Concat files in a bucket\n```yaml\nlist: \n  from: \"gs://my_bucket/dir/\"\nto: \"gs://my_bucket/destination/my-compose-file.txt\"\n```"
    },
    "io.kestra.plugin.gcp.gcs.Compose-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Compose-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.gcp.gcs.Compose" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Concat files in a bucket\n```yaml\nlist: \n  from: \"gs://my_bucket/dir/\"\nto: \"gs://my_bucket/destination/my-compose-file.txt\"\n```"
    },
    "io.kestra.plugin.gcp.gcs.Compose-List": {
      "type": "object",
      "properties": {
        "filter": {
          "type": "string",
          "enum": ["FILES", "DIRECTORY", "BOTH"],
          "default": "BOTH",
          "markdownDescription": "Default value is : `BOTH`"
        },
        "from": { "type": "string", "title": "The directory to list", "$dynamic": true },
        "listingType": {
          "type": "string",
          "enum": ["RECURSIVE", "DIRECTORY"],
          "title": "The listing type you want (like directory or recursive)",
          "default": "DIRECTORY",
          "markdownDescription": "if DIRECTORY, will only list objects in the specified directory\nif RECURSIVE, will list objects in the specified directory recursively\nDefault value is DIRECTORY\nWhen using RECURSIVE value, be carefull to move your files to a location not in the `from` scope\n\nDefault value is : `DIRECTORY`"
        },
        "regExp": {
          "type": "string",
          "title": "A regexp to filter on full path",
          "$dynamic": true,
          "markdownDescription": "ex:\n`regExp: .*` to match all files\n`regExp: .*2020-01-0.\\\\.csv` to match files between 01 and 09 of january ending with `.csv`"
        }
      },
      "required": ["from"]
    },
    "io.kestra.plugin.gcp.gcs.Copy-1": {
      "type": "object",
      "properties": {
        "delete": {
          "type": "boolean",
          "title": "Whether to delete the source files (from parameter) on success copy",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "from": { "type": "string", "title": "The file to copy", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "projectId": { "type": "string", "title": "The GCP project id", "$dynamic": true },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/cloud-platform"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/cloud-platform`\n\nDefault value is : `- https://www.googleapis.com/auth/cloud-platform`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "timeout": { "type": "string", "format": "duration" },
        "to": { "type": "string", "title": "The destination path", "$dynamic": true },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["id", "type"],
      "title": "Copy a file between bucket",
      "markdownDescription": "Copy the file between Internal Storage or Google Cloud Storage file##### Examples\n> Move a file between bucket path\n```yaml\nfrom: \"{{ inputs.file }}\"\ndelete: true\n```"
    },
    "io.kestra.plugin.gcp.gcs.Copy-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Copy-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.gcp.gcs.Copy" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Move a file between bucket path\n```yaml\nfrom: \"{{ inputs.file }}\"\ndelete: true\n```"
    },
    "io.kestra.plugin.gcp.gcs.CreateBucket-1": {
      "type": "object",
      "properties": {
        "acl": {
          "title": "The bucket's access control configuration",
          "markdownDescription": " See <a href=\"https://cloud.google.com/storage/docs/access-control#About-Access-Control-Lists\">About Access Control Lists</a>",
          "type": "array",
          "items": { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.models.AccessControl" }
        },
        "cors": {
          "title": "The bucket's Cross-Origin Resource Sharing (CORS) configuration",
          "markdownDescription": " See <a href=\"https://cloud.google.com/storage/docs/cross-origin\">Cross-Origin ResourceSharing (CORS)</a>",
          "type": "array",
          "items": { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.models.Cors" }
        },
        "defaultAcl": {
          "title": "The default access control configuration",
          "markdownDescription": "The access control configuration to apply to bucket's blobs when no other configuration is specified.\n See <a     href=\"https://cloud.google.com/storage/docs/access-control#About-Access-Control-Lists\">About Access Control Lists</a>",
          "type": "array",
          "items": { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.models.AccessControl" }
        },
        "defaultEventBasedHold": {
          "type": "boolean",
          "title": "The default event-based hold for this bucket"
        },
        "defaultKmsKeyName": {
          "type": "string",
          "title": "The default Cloud KMS key name for this bucket"
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "iamConfiguration": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.models.IamConfiguration" },
            {
              "title": "The Bucket's IAM Configuration",
              "markdownDescription": " See <a href=\"https://cloud.google.com/storage/docs/uniform-bucket-level-access\">uniform  bucket-level access</a>"
            }
          ]
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "ifExists": {
          "type": "string",
          "enum": ["ERROR", "UPDATE", "SKIP"],
          "title": "Policy to apply if a bucket already exists.",
          "default": "ERROR",
          "markdownDescription": "Default value is : `ERROR`"
        },
        "indexPage": {
          "type": "string",
          "title": "The bucket's website index page",
          "markdownDescription": "Behaves as the bucket's directory index where missing  blobs are treated as potential directories."
        },
        "labels": { "type": "object", "title": "The labels of this bucket", "$dynamic": true },
        "lifecycleRules": {
          "title": "The bucket's lifecycle configuration",
          "markdownDescription": "This configuration is expressed as a number of lifecycle rules, consisting of an action and a condition. \n See <a href=\"https://cloud.google.com/storage/docs/lifecycle\">Object Lifecycle Management </a> \n Only the age condition is supported. Only the delete and SetStorageClass actions are supported",
          "type": "array",
          "items": { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.models.BucketLifecycleRule" }
        },
        "location": {
          "type": "string",
          "title": "The bucket's location",
          "$dynamic": true,
          "markdownDescription": "Data for blobs in the bucket resides in physical storage within this region. A list of supported values is available <a href=\"https://cloud.google.com/storage/docs/bucket-locations\">here</a>."
        },
        "logging": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.models.Logging" },
            {
              "title": "The bucket's logging configuration",
              "markdownDescription": "This configuration defines the destination bucket and optional name prefix for the current bucket's logs."
            }
          ]
        },
        "name": { "type": "string", "title": "Bucket's unique name", "$dynamic": true },
        "notFoundPage": {
          "type": "string",
          "title": "The custom object to return when a requested resource is not found"
        },
        "projectId": { "type": "string", "title": "The GCP project id", "$dynamic": true },
        "requesterPays": {
          "type": "boolean",
          "title": "Whether the requester pays or not.",
          "markdownDescription": "Whether a user accessing the bucket or an object it contains should assume the transit  costs related to the access."
        },
        "retentionPeriod": {
          "type": "integer",
          "title": "Retention period",
          "markdownDescription": "If policy is not locked this value can be cleared, increased, and decreased. If policy is  locked the retention period can only be increased."
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/cloud-platform"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/cloud-platform`\n\nDefault value is : `- https://www.googleapis.com/auth/cloud-platform`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "storageClass": {
          "type": "string",
          "enum": [
            "REGIONAL",
            "MULTI_REGIONAL",
            "NEARLINE",
            "COLDLINE",
            "STANDARD",
            "ARCHIVE",
            "DURABLE_REDUCED_AVAILABILITY"
          ],
          "title": "The bucket's storage class",
          "markdownDescription": "This defines how blobs in the bucket are stored and  determines the SLA and the cost of storage. A list of supported values is available <a href=\"https://cloud.google.com/storage/docs/storage-classes\">here</a>."
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "versioningEnabled": {
          "type": "boolean",
          "title": "Whether versioning should be enabled for this bucket",
          "markdownDescription": "When set to true, versioning is  fully enabled."
        }
      },
      "required": ["id", "name", "type"],
      "title": "Create a bucket or update if it already exists.",
      "markdownDescription": "##### Examples\n> Create a new bucket with some options\n```yaml\nname: \"my-bucket\"\nversioningEnabled: true\nlabels: \n  my-label: my-value\n```"
    },
    "io.kestra.plugin.gcp.gcs.CreateBucket-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucket-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.gcp.gcs.CreateBucket" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Create a new bucket with some options\n```yaml\nname: \"my-bucket\"\nversioningEnabled: true\nlabels: \n  my-label: my-value\n```"
    },
    "io.kestra.plugin.gcp.gcs.CreateBucketIamPolicy-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "ifExists": {
          "type": "string",
          "enum": ["ERROR", "SKIP"],
          "title": "Policy to apply if a policy already exists.",
          "default": "SKIP",
          "markdownDescription": "Default value is : `SKIP`"
        },
        "member": { "type": "string", "title": "Bucket's unique name", "$dynamic": true },
        "name": { "type": "string", "title": "Bucket's unique name", "$dynamic": true },
        "projectId": { "type": "string", "title": "The GCP project id", "$dynamic": true },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "role": { "type": "string", "title": "Bucket's unique name", "$dynamic": true },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/cloud-platform"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/cloud-platform`\n\nDefault value is : `- https://www.googleapis.com/auth/cloud-platform`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["id", "member", "name", "role", "type"],
      "title": "Add role on an existing bucket.",
      "markdownDescription": "##### Examples\n> Add role to a service account on a bucket\n```yaml\nname: \"my-bucket\"\nmember: \"sa@project.iam.gserviceaccount.com\"\nrole: \"roles/storage.admin\"\n```"
    },
    "io.kestra.plugin.gcp.gcs.CreateBucketIamPolicy-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.CreateBucketIamPolicy-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.gcp.gcs.CreateBucketIamPolicy" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Add role to a service account on a bucket\n```yaml\nname: \"my-bucket\"\nmember: \"sa@project.iam.gserviceaccount.com\"\nrole: \"roles/storage.admin\"\n```"
    },
    "io.kestra.plugin.gcp.gcs.Delete-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "errorOnMissing": {
          "type": "boolean",
          "title": "raise an error if the file is not found",
          "default": false,
          "$dynamic": true,
          "markdownDescription": "Default value is : `false`"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "projectId": { "type": "string", "title": "The GCP project id", "$dynamic": true },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/cloud-platform"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/cloud-platform`\n\nDefault value is : `- https://www.googleapis.com/auth/cloud-platform`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "uri": { "type": "string", "title": "The file to delete", "$dynamic": true }
      },
      "required": ["id", "type"],
      "title": "Delete a file to a GCS bucket.",
      "markdownDescription": "##### Examples\n> \n```yaml\nuri: \"gs://my_bucket/dir/file.csv\"\n```"
    },
    "io.kestra.plugin.gcp.gcs.Delete-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Delete-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.gcp.gcs.Delete" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nuri: \"gs://my_bucket/dir/file.csv\"\n```"
    },
    "io.kestra.plugin.gcp.gcs.DeleteBucket-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "name": { "type": "string", "title": "Bucket's unique name", "$dynamic": true },
        "projectId": { "type": "string", "title": "The GCP project id", "$dynamic": true },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/cloud-platform"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/cloud-platform`\n\nDefault value is : `- https://www.googleapis.com/auth/cloud-platform`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["id", "name", "type"],
      "title": "Delete a bucket.",
      "markdownDescription": "##### Examples\n> Delete a bucket\n```yaml\nname: \"my-bucket\"\n```"
    },
    "io.kestra.plugin.gcp.gcs.DeleteBucket-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteBucket-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.gcp.gcs.DeleteBucket" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Delete a bucket\n```yaml\nname: \"my-bucket\"\n```"
    },
    "io.kestra.plugin.gcp.gcs.DeleteList-1": {
      "type": "object",
      "properties": {
        "allVersions": {
          "type": "boolean",
          "title": "If set to `true`, lists all versions of a blob. The default is `false`.",
          "$dynamic": true
        },
        "concurrent": {
          "type": "integer",
          "title": "Number of concurrent parrallels deletion",
          "minimum": 2,
          "$dynamic": false
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "errorOnEmpty": {
          "type": "boolean",
          "title": "raise an error if the file is not found",
          "default": false,
          "$dynamic": true,
          "markdownDescription": "Default value is : `false`"
        },
        "from": { "type": "string", "title": "The directory to list", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "listingType": {
          "type": "string",
          "enum": ["RECURSIVE", "DIRECTORY"],
          "title": "The listing type you want (like directory or recursive)",
          "default": "DIRECTORY",
          "markdownDescription": "if DIRECTORY, will only list objects in the specified directory\nif RECURSIVE, will list objects in the specified directory recursively\nDefault value is DIRECTORY\nWhen using RECURSIVE value, be carefull to move your files to a location not in the `from` scope\n\nDefault value is : `DIRECTORY`"
        },
        "projectId": { "type": "string", "title": "The GCP project id", "$dynamic": true },
        "regExp": {
          "type": "string",
          "title": "A regexp to filter on full path",
          "$dynamic": true,
          "markdownDescription": "ex:\n`regExp: .*` to match all files\n`regExp: .*2020-01-0.\\\\.csv` to match files between 01 and 09 of january ending with `.csv`"
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/cloud-platform"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/cloud-platform`\n\nDefault value is : `- https://www.googleapis.com/auth/cloud-platform`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["from", "id", "type"],
      "title": "Delete all file to a GCS bucket.",
      "markdownDescription": "##### Examples\n> \n```yaml\nfrom: \"gs://my_bucket/dir/\"\n```"
    },
    "io.kestra.plugin.gcp.gcs.DeleteList-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.DeleteList-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.gcp.gcs.DeleteList" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nfrom: \"gs://my_bucket/dir/\"\n```"
    },
    "io.kestra.plugin.gcp.gcs.Download-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "from": { "type": "string", "title": "The file to copy", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "projectId": { "type": "string", "title": "The GCP project id", "$dynamic": true },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/cloud-platform"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/cloud-platform`\n\nDefault value is : `- https://www.googleapis.com/auth/cloud-platform`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["id", "type"],
      "title": "Download a file from a GCS bucket.",
      "markdownDescription": "##### Examples\n> \n```yaml\nfrom: \"gs://my_bucket/dir/file.csv\"\n```"
    },
    "io.kestra.plugin.gcp.gcs.Download-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Download-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.gcp.gcs.Download" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nfrom: \"gs://my_bucket/dir/file.csv\"\n```"
    },
    "io.kestra.plugin.gcp.gcs.Downloads-1": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "enum": ["MOVE", "DELETE"],
          "title": "The action to do on find files",
          "$dynamic": true
        },
        "allVersions": {
          "type": "boolean",
          "title": "If set to `true`, lists all versions of a blob. The default is `false`.",
          "$dynamic": true
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "from": { "type": "string", "title": "The directory to list", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "listingType": {
          "type": "string",
          "enum": ["RECURSIVE", "DIRECTORY"],
          "title": "The listing type you want (like directory or recursive)",
          "default": "DIRECTORY",
          "markdownDescription": "if DIRECTORY, will only list objects in the specified directory\nif RECURSIVE, will list objects in the specified directory recursively\nDefault value is DIRECTORY\nWhen using RECURSIVE value, be carefull to move your files to a location not in the `from` scope\n\nDefault value is : `DIRECTORY`"
        },
        "moveDirectory": {
          "type": "string",
          "title": "The destination directory in case off `MOVE` ",
          "$dynamic": true
        },
        "projectId": { "type": "string", "title": "The GCP project id", "$dynamic": true },
        "regExp": {
          "type": "string",
          "title": "A regexp to filter on full path",
          "$dynamic": true,
          "markdownDescription": "ex:\n`regExp: .*` to match all files\n`regExp: .*2020-01-0.\\\\.csv` to match files between 01 and 09 of january ending with `.csv`"
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/cloud-platform"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/cloud-platform`\n\nDefault value is : `- https://www.googleapis.com/auth/cloud-platform`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["action", "from", "id", "type"],
      "title": "Download multiple files from a GCS bucket.",
      "markdownDescription": "##### Examples\n> Download a list of files and move it to an archive folders\n```yaml\nfrom: gs://my-bucket/kestra/files/\naction: MOVE\nmoveDirectory: gs://my-bucket/kestra/archive/\n```"
    },
    "io.kestra.plugin.gcp.gcs.Downloads-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Downloads-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.gcp.gcs.Downloads" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Download a list of files and move it to an archive folders\n```yaml\nfrom: gs://my-bucket/kestra/files/\naction: MOVE\nmoveDirectory: gs://my-bucket/kestra/archive/\n```"
    },
    "io.kestra.plugin.gcp.gcs.List-1": {
      "type": "object",
      "properties": {
        "allVersions": {
          "type": "boolean",
          "title": "If set to `true`, lists all versions of a blob. The default is `false`.",
          "$dynamic": true
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "filter": {
          "type": "string",
          "enum": ["FILES", "DIRECTORY", "BOTH"],
          "title": "The filter files or directory",
          "default": "BOTH",
          "markdownDescription": "Default value is : `BOTH`"
        },
        "from": { "type": "string", "title": "The directory to list", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "listingType": {
          "type": "string",
          "enum": ["RECURSIVE", "DIRECTORY"],
          "title": "The listing type you want (like directory or recursive)",
          "default": "DIRECTORY",
          "markdownDescription": "if DIRECTORY, will only list objects in the specified directory\nif RECURSIVE, will list objects in the specified directory recursively\nDefault value is DIRECTORY\nWhen using RECURSIVE value, be carefull to move your files to a location not in the `from` scope\n\nDefault value is : `DIRECTORY`"
        },
        "projectId": { "type": "string", "title": "The GCP project id", "$dynamic": true },
        "regExp": {
          "type": "string",
          "title": "A regexp to filter on full path",
          "$dynamic": true,
          "markdownDescription": "ex:\n`regExp: .*` to match all files\n`regExp: .*2020-01-0.\\\\.csv` to match files between 01 and 09 of january ending with `.csv`"
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/cloud-platform"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/cloud-platform`\n\nDefault value is : `- https://www.googleapis.com/auth/cloud-platform`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["from", "id", "type"],
      "title": "List file on a GCS bucket.",
      "markdownDescription": "##### Examples\n> List files in a bucket\n```yaml\nfrom: \"gs://my_bucket/dir/\"\n```"
    },
    "io.kestra.plugin.gcp.gcs.List-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.List-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.gcp.gcs.List" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> List files in a bucket\n```yaml\nfrom: \"gs://my_bucket/dir/\"\n```"
    },
    "io.kestra.plugin.gcp.gcs.Trigger-1": {
      "type": "object",
      "properties": {
        "action": {
          "type": "string",
          "enum": ["MOVE", "DELETE"],
          "title": "The action to do on find files",
          "$dynamic": true
        },
        "conditions": {
          "title": "List of Conditions in order to limit the flow trigger.",
          "type": "array",
          "items": {
            "anyOf": [
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.NotCondition-2" },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionStatusCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.DateTimeBetweenCondition-2"
              },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.FlowCondition-2" },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionFlowCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.HasRetryAttemptCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.DayWeekInMonthCondition-2"
              },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.DayWeekCondition-2" },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.WeekendCondition-2" },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.ExecutionNamespaceCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.VariableCondition-2"
              },
              {
                "$ref": "#/definitions/io.kestra.core.models.conditions.types.FlowNamespaceCondition-2"
              },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.OrCondition-2" },
              { "$ref": "#/definitions/io.kestra.core.models.conditions.types.MultipleCondition-2" }
            ]
          }
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "from": { "type": "string", "title": "The directory to list", "$dynamic": true },
        "id": {
          "type": "string",
          "title": "A unique id for the whole flow",
          "minLength": 1,
          "pattern": "[a-zA-Z0-9_-]+"
        },
        "interval": {
          "type": "string",
          "format": "duration",
          "title": "Interval between polling",
          "default": "PT1S",
          "$dynamic": false,
          "markdownDescription": "The interval between 2 different test of schedule, this can avoid to overload the remote system with too many call. For most of trigger that depend on external system, a minimal interval must be at least PT30S.\nSee [ISO_8601 Durations](https://en.wikipedia.org/wiki/ISO_8601#Durations) for more information of available interval value\n\nDefault value is : `PT1S`"
        },
        "listingType": {
          "type": "string",
          "enum": ["RECURSIVE", "DIRECTORY"],
          "title": "The listing type you want (like directory or recursive)",
          "default": "DIRECTORY",
          "markdownDescription": "if DIRECTORY, will only list objects in the specified directory\nif RECURSIVE, will list objects in the specified directory recursively\nDefault value is DIRECTORY\nWhen using RECURSIVE value, be carefull to move your files to a location not in the `from` scope\n\nDefault value is : `DIRECTORY`"
        },
        "moveDirectory": {
          "type": "string",
          "title": "The destination directory in case off `MOVE` ",
          "$dynamic": true
        },
        "projectId": { "type": "string", "title": "The GCP project id", "$dynamic": true },
        "regExp": {
          "type": "string",
          "title": "A regexp to filter on full path",
          "$dynamic": true,
          "markdownDescription": "ex:\n`regExp: .*` to match all files\n`regExp: .*2020-01-0.\\\\.csv` to match files between 01 and 09 of january ending with `.csv`"
        },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/cloud-platform"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/cloud-platform`\n\nDefault value is : `- https://www.googleapis.com/auth/cloud-platform`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "type": {
          "type": "string",
          "title": "The class name for this current trigger",
          "minLength": 1
        }
      },
      "required": ["action", "from", "id", "type"],
      "title": "Wait for files on Google cloud storage",
      "markdownDescription": "This trigger will poll every `interval` a GCS bucket. You can search for all files in a bucket or directory in `from` or you can filter the files with a `regExp`.The detection is atomic, internally we do a list and interact only with files listed.\nOnce a file is detected, we download the file on internal storage and processed with declared `action` in order to move or delete the files from the bucket (to avoid double detection on new poll)##### Examples\n> Wait for a list of file on a GCS bucket and iterate through the files\n```yaml\nid: gcs-listen\nnamespace: io.kestra.tests\n\ntasks:\n  - id: each\n    type: io.kestra.core.tasks.flows.EachSequential\n    tasks:\n      - id: return\n        type: io.kestra.core.tasks.debugs.Return\n        format: \"{{taskrun.value}}\"\n    value: \"{{ trigger.blobs | jq('.[].uri') }}\"\n\ntriggers:\n  - id: watch\n    type: io.kestra.plugin.gcp.gcs.Trigger\n    interval: \"PT5M\"\n    from: gs://my-bucket/kestra/listen/\n    action: MOVE\n    moveDirectory: gs://my-bucket/kestra/archive/\n```"
    },
    "io.kestra.plugin.gcp.gcs.Trigger-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Trigger-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.gcp.gcs.Trigger" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Wait for a list of file on a GCS bucket and iterate through the files\n```yaml\nid: gcs-listen\nnamespace: io.kestra.tests\n\ntasks:\n  - id: each\n    type: io.kestra.core.tasks.flows.EachSequential\n    tasks:\n      - id: return\n        type: io.kestra.core.tasks.debugs.Return\n        format: \"{{taskrun.value}}\"\n    value: \"{{ trigger.blobs | jq('.[].uri') }}\"\n\ntriggers:\n  - id: watch\n    type: io.kestra.plugin.gcp.gcs.Trigger\n    interval: \"PT5M\"\n    from: gs://my-bucket/kestra/listen/\n    action: MOVE\n    moveDirectory: gs://my-bucket/kestra/archive/\n```"
    },
    "io.kestra.plugin.gcp.gcs.UpdateBucket-1": {
      "type": "object",
      "properties": {
        "acl": {
          "title": "The bucket's access control configuration",
          "markdownDescription": " See <a href=\"https://cloud.google.com/storage/docs/access-control#About-Access-Control-Lists\">About Access Control Lists</a>",
          "type": "array",
          "items": { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.models.AccessControl" }
        },
        "cors": {
          "title": "The bucket's Cross-Origin Resource Sharing (CORS) configuration",
          "markdownDescription": " See <a href=\"https://cloud.google.com/storage/docs/cross-origin\">Cross-Origin ResourceSharing (CORS)</a>",
          "type": "array",
          "items": { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.models.Cors" }
        },
        "defaultAcl": {
          "title": "The default access control configuration",
          "markdownDescription": "The access control configuration to apply to bucket's blobs when no other configuration is specified.\n See <a     href=\"https://cloud.google.com/storage/docs/access-control#About-Access-Control-Lists\">About Access Control Lists</a>",
          "type": "array",
          "items": { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.models.AccessControl" }
        },
        "defaultEventBasedHold": {
          "type": "boolean",
          "title": "The default event-based hold for this bucket"
        },
        "defaultKmsKeyName": {
          "type": "string",
          "title": "The default Cloud KMS key name for this bucket"
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "iamConfiguration": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.models.IamConfiguration" },
            {
              "title": "The Bucket's IAM Configuration",
              "markdownDescription": " See <a href=\"https://cloud.google.com/storage/docs/uniform-bucket-level-access\">uniform  bucket-level access</a>"
            }
          ]
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "indexPage": {
          "type": "string",
          "title": "The bucket's website index page",
          "markdownDescription": "Behaves as the bucket's directory index where missing  blobs are treated as potential directories."
        },
        "labels": { "type": "object", "title": "The labels of this bucket", "$dynamic": true },
        "lifecycleRules": {
          "title": "The bucket's lifecycle configuration",
          "markdownDescription": "This configuration is expressed as a number of lifecycle rules, consisting of an action and a condition. \n See <a href=\"https://cloud.google.com/storage/docs/lifecycle\">Object Lifecycle Management </a> \n Only the age condition is supported. Only the delete and SetStorageClass actions are supported",
          "type": "array",
          "items": { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.models.BucketLifecycleRule" }
        },
        "location": {
          "type": "string",
          "title": "The bucket's location",
          "$dynamic": true,
          "markdownDescription": "Data for blobs in the bucket resides in physical storage within this region. A list of supported values is available <a href=\"https://cloud.google.com/storage/docs/bucket-locations\">here</a>."
        },
        "logging": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.models.Logging" },
            {
              "title": "The bucket's logging configuration",
              "markdownDescription": "This configuration defines the destination bucket and optional name prefix for the current bucket's logs."
            }
          ]
        },
        "name": { "type": "string", "title": "Bucket's unique name", "$dynamic": true },
        "notFoundPage": {
          "type": "string",
          "title": "The custom object to return when a requested resource is not found"
        },
        "projectId": { "type": "string", "title": "The GCP project id", "$dynamic": true },
        "requesterPays": {
          "type": "boolean",
          "title": "Whether the requester pays or not.",
          "markdownDescription": "Whether a user accessing the bucket or an object it contains should assume the transit  costs related to the access."
        },
        "retentionPeriod": {
          "type": "integer",
          "title": "Retention period",
          "markdownDescription": "If policy is not locked this value can be cleared, increased, and decreased. If policy is  locked the retention period can only be increased."
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/cloud-platform"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/cloud-platform`\n\nDefault value is : `- https://www.googleapis.com/auth/cloud-platform`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "storageClass": {
          "type": "string",
          "enum": [
            "REGIONAL",
            "MULTI_REGIONAL",
            "NEARLINE",
            "COLDLINE",
            "STANDARD",
            "ARCHIVE",
            "DURABLE_REDUCED_AVAILABILITY"
          ],
          "title": "The bucket's storage class",
          "markdownDescription": "This defines how blobs in the bucket are stored and  determines the SLA and the cost of storage. A list of supported values is available <a href=\"https://cloud.google.com/storage/docs/storage-classes\">here</a>."
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "versioningEnabled": {
          "type": "boolean",
          "title": "Whether versioning should be enabled for this bucket",
          "markdownDescription": "When set to true, versioning is  fully enabled."
        }
      },
      "required": ["id", "name", "type"],
      "title": "Update a bucket.",
      "markdownDescription": "##### Examples\n> Update some bucket labels\n```yaml\nname: \"my-bucket\"\nlabels:\n  my-label: my-value\n```"
    },
    "io.kestra.plugin.gcp.gcs.UpdateBucket-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.UpdateBucket-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.gcp.gcs.UpdateBucket" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Update some bucket labels\n```yaml\nname: \"my-bucket\"\nlabels:\n  my-label: my-value\n```"
    },
    "io.kestra.plugin.gcp.gcs.Upload-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "from": { "type": "string", "title": "The file to copy", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "projectId": { "type": "string", "title": "The GCP project id", "$dynamic": true },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/cloud-platform"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/cloud-platform`\n\nDefault value is : `- https://www.googleapis.com/auth/cloud-platform`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "timeout": { "type": "string", "format": "duration" },
        "to": { "type": "string", "title": "The destination path", "$dynamic": true },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["id", "type"],
      "title": "Upload a file to a GCS bucket.",
      "markdownDescription": "##### Examples\n> \n```yaml\nfrom: \"{{ inputs.file }}\"\nto: \"gs://my_bucket/dir/file.csv\"\n```"
    },
    "io.kestra.plugin.gcp.gcs.Upload-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.Upload-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.gcp.gcs.Upload" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nfrom: \"{{ inputs.file }}\"\nto: \"gs://my_bucket/dir/file.csv\"\n```"
    },
    "io.kestra.plugin.gcp.gcs.models.AccessControl": {
      "type": "object",
      "properties": {
        "entity": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.models.Entity" },
            { "title": "The entity", "$dynamic": true }
          ]
        },
        "role": {
          "type": "string",
          "enum": ["READER", "WRITER", "OWNER"],
          "title": "The role to assign to the entity",
          "$dynamic": true
        }
      },
      "required": ["entity", "role"]
    },
    "io.kestra.plugin.gcp.gcs.models.BucketLifecycleRule": {
      "type": "object",
      "properties": {
        "action": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.models.BucketLifecycleRule-Action" },
            { "title": "The action to take when a lifecycle condition is met", "$dynamic": true }
          ]
        },
        "condition": {
          "allOf": [
            {
              "$ref": "#/definitions/io.kestra.plugin.gcp.gcs.models.BucketLifecycleRule-Condition"
            },
            { "title": "The condition", "$dynamic": true }
          ]
        }
      },
      "required": ["action", "condition"]
    },
    "io.kestra.plugin.gcp.gcs.models.BucketLifecycleRule-Action": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["DELETE", "SET_STORAGE_CLASS"],
          "title": "The type of the action (DELETE ...)",
          "$dynamic": true
        },
        "value": {
          "type": "string",
          "title": "The value for the action (if any)",
          "$dynamic": true
        }
      },
      "required": ["type"]
    },
    "io.kestra.plugin.gcp.gcs.models.BucketLifecycleRule-Condition": {
      "type": "object",
      "properties": {
        "age": {
          "type": "integer",
          "title": "The Age condition is satisfied when an object reaches the specified age (in days). Age is measured from the object's creation time.",
          "$dynamic": true
        }
      },
      "required": ["age"]
    },
    "io.kestra.plugin.gcp.gcs.models.Cors": {
      "type": "object",
      "properties": {
        "maxAgeSeconds": { "type": "integer" },
        "methods": {
          "type": "array",
          "items": { "type": "string", "enum": ["GET", "HEAD", "PUT", "POST", "DELETE", "OPTIONS"] }
        },
        "origins": {
          "type": "array",
          "items": { "$ref": "#/definitions/com.google.cloud.storage.Cors-Origin" }
        },
        "responseHeaders": { "type": "array", "items": { "type": "string" } }
      }
    },
    "io.kestra.plugin.gcp.gcs.models.Entity": {
      "type": "object",
      "properties": {
        "type": {
          "type": "string",
          "enum": ["DOMAIN", "GROUP", "USER"],
          "title": "The type of the entity (USER, GROUP or DOMAIN)",
          "$dynamic": true
        },
        "value": {
          "type": "string",
          "title": "The value for the entity (ex : user email if the type is USER ...)",
          "$dynamic": true
        }
      },
      "required": ["type", "value"]
    },
    "io.kestra.plugin.gcp.gcs.models.IamConfiguration": {
      "type": "object",
      "properties": {
        "publicAccessPrevention": {
          "type": "string",
          "enum": ["ENFORCED", "UNSPECIFIED", "UNKNOWN", "INHERITED"]
        },
        "uniformBucketLevelAccessEnabled": { "type": "boolean" }
      }
    },
    "io.kestra.plugin.gcp.gcs.models.Logging": {
      "type": "object",
      "properties": { "logBucket": { "type": "string" }, "logObjectPrefix": { "type": "string" } }
    },
    "io.kestra.plugin.gcp.gke.ClusterMetadata-1": {
      "type": "object",
      "properties": {
        "clusterId": {
          "type": "string",
          "title": "Cluster id where meta data are fetch",
          "$dynamic": true
        },
        "clusterProjectId": {
          "type": "string",
          "title": "Project ID in GCP were is located cluster",
          "$dynamic": true
        },
        "clusterZone": { "type": "string", "title": "Cluster zone in GCP", "$dynamic": true },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "projectId": { "type": "string", "title": "The GCP project id", "$dynamic": true },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/cloud-platform"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/cloud-platform`\n\nDefault value is : `- https://www.googleapis.com/auth/cloud-platform`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["clusterId", "id", "type"],
      "title": "Get cluster metadata.",
      "markdownDescription": "##### Examples\n> Fetch a gke cluster metadata\n```yaml\nname: \"gke-metas\"\nprojectId: my-project-id\nzone: eu-west-1c\nclusterId: my-cluster-id\n```"
    },
    "io.kestra.plugin.gcp.gke.ClusterMetadata-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.gcp.gke.ClusterMetadata-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.gcp.gke.ClusterMetadata" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Fetch a gke cluster metadata\n```yaml\nname: \"gke-metas\"\nprojectId: my-project-id\nzone: eu-west-1c\nclusterId: my-cluster-id\n```"
    },
    "io.kestra.plugin.gcp.vertexai.CustomJob-1": {
      "type": "object",
      "properties": {
        "delete": {
          "type": "boolean",
          "title": "Delete the job at the end.",
          "default": true,
          "$dynamic": true,
          "markdownDescription": "Default value is : `true`"
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "displayName": { "type": "string", "title": "The job display name", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "projectId": { "type": "string", "title": "The GCP project id", "$dynamic": true },
        "region": { "type": "string", "title": "The region", "$dynamic": true },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/cloud-platform"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/cloud-platform`\n\nDefault value is : `- https://www.googleapis.com/auth/cloud-platform`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "spec": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.plugin.gcp.vertexai.models.CustomJobSpec" },
            { "title": "The job specification", "$dynamic": false }
          ]
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "wait": {
          "type": "boolean",
          "title": "Wait for the end of the job.",
          "default": true,
          "$dynamic": true,
          "markdownDescription": "Allowing to capture job status & logs\n\nDefault value is : `true`"
        }
      },
      "required": ["displayName", "id", "region", "spec", "type"],
      "title": "Start a Vertex AI [custom job](https://cloud.google.com/vertex-ai/docs/training/create-custom-job).",
      "markdownDescription": "##### Examples\n> \n```yaml\nprojectId: my-gcp-project\nregion: europe-west1\ndisplayName: Start Custom Job\nspec:\n  workerPoolSpecs:\n  - containerSpec:\n      imageUri: gcr.io/my-gcp-project/my-dir/my-image:latest\n    machineSpec:\n      machineType: n1-standard-4\n    replicaCount: 1\n```"
    },
    "io.kestra.plugin.gcp.vertexai.CustomJob-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.gcp.vertexai.CustomJob-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.gcp.vertexai.CustomJob" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nprojectId: my-gcp-project\nregion: europe-west1\ndisplayName: Start Custom Job\nspec:\n  workerPoolSpecs:\n  - containerSpec:\n      imageUri: gcr.io/my-gcp-project/my-dir/my-image:latest\n    machineSpec:\n      machineType: n1-standard-4\n    replicaCount: 1\n```"
    },
    "io.kestra.plugin.gcp.vertexai.models.ContainerSpec": {
      "type": "object",
      "properties": {
        "args": {
          "title": "The arguments to be passed when starting the container.",
          "$dynamic": true,
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "commands": {
          "title": "The command to be invoked when the container is started.",
          "$dynamic": true,
          "markdownDescription": "It overrides the entrypoint instruction in Dockerfile when provided.",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "imageUri": {
          "type": "string",
          "title": "The URI of a container image in the Container Registry that is to be run on each worker replica.",
          "$dynamic": true,
          "markdownDescription": "Must be on google container registry, example: `gcr.io/{{ project }}/{{ dir }}/{{ image }}:{{ tag }}`"
        }
      },
      "required": ["imageUri"]
    },
    "io.kestra.plugin.gcp.vertexai.models.CustomJobSpec": {
      "type": "object",
      "properties": {
        "baseOutputDirectory": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.plugin.gcp.vertexai.models.GcsDestination" },
            {
              "title": "The Cloud Storage location to store the output of this job.",
              "$dynamic": false
            }
          ]
        },
        "enableWebAccess": {
          "type": "boolean",
          "title": "Whether you want Vertex AI to enable [interactive shell access](https://cloud.google.com/vertex-ai/docs/training/monitor-debug-interactive-shell) to training containers.",
          "$dynamic": false
        },
        "network": {
          "type": "string",
          "title": "The full name of the Compute Engine [network](/compute/docs/networks-and-firewalls#networks) to which the Job should be peered.",
          "$dynamic": true,
          "markdownDescription": "For example, `projects/12345/global/networks/myVPC`.\nFormat is of the form `projects/{project}/global/networks/{network}`. Where {project} is a project number, as in `12345`, and {network} is a network name.\nTo specify this field, you must have already [configured VPC Network Peering for Vertex AI](https://cloud.google.com/vertex-ai/docs/general/vpc-peering).\nIf this field is left unspecified, the job is not peered with any network."
        },
        "scheduling": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.plugin.gcp.vertexai.models.Scheduling" },
            { "title": "Scheduling options for a CustomJob.", "$dynamic": false }
          ]
        },
        "serviceAccount": {
          "type": "string",
          "title": "Specifies the service account for workload run-as account.",
          "$dynamic": true,
          "markdownDescription": "       Users submitting jobs must have act-as permission on this run-as account.\n       If unspecified, the [Vertex AI Custom Code Service\n       Agent](https://cloud.google.com/vertex-ai/docs/general/access-control#service-agents)\n       for the CustomJob's project is used."
        },
        "tensorboard": {
          "type": "string",
          "title": "The name of a Vertex AI Tensorboard resource to which this CustomJob",
          "$dynamic": true,
          "markdownDescription": "will upload Tensorboard logs. Format:`projects/{project}/locations/{location}/tensorboards/{tensorboard}`"
        },
        "workerPoolSpecs": {
          "title": "The spec of the worker pools including machine type and Docker image.",
          "minItems": 1,
          "$dynamic": true,
          "markdownDescription": " All worker pools except the first one are optional and can be skipped",
          "type": "array",
          "items": {
            "allOf": [
              { "$ref": "#/definitions/io.kestra.plugin.gcp.vertexai.models.WorkerPoolSpec" },
              { "$dynamic": true }
            ]
          }
        }
      },
      "required": ["workerPoolSpecs"]
    },
    "io.kestra.plugin.gcp.vertexai.models.DiscSpec": {
      "type": "object",
      "properties": {
        "bootDiskSizeGb": {
          "type": "integer",
          "title": "Size in GB of the boot disk.",
          "default": 100,
          "$dynamic": false,
          "markdownDescription": "Default value is : `100`"
        },
        "bootDiskType": {
          "type": "string",
          "enum": ["PD_SSD", "PD_STANDARD"],
          "title": "Type of the boot disk.",
          "default": "PD_SSD",
          "$dynamic": false,
          "markdownDescription": "Default value is : `PD_SSD`"
        }
      }
    },
    "io.kestra.plugin.gcp.vertexai.models.GcsDestination": {
      "type": "object",
      "properties": {
        "outputUriPrefix": {
          "type": "string",
          "title": "Google Cloud Storage URI to output directory.",
          "$dynamic": false,
          "markdownDescription": "If the uri doesn't end with '/', a '/' will be automatically appended. The directory is created if it doesn't exist."
        }
      },
      "required": ["outputUriPrefix"]
    },
    "io.kestra.plugin.gcp.vertexai.models.MachineSpec": {
      "type": "object",
      "properties": {
        "acceleratorCount": {
          "type": "integer",
          "title": "The number of accelerators to attach to the machine.",
          "$dynamic": false
        },
        "acceleratorType": {
          "type": "string",
          "enum": [
            "ACCELERATOR_TYPE_UNSPECIFIED",
            "NVIDIA_TESLA_K80",
            "NVIDIA_TESLA_P100",
            "NVIDIA_TESLA_V100",
            "NVIDIA_TESLA_P4",
            "NVIDIA_TESLA_T4",
            "NVIDIA_TESLA_A100",
            "TPU_V2",
            "TPU_V3",
            "UNRECOGNIZED"
          ],
          "title": "The type of accelerator(s) that may be attached to the machine.",
          "$dynamic": true
        },
        "machineType": {
          "type": "string",
          "title": " The type of the machine.",
          "$dynamic": true,
          "markdownDescription": "See the [list of machine types supported forprediction](https://cloud.google.com/vertex-ai/docs/predictions/configure-compute#machine-types)\nSee the [list of machine types supported for custom training](https://cloud.google.com/vertex-ai/docs/training/configure-compute#machine-types)."
        }
      },
      "required": ["machineType"]
    },
    "io.kestra.plugin.gcp.vertexai.models.PythonPackageSpec": {
      "type": "object",
      "properties": {
        "args": {
          "title": "The Google Cloud Storage location of the Python package files which are the training program and its dependent packages.",
          "$dynamic": true,
          "markdownDescription": "The maximum number of package URIs is 100.",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "envs": {
          "type": "object",
          "title": "Environment variables to be passed to the python module.",
          "$dynamic": true,
          "markdownDescription": "Maximum limit is 100."
        },
        "packageUris": {
          "title": "The Google Cloud Storage location of the Python package files which are the training program and its dependent packages.",
          "$dynamic": true,
          "markdownDescription": "The maximum number of package URIs is 100.",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        }
      },
      "required": ["args", "envs", "packageUris"]
    },
    "io.kestra.plugin.gcp.vertexai.models.Scheduling": {
      "type": "object",
      "properties": {
        "restartJobOnWorkerRestart": {
          "type": "boolean",
          "title": "Restarts the entire CustomJob if a worker gets restarted.",
          "$dynamic": false,
          "markdownDescription": "This feature can be used by distributed training jobs that are not resilient to workers leaving and joining a job."
        },
        "timeOut": {
          "type": "string",
          "format": "duration",
          "title": "The maximum job running time. The default is 7 days.",
          "$dynamic": false
        }
      },
      "required": ["restartJobOnWorkerRestart", "timeOut"]
    },
    "io.kestra.plugin.gcp.vertexai.models.WorkerPoolSpec": {
      "type": "object",
      "properties": {
        "containerSpec": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.plugin.gcp.vertexai.models.ContainerSpec" },
            { "title": " The custom container task.", "$dynamic": false }
          ]
        },
        "discSpec": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.plugin.gcp.vertexai.models.DiscSpec" },
            { "title": "The specification of the disk.", "$dynamic": false }
          ]
        },
        "machineSpec": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.plugin.gcp.vertexai.models.MachineSpec" },
            { "title": "The specification of a single machine.", "$dynamic": false }
          ]
        },
        "pythonPackageSpec": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.plugin.gcp.vertexai.models.PythonPackageSpec" },
            { "title": "The python package specs.", "$dynamic": false }
          ]
        },
        "replicaCount": {
          "type": "integer",
          "title": "The specification of the disk.",
          "$dynamic": false
        }
      },
      "required": ["containerSpec", "machineSpec"]
    },
    "io.kestra.plugin.googleworkspace.drive.Create-1": {
      "type": "object",
      "properties": {
        "description": {
          "type": "string",
          "title": "A short description of the file.",
          "$dynamic": true
        },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "mimeType": {
          "type": "string",
          "title": "The MIME type of the file.",
          "$dynamic": true,
          "markdownDescription": "Drive will attempt to automatically detect an appropriate value from uploaded content if no value is provided. The value cannot be changed unless a new revision is uploaded. If a file is created with a Google Doc MIME type, the uploaded content will be imported if possible. The supported import formats are published [here](https://developers.google.com/drive/api/v3/mime-types)."
        },
        "name": {
          "type": "string",
          "title": "The name of the file",
          "$dynamic": true,
          "markdownDescription": "This is not necessarily unique within a folder"
        },
        "parents": {
          "title": "The destination path",
          "$dynamic": true,
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/drive"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/drive`\n\nDefault value is : `- https://www.googleapis.com/auth/drive`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "teamDriveId": {
          "type": "string",
          "title": "ID of the Team Drive the file resides in.",
          "$dynamic": true
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["id", "type"],
      "title": "Create a file or a folder.",
      "markdownDescription": "##### Examples\n> \n```yaml\nname: \"My Folder\"\nname: \"application/vnd.google-apps.folder\"\n```"
    },
    "io.kestra.plugin.googleworkspace.drive.Create-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Create-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.googleworkspace.drive.Create" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nname: \"My Folder\"\nname: \"application/vnd.google-apps.folder\"\n```"
    },
    "io.kestra.plugin.googleworkspace.drive.Delete-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "fileId": { "type": "string", "title": "The file id to delete", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/drive"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/drive`\n\nDefault value is : `- https://www.googleapis.com/auth/drive`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["id", "type"],
      "title": "Delete a file on a Drive folder.",
      "markdownDescription": "##### Examples\n> \n```yaml\nfileId: \"1Dkd3W0OQo-wxz1rrORLP7YGSj6EBLEg74fiTdbJUIQE\"\n```"
    },
    "io.kestra.plugin.googleworkspace.drive.Delete-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Delete-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.googleworkspace.drive.Delete" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nfileId: \"1Dkd3W0OQo-wxz1rrORLP7YGSj6EBLEg74fiTdbJUIQE\"\n```"
    },
    "io.kestra.plugin.googleworkspace.drive.Download-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "fileId": { "type": "string", "title": "The file id to copy", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/drive"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/drive`\n\nDefault value is : `- https://www.googleapis.com/auth/drive`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["fileId", "id", "type"],
      "title": "Download a file in a Drive folder.",
      "markdownDescription": "##### Examples\n> \n```yaml\nfileId: \"1Dkd3W0OQo-wxz1rrORLP7YGSj6EBLEg74fiTdbJUIQE\"\n```"
    },
    "io.kestra.plugin.googleworkspace.drive.Download-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Download-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.googleworkspace.drive.Download" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nfileId: \"1Dkd3W0OQo-wxz1rrORLP7YGSj6EBLEg74fiTdbJUIQE\"\n```"
    },
    "io.kestra.plugin.googleworkspace.drive.Export-1": {
      "type": "object",
      "properties": {
        "contentType": {
          "type": "string",
          "title": "The content-type of the file.",
          "$dynamic": true,
          "markdownDescription": "a valid [RFC2045](https://datatracker.ietf.org/doc/html/rfc2045) like `text/csv`, `application/msword`, ... "
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "fileId": { "type": "string", "title": "The file id to copy", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/drive"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/drive`\n\nDefault value is : `- https://www.googleapis.com/auth/drive`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["contentType", "fileId", "id", "type"],
      "title": "Export a file in a Drive folder.",
      "markdownDescription": "##### Examples\n> \n```yaml\nfileId: \"1Dkd3W0OQo-wxz1rrORLP7YGSj6EBLEg74fiTdbJUIQE\"\n```"
    },
    "io.kestra.plugin.googleworkspace.drive.Export-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Export-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.googleworkspace.drive.Export" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nfileId: \"1Dkd3W0OQo-wxz1rrORLP7YGSj6EBLEg74fiTdbJUIQE\"\n```"
    },
    "io.kestra.plugin.googleworkspace.drive.List-1": {
      "type": "object",
      "properties": {
        "corpora": {
          "title": "list of bodies of items (files/documents) to which the query applies.",
          "$dynamic": false,
          "markdownDescription": "'allTeamDrives' must be combined with 'user'; all other values must be used in isolation. Prefer 'user' or 'teamDrive' to 'allTeamDrives' for efficiency.",
          "type": "array",
          "items": {
            "type": "string",
            "enum": ["user", "domain", "teamDrive", "allTeamDrives"],
            "$dynamic": false
          }
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "query": {
          "type": "string",
          "title": "Query operators to filter results",
          "$dynamic": true,
          "markdownDescription": "see details [here](https://developers.google.com/drive/api/v3/search-files)\nif not defined, will list all files that the service account have access"
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/drive"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/drive`\n\nDefault value is : `- https://www.googleapis.com/auth/drive`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["id", "type"],
      "title": "List file on a Drive folder.",
      "markdownDescription": "##### Examples\n> List subfolder in a Drive folder\n```yaml\nquery: |\n  mimeType = 'application/vnd.google-apps.folder' \n  and '1z2GZgLEX12BN9zbVE6TodrCHyTRMj_ka' in parents\n```"
    },
    "io.kestra.plugin.googleworkspace.drive.List-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.List-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.googleworkspace.drive.List" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> List subfolder in a Drive folder\n```yaml\nquery: |\n  mimeType = 'application/vnd.google-apps.folder' \n  and '1z2GZgLEX12BN9zbVE6TodrCHyTRMj_ka' in parents\n```"
    },
    "io.kestra.plugin.googleworkspace.drive.Upload-1": {
      "type": "object",
      "properties": {
        "contentType": {
          "type": "string",
          "title": "The content-type of the file.",
          "$dynamic": true,
          "markdownDescription": "a valid [RFC2045](https://datatracker.ietf.org/doc/html/rfc2045) like `text/csv`, `application/msword`, ... "
        },
        "description": {
          "type": "string",
          "title": "A short description of the file.",
          "$dynamic": true
        },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "fileId": {
          "type": "string",
          "title": "The file id to update",
          "$dynamic": true,
          "markdownDescription": "If not provided, it will create a new file"
        },
        "from": { "type": "string", "title": "The file to copy", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "mimeType": {
          "type": "string",
          "title": "The MIME type of the file.",
          "$dynamic": true,
          "markdownDescription": "Drive will attempt to automatically detect an appropriate value from uploaded content if no value is provided. The value cannot be changed unless a new revision is uploaded. If a file is created with a Google Doc MIME type, the uploaded content will be imported if possible. The supported import formats are published [here](https://developers.google.com/drive/api/v3/mime-types)."
        },
        "name": {
          "type": "string",
          "title": "The name of the file",
          "$dynamic": true,
          "markdownDescription": "This is not necessarily unique within a folder"
        },
        "parents": {
          "title": "The destination path",
          "$dynamic": true,
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/drive"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/drive`\n\nDefault value is : `- https://www.googleapis.com/auth/drive`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "teamDriveId": {
          "type": "string",
          "title": "ID of the Team Drive the file resides in.",
          "$dynamic": true
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["contentType", "from", "id", "type"],
      "title": "Upload a file in a Drive folder.",
      "markdownDescription": "##### Examples\n> Upload a csv and convert it to sheet format\n```yaml\nfrom: \"{{ inputs.file }}\"\nparents:\n - \"1HuxzpLt1b0111MuKMgy8wAv-m9Myc1E_\"\nname: \"My awesome CSV\"\ncontentType: \"text/csv\"\nmimeType: \"application/vnd.google-apps.spreadsheet\"\n```"
    },
    "io.kestra.plugin.googleworkspace.drive.Upload-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.drive.Upload-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.googleworkspace.drive.Upload" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Upload a csv and convert it to sheet format\n```yaml\nfrom: \"{{ inputs.file }}\"\nparents:\n - \"1HuxzpLt1b0111MuKMgy8wAv-m9Myc1E_\"\nname: \"My awesome CSV\"\ncontentType: \"text/csv\"\nmimeType: \"application/vnd.google-apps.spreadsheet\"\n```"
    },
    "io.kestra.plugin.googleworkspace.sheets.Read-1": {
      "type": "object",
      "properties": {
        "dateTimeRender": {
          "type": "string",
          "enum": ["SERIAL_NUMBER", "FORMATTED_STRING"],
          "title": "How dates, times, and durations should be represented in the output.",
          "default": "FORMATTED_STRING",
          "$dynamic": false,
          "markdownDescription": "his is ignored if valueRender is `FORMATTED_VALUE`.\nMore details [here](https://developers.google.com/sheets/api/reference/rest/v4/DateTimeRenderOption)\n\nDefault value is : `FORMATTED_STRING`"
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "fetch": {
          "type": "boolean",
          "title": "Whether to Fetch the data from the query result to the task output",
          "default": false,
          "$dynamic": false,
          "markdownDescription": "Default value is : `false`"
        },
        "header": {
          "type": "boolean",
          "title": "Specifies if the first line should be the header (default: false)",
          "default": true,
          "markdownDescription": "Default value is : `true`"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/spreadsheets"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/spreadsheets`\n\nDefault value is : `- https://www.googleapis.com/auth/spreadsheets`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "selectedSheetsTitle": {
          "title": "The sheet title to be included",
          "markdownDescription": "If not provided all the sheets will be included.",
          "type": "array",
          "items": { "type": "string" }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "spreadsheetId": {
          "type": "string",
          "title": "The spreadsheet unique id",
          "$dynamic": true
        },
        "store": {
          "type": "boolean",
          "title": "Whether to store the data from the query result into an ion serialized data file",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "valueRender": {
          "type": "string",
          "enum": ["FORMATTED_VALUE", "UNFORMATTED_VALUE", "FORMULA"],
          "title": "Determines how values should be rendered in the output.",
          "default": "UNFORMATTED_VALUE",
          "$dynamic": false,
          "markdownDescription": "More details [here](https://developers.google.com/sheets/api/reference/rest/v4/ValueRenderOption)\n\nDefault value is : `UNFORMATTED_VALUE`"
        }
      },
      "required": ["id", "spreadsheetId", "type"],
      "title": "Read all sheets from a google Sheets",
      "markdownDescription": "##### Examples\n> \n```yaml\nspreadsheetId: \"1Dkd3W0OQo-wxz1rrORLP7YGSj6EBLEg74fiTdbJUIQE\"\nstore: true\nvalueRender: FORMATTED_VALUE\n```"
    },
    "io.kestra.plugin.googleworkspace.sheets.Read-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.Read-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.googleworkspace.sheets.Read" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nspreadsheetId: \"1Dkd3W0OQo-wxz1rrORLP7YGSj6EBLEg74fiTdbJUIQE\"\nstore: true\nvalueRender: FORMATTED_VALUE\n```"
    },
    "io.kestra.plugin.googleworkspace.sheets.ReadRange-1": {
      "type": "object",
      "properties": {
        "dateTimeRender": {
          "type": "string",
          "enum": ["SERIAL_NUMBER", "FORMATTED_STRING"],
          "title": "How dates, times, and durations should be represented in the output.",
          "default": "FORMATTED_STRING",
          "$dynamic": false,
          "markdownDescription": "his is ignored if valueRender is `FORMATTED_VALUE`.\nMore details [here](https://developers.google.com/sheets/api/reference/rest/v4/DateTimeRenderOption)\n\nDefault value is : `FORMATTED_STRING`"
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "fetch": {
          "type": "boolean",
          "title": "Whether to Fetch the data from the query result to the task output",
          "default": false,
          "$dynamic": false,
          "markdownDescription": "Default value is : `false`"
        },
        "header": {
          "type": "boolean",
          "title": "Specifies if the first line should be the header (default: false)",
          "default": true,
          "markdownDescription": "Default value is : `true`"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "range": { "type": "string", "title": "The range to select" },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "scopes": {
          "title": "The GCP scopes to used",
          "default": ["https://www.googleapis.com/auth/spreadsheets"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- https://www.googleapis.com/auth/spreadsheets`\n\nDefault value is : `- https://www.googleapis.com/auth/spreadsheets`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "serviceAccount": {
          "type": "string",
          "title": "The GCP service account key",
          "$dynamic": true
        },
        "spreadsheetId": {
          "type": "string",
          "title": "The spreadsheet unique id",
          "$dynamic": true
        },
        "store": {
          "type": "boolean",
          "title": "Whether to store the data from the query result into an ion serialized data file",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Default value is : `true`"
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "valueRender": {
          "type": "string",
          "enum": ["FORMATTED_VALUE", "UNFORMATTED_VALUE", "FORMULA"],
          "title": "Determines how values should be rendered in the output.",
          "default": "UNFORMATTED_VALUE",
          "$dynamic": false,
          "markdownDescription": "More details [here](https://developers.google.com/sheets/api/reference/rest/v4/ValueRenderOption)\n\nDefault value is : `UNFORMATTED_VALUE`"
        }
      },
      "required": ["id", "spreadsheetId", "type"],
      "title": "Read a range from a google Sheets",
      "markdownDescription": "##### Examples\n> \n```yaml\nspreadsheetId: \"1Dkd3W0OQo-wxz1rrORLP7YGSj6EBLEg74fiTdbJUIQE\"\nrange: \"Second One!A1:I\"\nstore: true\nvalueRender: FORMATTED_VALUE\n```"
    },
    "io.kestra.plugin.googleworkspace.sheets.ReadRange-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.googleworkspace.sheets.ReadRange-1" },
        {
          "type": "object",
          "properties": {
            "type": { "const": "io.kestra.plugin.googleworkspace.sheets.ReadRange" }
          },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\nspreadsheetId: \"1Dkd3W0OQo-wxz1rrORLP7YGSj6EBLEg74fiTdbJUIQE\"\nrange: \"Second One!A1:I\"\nstore: true\nvalueRender: FORMATTED_VALUE\n```"
    },
    "io.kestra.plugin.notifications.mail.MailExecution-1": {
      "type": "object",
      "properties": {
        "attachments": {
          "title": "Adds an attachment to the email message",
          "$dynamic": true,
          "markdownDescription": "which will be shown in the email client as separate files available for download or inline display if the client supports it (for example, most browsers these days display PDF's in a popup).",
          "type": "array",
          "items": {
            "allOf": [
              { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailSend-Attachment" },
              { "$dynamic": true }
            ]
          }
        },
        "cc": {
          "type": "string",
          "title": "One or more 'Cc' (carbon copy) optional recipient email address. Use semicolon as delimiter to provide several addresses",
          "$dynamic": true,
          "markdownDescription": "Note that each email address must be an RFC2822 format compliant address."
        },
        "customFields": {
          "type": "object",
          "title": "Custom fields to be added on notification",
          "$dynamic": true
        },
        "customMessage": {
          "type": "string",
          "title": "Custom message to be added on notification",
          "$dynamic": true
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "embeddedImages": {
          "title": "Adds image data to this email that can be referred to from the email HTML body.",
          "$dynamic": true,
          "markdownDescription": "The provided images is assumed to be of mimetype png, jpg or whatever the email client supports as valid image embedded in HTML content.",
          "type": "array",
          "items": {
            "allOf": [
              { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailSend-Attachment" },
              { "$dynamic": true }
            ]
          }
        },
        "executionId": {
          "type": "string",
          "title": "The execution id to use",
          "default": "{{ execution.id }}",
          "$dynamic": true,
          "markdownDescription": "Default is the current execution\n\nDefault value is : `\"{{ execution.id }}\"`"
        },
        "from": {
          "type": "string",
          "title": "The address of the sender of this email",
          "$dynamic": true
        },
        "host": { "type": "string", "title": "The mail server host", "$dynamic": true },
        "htmlTextContent": {
          "type": "string",
          "title": "The optional email message body in HTML text",
          "$dynamic": true,
          "markdownDescription": "Both text and HTML can be provided, which will be offered to the email client as alternative content. Email clients that support it, will favor HTML over plain text and ignore the text body completely"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "password": { "type": "string", "title": "The mail server password", "$dynamic": true },
        "port": { "type": "integer", "title": "The mail server port", "$dynamic": true },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "sessionTimeout": {
          "type": "integer",
          "title": "Controls the timeout to use when sending emails",
          "default": 1000,
          "markdownDescription": "It affects socket connect-, read- and write timeouts\n\nDefault value is : `1000`"
        },
        "subject": {
          "type": "string",
          "title": "The optional subject of this email",
          "$dynamic": true
        },
        "templateRenderMap": {
          "type": "object",
          "title": "Render map to use for template",
          "$dynamic": true
        },
        "templateUri": { "type": "string", "title": "Template to use", "$dynamic": true },
        "timeout": { "type": "string", "format": "duration" },
        "to": {
          "type": "string",
          "title": "One or more recipient email address. Use semicolon as delimiter to provide several addresses",
          "$dynamic": true,
          "markdownDescription": "Note that each email address must be an RFC2822 format compliant address"
        },
        "transportStrategy": {
          "type": "string",
          "enum": ["SMTP", "SMTPS", "SMTP_TLS", "SMTP_OAUTH2"],
          "title": "The optional transport strategy",
          "default": "SMTPS",
          "markdownDescription": "Will default to SMTPS if left empty.\n\nDefault value is : `SMTPS`"
        },
        "type": { "type": "string", "minLength": 1 },
        "username": { "type": "string", "title": "The mail server username", "$dynamic": true }
      },
      "required": ["id", "type"],
      "title": "Task to send a mail with execution information",
      "markdownDescription": "Main execution information are provided in the sent mail (id, namespace, flow, state, duration, start date ...).##### Examples\n> Send a mail notification on failed flow\n```yaml\nid: mail\nnamespace: io.kestra.tests\n\nlisteners:\n  - conditions:\n      - type: io.kestra.core.models.conditions.types.ExecutionStatusCondition\n        in:\n          - FAILED\n    tasks:\n      - id: mail\n        type: io.kestra.plugin.notifications.mail.MailExecution\n        to: to@mail.com\n        from: from@mail.com\n        subject: This is the subject\n        host: nohost-mail.site\n        port: 465\n        username: user\n        password: pass\n        sessionTimeout: 1000\n        transportStrategy: SMTPS\n\ntasks:\n  - id: ok\n    type: io.kestra.core.tasks.debugs.Return\n    format: \"{{task.id}} > {{taskrun.startDate}}\"\n```"
    },
    "io.kestra.plugin.notifications.mail.MailExecution-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailExecution-1" },
        {
          "type": "object",
          "properties": {
            "type": { "const": "io.kestra.plugin.notifications.mail.MailExecution" }
          },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Send a mail notification on failed flow\n```yaml\nid: mail\nnamespace: io.kestra.tests\n\nlisteners:\n  - conditions:\n      - type: io.kestra.core.models.conditions.types.ExecutionStatusCondition\n        in:\n          - FAILED\n    tasks:\n      - id: mail\n        type: io.kestra.plugin.notifications.mail.MailExecution\n        to: to@mail.com\n        from: from@mail.com\n        subject: This is the subject\n        host: nohost-mail.site\n        port: 465\n        username: user\n        password: pass\n        sessionTimeout: 1000\n        transportStrategy: SMTPS\n\ntasks:\n  - id: ok\n    type: io.kestra.core.tasks.debugs.Return\n    format: \"{{task.id}} > {{taskrun.startDate}}\"\n```"
    },
    "io.kestra.plugin.notifications.mail.MailSend-1": {
      "type": "object",
      "properties": {
        "attachments": {
          "title": "Adds an attachment to the email message",
          "$dynamic": true,
          "markdownDescription": "which will be shown in the email client as separate files available for download or inline display if the client supports it (for example, most browsers these days display PDF's in a popup).",
          "type": "array",
          "items": {
            "allOf": [
              { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailSend-Attachment" },
              { "$dynamic": true }
            ]
          }
        },
        "cc": {
          "type": "string",
          "title": "One or more 'Cc' (carbon copy) optional recipient email address. Use semicolon as delimiter to provide several addresses",
          "$dynamic": true,
          "markdownDescription": "Note that each email address must be an RFC2822 format compliant address."
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "embeddedImages": {
          "title": "Adds image data to this email that can be referred to from the email HTML body.",
          "$dynamic": true,
          "markdownDescription": "The provided images is assumed to be of mimetype png, jpg or whatever the email client supports as valid image embedded in HTML content.",
          "type": "array",
          "items": {
            "allOf": [
              { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailSend-Attachment" },
              { "$dynamic": true }
            ]
          }
        },
        "from": {
          "type": "string",
          "title": "The address of the sender of this email",
          "$dynamic": true
        },
        "host": { "type": "string", "title": "The mail server host", "$dynamic": true },
        "htmlTextContent": {
          "type": "string",
          "title": "The optional email message body in HTML text",
          "$dynamic": true,
          "markdownDescription": "Both text and HTML can be provided, which will be offered to the email client as alternative content. Email clients that support it, will favor HTML over plain text and ignore the text body completely"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "password": { "type": "string", "title": "The mail server password", "$dynamic": true },
        "port": { "type": "integer", "title": "The mail server port", "$dynamic": true },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "sessionTimeout": {
          "type": "integer",
          "title": "Controls the timeout to use when sending emails",
          "default": 1000,
          "markdownDescription": "It affects socket connect-, read- and write timeouts\n\nDefault value is : `1000`"
        },
        "subject": {
          "type": "string",
          "title": "The optional subject of this email",
          "$dynamic": true
        },
        "timeout": { "type": "string", "format": "duration" },
        "to": {
          "type": "string",
          "title": "One or more recipient email address. Use semicolon as delimiter to provide several addresses",
          "$dynamic": true,
          "markdownDescription": "Note that each email address must be an RFC2822 format compliant address"
        },
        "transportStrategy": {
          "type": "string",
          "enum": ["SMTP", "SMTPS", "SMTP_TLS", "SMTP_OAUTH2"],
          "title": "The optional transport strategy",
          "default": "SMTPS",
          "markdownDescription": "Will default to SMTPS if left empty.\n\nDefault value is : `SMTPS`"
        },
        "type": { "type": "string", "minLength": 1 },
        "username": { "type": "string", "title": "The mail server username", "$dynamic": true }
      },
      "required": ["id", "type"],
      "title": "Generic task to send a mail."
    },
    "io.kestra.plugin.notifications.mail.MailSend-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailSend-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.notifications.mail.MailSend" } },
          "required": ["type"]
        }
      ]
    },
    "io.kestra.plugin.notifications.mail.MailSend-Attachment": {
      "type": "object",
      "properties": {
        "contentType": {
          "type": "string",
          "title": "One or more 'Cc' (carbon copy) optional recipient email address. Use semicolon as delimiter to provide several addresses",
          "default": "application/octet-stream",
          "$dynamic": true,
          "markdownDescription": "Note that each email address must be an RFC2822 format compliant address.\n\nDefault value is : `application/octet-stream`"
        },
        "name": {
          "type": "string",
          "title": "name of the attachment (eg. 'filename.ext').",
          "$dynamic": true
        },
        "uri": {
          "type": "string",
          "title": "An attachment uri from kestra internal storage",
          "$dynamic": true
        }
      },
      "required": ["name", "uri"]
    },
    "io.kestra.plugin.notifications.mail.MailTemplate-1": {
      "type": "object",
      "properties": {
        "attachments": {
          "title": "Adds an attachment to the email message",
          "$dynamic": true,
          "markdownDescription": "which will be shown in the email client as separate files available for download or inline display if the client supports it (for example, most browsers these days display PDF's in a popup).",
          "type": "array",
          "items": {
            "allOf": [
              { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailSend-Attachment" },
              { "$dynamic": true }
            ]
          }
        },
        "cc": {
          "type": "string",
          "title": "One or more 'Cc' (carbon copy) optional recipient email address. Use semicolon as delimiter to provide several addresses",
          "$dynamic": true,
          "markdownDescription": "Note that each email address must be an RFC2822 format compliant address."
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "embeddedImages": {
          "title": "Adds image data to this email that can be referred to from the email HTML body.",
          "$dynamic": true,
          "markdownDescription": "The provided images is assumed to be of mimetype png, jpg or whatever the email client supports as valid image embedded in HTML content.",
          "type": "array",
          "items": {
            "allOf": [
              { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailSend-Attachment" },
              { "$dynamic": true }
            ]
          }
        },
        "from": {
          "type": "string",
          "title": "The address of the sender of this email",
          "$dynamic": true
        },
        "host": { "type": "string", "title": "The mail server host", "$dynamic": true },
        "htmlTextContent": {
          "type": "string",
          "title": "The optional email message body in HTML text",
          "$dynamic": true,
          "markdownDescription": "Both text and HTML can be provided, which will be offered to the email client as alternative content. Email clients that support it, will favor HTML over plain text and ignore the text body completely"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "password": { "type": "string", "title": "The mail server password", "$dynamic": true },
        "port": { "type": "integer", "title": "The mail server port", "$dynamic": true },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "sessionTimeout": {
          "type": "integer",
          "title": "Controls the timeout to use when sending emails",
          "default": 1000,
          "markdownDescription": "It affects socket connect-, read- and write timeouts\n\nDefault value is : `1000`"
        },
        "subject": {
          "type": "string",
          "title": "The optional subject of this email",
          "$dynamic": true
        },
        "templateRenderMap": {
          "type": "object",
          "title": "Render map to use for template",
          "$dynamic": true
        },
        "templateUri": { "type": "string", "title": "Template to use", "$dynamic": true },
        "timeout": { "type": "string", "format": "duration" },
        "to": {
          "type": "string",
          "title": "One or more recipient email address. Use semicolon as delimiter to provide several addresses",
          "$dynamic": true,
          "markdownDescription": "Note that each email address must be an RFC2822 format compliant address"
        },
        "transportStrategy": {
          "type": "string",
          "enum": ["SMTP", "SMTPS", "SMTP_TLS", "SMTP_OAUTH2"],
          "title": "The optional transport strategy",
          "default": "SMTPS",
          "markdownDescription": "Will default to SMTPS if left empty.\n\nDefault value is : `SMTPS`"
        },
        "type": { "type": "string", "minLength": 1 },
        "username": { "type": "string", "title": "The mail server username", "$dynamic": true }
      },
      "required": ["id", "type"],
      "title": "Task to send a mail using provided template information"
    },
    "io.kestra.plugin.notifications.mail.MailTemplate-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.notifications.mail.MailTemplate-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.notifications.mail.MailTemplate" } },
          "required": ["type"]
        }
      ]
    },
    "io.kestra.plugin.notifications.slack.SlackExecution-1": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "string",
          "title": "Slack channel to send the message to",
          "$dynamic": true
        },
        "customFields": {
          "type": "object",
          "title": "Custom fields to be added on notification",
          "$dynamic": true
        },
        "customMessage": {
          "type": "string",
          "title": "Custom message to be added on notification",
          "$dynamic": true
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "executionId": {
          "type": "string",
          "title": "The execution id to use",
          "default": "{{ execution.id }}",
          "$dynamic": true,
          "markdownDescription": "Default is the current execution\n\nDefault value is : `\"{{ execution.id }}\"`"
        },
        "iconEmoji": { "type": "string", "title": "Emoji icon to use", "$dynamic": true },
        "iconUrl": { "type": "string", "title": "Url of the icon to use", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "payload": { "type": "string", "title": "Slack message payload", "$dynamic": true },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "templateRenderMap": {
          "type": "object",
          "title": "Render map to use for template",
          "$dynamic": true
        },
        "templateUri": { "type": "string", "title": "Template to use", "$dynamic": true },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "url": {
          "type": "string",
          "title": "Slack incoming webhook url",
          "$dynamic": true,
          "markdownDescription": "See <a href=\"https://api.slack.com/messaging/webhooks#create_a_webhook\">Create an Incoming Webhook</a> "
        },
        "username": { "type": "string", "title": "Author of the slack message", "$dynamic": true }
      },
      "required": ["id", "type"],
      "title": "Task to send a slack message with execution information",
      "markdownDescription": "Main execution information are provided in the sent message (id, namespace, flow, state, duration, start date ...).##### Examples\n> Send a slack notification on failed flow\n```yaml\nid: mail\nnamespace: io.kestra.tests\n\nlisteners:\n  - conditions:\n      - type: io.kestra.core.models.conditions.types.ExecutionStatusCondition\n        in:\n          - FAILED\n    tasks:\n      - id: slack\n        type: io.kestra.plugin.notifications.slack.SlackExecution\n        url: \"https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX\"\n        channel: \"#random\"\n\n\ntasks:\n  - id: ok\n    type: io.kestra.core.tasks.debugs.Return\n    format: \"{{task.id}} > {{taskrun.startDate}}\"\n```"
    },
    "io.kestra.plugin.notifications.slack.SlackExecution-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackExecution-1" },
        {
          "type": "object",
          "properties": {
            "type": { "const": "io.kestra.plugin.notifications.slack.SlackExecution" }
          },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Send a slack notification on failed flow\n```yaml\nid: mail\nnamespace: io.kestra.tests\n\nlisteners:\n  - conditions:\n      - type: io.kestra.core.models.conditions.types.ExecutionStatusCondition\n        in:\n          - FAILED\n    tasks:\n      - id: slack\n        type: io.kestra.plugin.notifications.slack.SlackExecution\n        url: \"https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX\"\n        channel: \"#random\"\n\n\ntasks:\n  - id: ok\n    type: io.kestra.core.tasks.debugs.Return\n    format: \"{{task.id}} > {{taskrun.startDate}}\"\n```"
    },
    "io.kestra.plugin.notifications.slack.SlackIncomingWebhook-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "payload": { "type": "string", "title": "Slack message payload", "$dynamic": true },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "url": {
          "type": "string",
          "title": "Slack incoming webhook url",
          "$dynamic": true,
          "markdownDescription": "See <a href=\"https://api.slack.com/messaging/webhooks#create_a_webhook\">Create an Incoming Webhook</a> "
        }
      },
      "required": ["id", "type"],
      "title": "Generic task to send a slack message.",
      "markdownDescription": "See <a href=\"https://api.slack.com/messaging/webhooks\">Sending messages using Incoming Webhooks</a>##### Examples\n> Send a slack notification\n```yaml\nurl: \"https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX\"\npayload: |\n  {\n    \"channel\": \"#my-chan\",\n    \"text\": \"Flow `{{ flow.namespace }}.{{ flow.id }}` started with execution `{{ execution.id }}`\"\n  }\n```"
    },
    "io.kestra.plugin.notifications.slack.SlackIncomingWebhook-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackIncomingWebhook-1" },
        {
          "type": "object",
          "properties": {
            "type": { "const": "io.kestra.plugin.notifications.slack.SlackIncomingWebhook" }
          },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Send a slack notification\n```yaml\nurl: \"https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX\"\npayload: |\n  {\n    \"channel\": \"#my-chan\",\n    \"text\": \"Flow `{{ flow.namespace }}.{{ flow.id }}` started with execution `{{ execution.id }}`\"\n  }\n```"
    },
    "io.kestra.plugin.notifications.slack.SlackTemplate-1": {
      "type": "object",
      "properties": {
        "channel": {
          "type": "string",
          "title": "Slack channel to send the message to",
          "$dynamic": true
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "iconEmoji": { "type": "string", "title": "Emoji icon to use", "$dynamic": true },
        "iconUrl": { "type": "string", "title": "Url of the icon to use", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "payload": { "type": "string", "title": "Slack message payload", "$dynamic": true },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "templateRenderMap": {
          "type": "object",
          "title": "Render map to use for template",
          "$dynamic": true
        },
        "templateUri": { "type": "string", "title": "Template to use", "$dynamic": true },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 },
        "url": {
          "type": "string",
          "title": "Slack incoming webhook url",
          "$dynamic": true,
          "markdownDescription": "See <a href=\"https://api.slack.com/messaging/webhooks#create_a_webhook\">Create an Incoming Webhook</a> "
        },
        "username": { "type": "string", "title": "Author of the slack message", "$dynamic": true }
      },
      "required": ["id", "type"],
      "title": "Task to send a slack message using provided template information",
      "markdownDescription": "##### Examples\n> Send a slack notification\n```yaml\nurl: \"https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX\"\npayload: |\n  {\n    \"channel\": \"#my-chan\",\n    \"text\": \"Flow `{{ flow.namespace }}.{{ flow.id }}` started with execution `{{ execution.id }}`\"\n  }\n```"
    },
    "io.kestra.plugin.notifications.slack.SlackTemplate-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.notifications.slack.SlackTemplate-1" },
        {
          "type": "object",
          "properties": {
            "type": { "const": "io.kestra.plugin.notifications.slack.SlackTemplate" }
          },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Send a slack notification\n```yaml\nurl: \"https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX\"\npayload: |\n  {\n    \"channel\": \"#my-chan\",\n    \"text\": \"Flow `{{ flow.namespace }}.{{ flow.id }}` started with execution `{{ execution.id }}`\"\n  }\n```"
    },
    "io.kestra.plugin.openlineage.Emit-1": {
      "type": "object",
      "properties": {
        "apiKey": {
          "type": "string",
          "title": "Api key to authenticate",
          "markdownDescription": "Only used if transport type is `HTTP`"
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "event": {
          "allOf": [
            { "$ref": "#/definitions/io.kestra.plugin.openlineage.models.RunEvent" },
            {
              "title": "The runEvent to emit",
              "markdownDescription": "If not present, will be build from the trigger context.\nIf present, only State is required, other fields will be fill from flow context."
            }
          ]
        },
        "httpTimeout": {
          "type": "integer",
          "title": "Timeout in seconds",
          "markdownDescription": "Only used if transport type is `HTTP`"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "kafkaConfig": { "type": "object", "title": "Kafka Configurations" },
        "queryParams": { "type": "object", "title": "HTTP parameters" },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "server": {
          "type": "string",
          "title": "The URL server to use.",
          "$dynamic": true,
          "markdownDescription": "Correspond to the boostrap server for kafka transport type."
        },
        "timeout": { "type": "string", "format": "duration" },
        "transportType": {
          "type": "string",
          "enum": ["HTTP", "KAFKA", "CONSOLE"],
          "title": "The transport type to use",
          "default": "HTTP",
          "markdownDescription": "Default value is : `HTTP`"
        },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["id", "server", "type"],
      "title": "Emit an event to OpenLineage",
      "markdownDescription": "Emit a RunEvent to OpenLineage with a Run and a Job.\nWill use the trigger context by default."
    },
    "io.kestra.plugin.openlineage.Emit-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.openlineage.Emit-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.openlineage.Emit" } },
          "required": ["type"]
        }
      ]
    },
    "io.kestra.plugin.openlineage.models.RunEvent": {
      "type": "object",
      "properties": {
        "executionId": { "type": "string", "$dynamic": true },
        "flowId": { "type": "string", "$dynamic": true },
        "namespace": { "type": "string", "$dynamic": true },
        "state": { "type": "string", "enum": ["START", "COMPLETE", "ABORT", "FAIL", "OTHER"] }
      },
      "required": ["state"],
      "title": "Data sent to OpenLineage"
    },
    "io.kestra.plugin.scripts.jython.Eval-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "outputs": {
          "title": "A List of outputs variables that will be usable in outputs.",
          "$dynamic": false,
          "type": "array",
          "items": { "type": "string", "$dynamic": false }
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "script": { "type": "string", "title": "A full script", "$dynamic": true },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["id", "type"],
      "title": "Execute a jython script.",
      "markdownDescription": "##### Examples\n> \n```yaml\noutputs:\n  - out\n  - map\nscript: |\n  from io.kestra.core.models.executions.metrics import Counter\n  import tempfile\n  from java.io import File\n  \n  logger.info('executionId: {}', runContext.render('{{ execution.id }}'))\n  runContext.metric(Counter.of('total', 666, 'name', 'bla'))\n  \n  map = {'test': 'here'}\n  tempFile = tempfile.NamedTemporaryFile()\n  tempFile.write('555\\n666\\n')\n  \n  out = runContext.putTempFile(File(tempFile.name))\n```"
    },
    "io.kestra.plugin.scripts.jython.Eval-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.Eval-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.scripts.jython.Eval" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> \n```yaml\noutputs:\n  - out\n  - map\nscript: |\n  from io.kestra.core.models.executions.metrics import Counter\n  import tempfile\n  from java.io import File\n  \n  logger.info('executionId: {}', runContext.render('{{ execution.id }}'))\n  runContext.metric(Counter.of('total', 666, 'name', 'bla'))\n  \n  map = {'test': 'here'}\n  tempFile = tempfile.NamedTemporaryFile()\n  tempFile.write('555\\n666\\n')\n  \n  out = runContext.putTempFile(File(tempFile.name))\n```"
    },
    "io.kestra.plugin.scripts.jython.FileTransform-1": {
      "type": "object",
      "properties": {
        "concurrent": {
          "type": "integer",
          "title": "Number of concurrent parallels transform",
          "minimum": 2,
          "$dynamic": false,
          "markdownDescription": "Take care that the order is **not respected** if you use parallelism"
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "from": {
          "type": "string",
          "title": "Source file of row to transform",
          "$dynamic": true,
          "markdownDescription": "Can be an internal storage uri, a map or a list."
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "script": { "type": "string", "title": "A full script", "$dynamic": true },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["from", "id", "type"],
      "title": "Transform ion format file from kestra with a groovy script.",
      "markdownDescription": "This allow you to transform the data previously loaded by kestra as you need.\n\nTake a ion format file from kestra and iterate row per row.\nEach row will populate a `row` global variable, you need to alter this variable that will be saved on output file.\nif you set the `row` to `null`, the row will be skipped\nYou can create a variables `rows` to return many rows for a single `row`.\n##### Examples\n> Transform with file from internal storage\n```yaml\nfrom: \"{{ outputs['avro-to-gcs'] }}\"\nscript: |\n  logger.info('row: {}', row)\n\n  if row['name'] == 'richard': \n    row = None\n  else: \n    row['email'] = row['name'] + '@kestra.io'\n\n```\n\n> Transform with file from json string\n```yaml\nfrom: \"[{\"name\":\"jane\"}, {\"name\":\"richard\"}]\"\nscript: |\n  logger.info('row: {}', row)\n\n  if row['name'] == 'richard': \n    row = None\n  else: \n    row['email'] = row['name'] + '@kestra.io'\n\n```"
    },
    "io.kestra.plugin.scripts.jython.FileTransform-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.scripts.jython.FileTransform-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.scripts.jython.FileTransform" } },
          "required": ["type"]
        }
      ],
      "markdownDescription": "##### Examples\n> Transform with file from internal storage\n```yaml\nfrom: \"{{ outputs['avro-to-gcs'] }}\"\nscript: |\n  logger.info('row: {}', row)\n\n  if row['name'] == 'richard': \n    row = None\n  else: \n    row['email'] = row['name'] + '@kestra.io'\n\n```\n\n> Transform with file from json string\n```yaml\nfrom: \"[{\"name\":\"jane\"}, {\"name\":\"richard\"}]\"\nscript: |\n  logger.info('row: {}', row)\n\n  if row['name'] == 'richard': \n    row = None\n  else: \n    row['email'] = row['name'] + '@kestra.io'\n\n```"
    },
    "io.kestra.plugin.serdes.avro.AvroConverter-1": {
      "type": "object",
      "properties": {
        "dateFormat": {
          "type": "string",
          "title": "Format to use when parsing date",
          "default": "yyyy-MM-dd[XXX]",
          "$dynamic": true,
          "markdownDescription": "Default value is : `\"yyyy-MM-dd[XXX]\"`"
        },
        "datetimeFormat": {
          "type": "string",
          "title": "Format to use when parsing datetime",
          "default": "yyyy-MM-dd'T'HH:mm[:ss][.SSSSSS][XXX]",
          "$dynamic": true,
          "markdownDescription": "Default value is yyyy-MM-dd'T'HH:mm[:ss][.SSSSSS][XXX]\n\nDefault value is : `\"yyyy-MM-dd'T'HH:mm[:ss][.SSSSSS][XXX]\"`"
        },
        "decimalSeparator": {
          "type": "string",
          "title": "Character to recognize as decimal point (e.g. use ‘,’ for European data).",
          "default": ".",
          "$dynamic": true,
          "markdownDescription": "Default value is '.'\n\nDefault value is : `.`"
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "falseValues": {
          "title": "Values to consider as False",
          "default": ["f", "false", "disabled", "0", "off", "no", ""],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- f\n- \"false\"\n- disabled\n- 0\n- \"off\"\n- \"no\"\n- \"\"`\n\nDefault value is : `- f\n- \"false\"\n- disabled\n- 0\n- \"off\"\n- \"no\"\n- \"\"`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "inferAllFields": {
          "type": "boolean",
          "title": "Try to infer all fields",
          "default": false,
          "$dynamic": false,
          "markdownDescription": "If true, we try to infer all fields with `trueValues`, `trueValues` & `nullValues`.If false, we will infer bool & null only on field declared on schema as `null` and `bool`.\n\nDefault value is : `false`"
        },
        "nullValues": {
          "title": "Values to consider as null",
          "default": [
            "",
            "#N/A",
            "#N/A N/A",
            "#NA",
            "-1.#IND",
            "-1.#QNAN",
            "-NaN",
            "1.#IND",
            "1.#QNAN",
            "NA",
            "n/a",
            "nan",
            "null"
          ],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- \"\"\n- '#N/A'\n- '#N/A N/A'\n- '#NA'\n- -1.#IND\n- -1.#QNAN\n- -NaN\n- 1.#IND\n- 1.#QNAN\n- NA\n- n/a\n- nan\n- \"null\"`\n\nDefault value is : `- \"\"\n- '#N/A'\n- '#N/A N/A'\n- '#NA'\n- -1.#IND\n- -1.#QNAN\n- -NaN\n- 1.#IND\n- 1.#QNAN\n- NA\n- n/a\n- nan\n- \"null\"`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "schema": {
          "type": "string",
          "title": "The avro schema associated to the data",
          "$dynamic": true
        },
        "strictSchema": {
          "type": "boolean",
          "title": "Whether to consider a field present in the data but not declared in the schema as an error",
          "default": false,
          "$dynamic": false,
          "markdownDescription": "Default value is false\n\nDefault value is : `false`"
        },
        "timeFormat": {
          "type": "string",
          "title": "Format to use when parsing time",
          "default": "HH:mm[:ss][.SSSSSS][XXX]",
          "$dynamic": true,
          "markdownDescription": "Default value is : `\"HH:mm[:ss][.SSSSSS][XXX]\"`"
        },
        "timeZoneId": {
          "type": "string",
          "title": "Timezone to use when no timezone can be parsed on the source.",
          "default": "Europe/Paris",
          "$dynamic": false,
          "markdownDescription": "If null, the timezone will be `UTC` Default value is system timezone\n\nDefault value is : `Europe/Paris`"
        },
        "timeout": { "type": "string", "format": "duration" },
        "trueValues": {
          "title": "Values to consider as True",
          "default": ["t", "true", "enabled", "1", "on", "yes"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- t\n- \"true\"\n- enabled\n- 1\n- \"on\"\n- \"yes\"`\n\nDefault value is : `- t\n- \"true\"\n- enabled\n- 1\n- \"on\"\n- \"yes\"`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["id", "schema", "type"]
    },
    "io.kestra.plugin.serdes.avro.AvroConverter-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroConverter-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.serdes.avro.AvroConverter" } },
          "required": ["type"]
        }
      ]
    },
    "io.kestra.plugin.serdes.avro.AvroReader-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "from": { "type": "string", "title": "Source file URI", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["from", "id", "type"],
      "title": "Read a provided avro file and convert it to ion serialized data file."
    },
    "io.kestra.plugin.serdes.avro.AvroReader-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroReader-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.serdes.avro.AvroReader" } },
          "required": ["type"]
        }
      ]
    },
    "io.kestra.plugin.serdes.avro.AvroWriter-1": {
      "type": "object",
      "properties": {
        "dateFormat": {
          "type": "string",
          "title": "Format to use when parsing date",
          "default": "yyyy-MM-dd[XXX]",
          "$dynamic": true,
          "markdownDescription": "Default value is : `\"yyyy-MM-dd[XXX]\"`"
        },
        "datetimeFormat": {
          "type": "string",
          "title": "Format to use when parsing datetime",
          "default": "yyyy-MM-dd'T'HH:mm[:ss][.SSSSSS][XXX]",
          "$dynamic": true,
          "markdownDescription": "Default value is yyyy-MM-dd'T'HH:mm[:ss][.SSSSSS][XXX]\n\nDefault value is : `\"yyyy-MM-dd'T'HH:mm[:ss][.SSSSSS][XXX]\"`"
        },
        "decimalSeparator": {
          "type": "string",
          "title": "Character to recognize as decimal point (e.g. use ‘,’ for European data).",
          "default": ".",
          "$dynamic": true,
          "markdownDescription": "Default value is '.'\n\nDefault value is : `.`"
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "falseValues": {
          "title": "Values to consider as False",
          "default": ["f", "false", "disabled", "0", "off", "no", ""],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- f\n- \"false\"\n- disabled\n- 0\n- \"off\"\n- \"no\"\n- \"\"`\n\nDefault value is : `- f\n- \"false\"\n- disabled\n- 0\n- \"off\"\n- \"no\"\n- \"\"`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "from": { "type": "string", "title": "Source file URI", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "inferAllFields": {
          "type": "boolean",
          "title": "Try to infer all fields",
          "default": false,
          "$dynamic": false,
          "markdownDescription": "If true, we try to infer all fields with `trueValues`, `trueValues` & `nullValues`.If false, we will infer bool & null only on field declared on schema as `null` and `bool`.\n\nDefault value is : `false`"
        },
        "nullValues": {
          "title": "Values to consider as null",
          "default": [
            "",
            "#N/A",
            "#N/A N/A",
            "#NA",
            "-1.#IND",
            "-1.#QNAN",
            "-NaN",
            "1.#IND",
            "1.#QNAN",
            "NA",
            "n/a",
            "nan",
            "null"
          ],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- \"\"\n- '#N/A'\n- '#N/A N/A'\n- '#NA'\n- -1.#IND\n- -1.#QNAN\n- -NaN\n- 1.#IND\n- 1.#QNAN\n- NA\n- n/a\n- nan\n- \"null\"`\n\nDefault value is : `- \"\"\n- '#N/A'\n- '#N/A N/A'\n- '#NA'\n- -1.#IND\n- -1.#QNAN\n- -NaN\n- 1.#IND\n- 1.#QNAN\n- NA\n- n/a\n- nan\n- \"null\"`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "schema": {
          "type": "string",
          "title": "The avro schema associated to the data",
          "$dynamic": true
        },
        "strictSchema": {
          "type": "boolean",
          "title": "Whether to consider a field present in the data but not declared in the schema as an error",
          "default": false,
          "$dynamic": false,
          "markdownDescription": "Default value is false\n\nDefault value is : `false`"
        },
        "timeFormat": {
          "type": "string",
          "title": "Format to use when parsing time",
          "default": "HH:mm[:ss][.SSSSSS][XXX]",
          "$dynamic": true,
          "markdownDescription": "Default value is : `\"HH:mm[:ss][.SSSSSS][XXX]\"`"
        },
        "timeZoneId": {
          "type": "string",
          "title": "Timezone to use when no timezone can be parsed on the source.",
          "default": "Europe/Paris",
          "$dynamic": false,
          "markdownDescription": "If null, the timezone will be `UTC` Default value is system timezone\n\nDefault value is : `Europe/Paris`"
        },
        "timeout": { "type": "string", "format": "duration" },
        "trueValues": {
          "title": "Values to consider as True",
          "default": ["t", "true", "enabled", "1", "on", "yes"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- t\n- \"true\"\n- enabled\n- 1\n- \"on\"\n- \"yes\"`\n\nDefault value is : `- t\n- \"true\"\n- enabled\n- 1\n- \"on\"\n- \"yes\"`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["from", "id", "schema", "type"],
      "title": "Read a provided file containing ion serialized data and convert it to avro."
    },
    "io.kestra.plugin.serdes.avro.AvroWriter-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.serdes.avro.AvroWriter-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.serdes.avro.AvroWriter" } },
          "required": ["type"]
        }
      ]
    },
    "io.kestra.plugin.serdes.csv.CsvReader-1": {
      "type": "object",
      "properties": {
        "charset": {
          "type": "string",
          "title": "The name of a supported charset",
          "default": "UTF-8",
          "markdownDescription": "Default value is : `UTF-8`"
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "errorOnDifferentFieldCount": {
          "type": "boolean",
          "title": "Specifies if an exception should be thrown, if CSV data contains different field count",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "fieldSeparator": {
          "type": "string",
          "title": "The field separator character",
          "default": ",",
          "markdownDescription": "Default value is : `\",\"`"
        },
        "from": { "type": "string", "title": "Source file URI", "$dynamic": true },
        "header": {
          "type": "boolean",
          "title": "Specifies if the first line should be the header",
          "default": true,
          "markdownDescription": "Default value is : `true`"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "skipEmptyRows": {
          "type": "boolean",
          "title": "Specifies if empty rows should be skipped",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "skipRows": {
          "type": "integer",
          "title": "Number of lines to skip at the start of the file",
          "default": 0,
          "markdownDescription": "Default value is : `0`"
        },
        "textDelimiter": {
          "type": "string",
          "title": "The text delimiter character",
          "default": "\"",
          "markdownDescription": "Default value is : `'\"'`"
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["from", "id", "type"],
      "title": "Read a csv file and write it to an ion serialized data file."
    },
    "io.kestra.plugin.serdes.csv.CsvReader-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvReader-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.serdes.csv.CsvReader" } },
          "required": ["type"]
        }
      ]
    },
    "io.kestra.plugin.serdes.csv.CsvWriter-1": {
      "type": "object",
      "properties": {
        "alwaysDelimitText": {
          "type": "boolean",
          "title": "Whether fields should always be delimited using the textDelimiter option.",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "charset": {
          "type": "string",
          "title": "The name of a supported charset",
          "default": "UTF-8",
          "markdownDescription": "Default value is : `UTF-8`"
        },
        "dateFormat": {
          "type": "string",
          "title": "Format to use for date",
          "default": "yyyy-MM-dd",
          "$dynamic": true,
          "markdownDescription": "Default value is : `yyyy-MM-dd`"
        },
        "dateTimeFormat": {
          "type": "string",
          "title": "Format to use for zoned datetime",
          "default": "yyyy-MM-dd'T'HH:mm:ss.SSS[XXX]",
          "$dynamic": true,
          "markdownDescription": "Default value is : `\"yyyy-MM-dd'T'HH:mm:ss.SSS[XXX]\"`"
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "fieldSeparator": {
          "type": "string",
          "title": "The field separator character",
          "default": ",",
          "markdownDescription": "Default value is : `\",\"`"
        },
        "from": { "type": "string", "title": "Source file URI", "$dynamic": true },
        "header": {
          "type": "boolean",
          "title": "Specifies if the first line should be the header",
          "default": true,
          "markdownDescription": "Default value is : `true`"
        },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "lineDelimiter": {
          "title": "The character used to separate rows",
          "default": ["\n"],
          "markdownDescription": "Default value is : `- |2+`\n\nDefault value is : `- |2+`",
          "type": "array",
          "items": { "type": "string" }
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "textDelimiter": {
          "type": "string",
          "title": "The text delimiter character",
          "default": "\"",
          "markdownDescription": "Default value is : `'\"'`"
        },
        "timeFormat": {
          "type": "string",
          "title": "Format to use for time",
          "default": "HH:mm:ss[XXX]",
          "$dynamic": true,
          "markdownDescription": "Default value is : `\"HH:mm:ss[XXX]\"`"
        },
        "timeZoneId": {
          "type": "string",
          "title": "Timezone to use when no timezone can be parsed on the source.",
          "default": "Europe/Paris",
          "$dynamic": true,
          "markdownDescription": "Default value is : `Europe/Paris`"
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["from", "id", "type"],
      "title": "Read an ion serialized data file and write it to a csv file."
    },
    "io.kestra.plugin.serdes.csv.CsvWriter-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.serdes.csv.CsvWriter-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.serdes.csv.CsvWriter" } },
          "required": ["type"]
        }
      ]
    },
    "io.kestra.plugin.serdes.json.JsonReader-1": {
      "type": "object",
      "properties": {
        "charset": {
          "type": "string",
          "title": "The name of a supported charset",
          "default": "UTF-8",
          "markdownDescription": "Default value is UTF-8.\n\nDefault value is : `UTF-8`"
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "from": { "type": "string", "title": "Source file URI", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "newLine": {
          "type": "boolean",
          "title": "Is the file is a json new line (JSON-NL)",
          "default": true,
          "markdownDescription": "Is the file is a json with new line separator\nWarning, if not, the whole file will loaded in memory and can lead to out of memory!\n\nDefault value is : `true`"
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["from", "id", "type"],
      "title": "Read a json file and write it to an ion serialized data file."
    },
    "io.kestra.plugin.serdes.json.JsonReader-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonReader-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.serdes.json.JsonReader" } },
          "required": ["type"]
        }
      ]
    },
    "io.kestra.plugin.serdes.json.JsonWriter-1": {
      "type": "object",
      "properties": {
        "charset": {
          "type": "string",
          "title": "The name of a supported charset",
          "default": "UTF-8",
          "$dynamic": true,
          "markdownDescription": "Default value is UTF-8.\n\nDefault value is : `UTF-8`"
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "from": { "type": "string", "title": "Source file URI", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "newLine": {
          "type": "boolean",
          "title": "Is the file is a json new line (JSON-NL)",
          "default": true,
          "$dynamic": false,
          "markdownDescription": "Is the file is a json with new line separator\nWarning, if not, the whole file will loaded in memory and can lead to out of memory!\n\nDefault value is : `true`"
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "timeZoneId": {
          "type": "string",
          "title": "Timezone to use when no timezone can be parsed on the source.",
          "default": "Europe/Paris",
          "$dynamic": true,
          "markdownDescription": "Default value is : `Europe/Paris`"
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["from", "id", "type"],
      "title": "Read an ion serialized data file and write it to a new line delimited json file."
    },
    "io.kestra.plugin.serdes.json.JsonWriter-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.serdes.json.JsonWriter-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.serdes.json.JsonWriter" } },
          "required": ["type"]
        }
      ]
    },
    "io.kestra.plugin.serdes.parquet.ParquetReader-1": {
      "type": "object",
      "properties": {
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "from": { "type": "string", "title": "Source file URI", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["from", "id", "type"],
      "title": "Read a provided parquet file and convert it to ion serialized data file."
    },
    "io.kestra.plugin.serdes.parquet.ParquetReader-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetReader-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.serdes.parquet.ParquetReader" } },
          "required": ["type"]
        }
      ]
    },
    "io.kestra.plugin.serdes.parquet.ParquetWriter-1": {
      "type": "object",
      "properties": {
        "compressionCodec": {
          "type": "string",
          "enum": ["UNCOMPRESSED", "SNAPPY", "GZIP", "ZSTD"],
          "title": "The compression to used",
          "default": "GZIP",
          "$dynamic": false,
          "markdownDescription": "Default value is : `GZIP`"
        },
        "dateFormat": {
          "type": "string",
          "title": "Format to use when parsing date",
          "default": "yyyy-MM-dd[XXX]",
          "$dynamic": true,
          "markdownDescription": "Default value is : `\"yyyy-MM-dd[XXX]\"`"
        },
        "datetimeFormat": {
          "type": "string",
          "title": "Format to use when parsing datetime",
          "default": "yyyy-MM-dd'T'HH:mm[:ss][.SSSSSS][XXX]",
          "$dynamic": true,
          "markdownDescription": "Default value is yyyy-MM-dd'T'HH:mm[:ss][.SSSSSS][XXX]\n\nDefault value is : `\"yyyy-MM-dd'T'HH:mm[:ss][.SSSSSS][XXX]\"`"
        },
        "decimalSeparator": {
          "type": "string",
          "title": "Character to recognize as decimal point (e.g. use ‘,’ for European data).",
          "default": ".",
          "$dynamic": true,
          "markdownDescription": "Default value is '.'\n\nDefault value is : `.`"
        },
        "description": { "type": "string" },
        "dictionaryPageSize": {
          "type": "integer",
          "title": "Max dictionary page size",
          "default": 1048576,
          "$dynamic": false,
          "markdownDescription": "Default value is : `1048576`"
        },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "falseValues": {
          "title": "Values to consider as False",
          "default": ["f", "false", "disabled", "0", "off", "no", ""],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- f\n- \"false\"\n- disabled\n- 0\n- \"off\"\n- \"no\"\n- \"\"`\n\nDefault value is : `- f\n- \"false\"\n- disabled\n- 0\n- \"off\"\n- \"no\"\n- \"\"`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "from": { "type": "string", "title": "Source file URI", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "inferAllFields": {
          "type": "boolean",
          "title": "Try to infer all fields",
          "default": false,
          "$dynamic": false,
          "markdownDescription": "If true, we try to infer all fields with `trueValues`, `trueValues` & `nullValues`.If false, we will infer bool & null only on field declared on schema as `null` and `bool`.\n\nDefault value is : `false`"
        },
        "nullValues": {
          "title": "Values to consider as null",
          "default": [
            "",
            "#N/A",
            "#N/A N/A",
            "#NA",
            "-1.#IND",
            "-1.#QNAN",
            "-NaN",
            "1.#IND",
            "1.#QNAN",
            "NA",
            "n/a",
            "nan",
            "null"
          ],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- \"\"\n- '#N/A'\n- '#N/A N/A'\n- '#NA'\n- -1.#IND\n- -1.#QNAN\n- -NaN\n- 1.#IND\n- 1.#QNAN\n- NA\n- n/a\n- nan\n- \"null\"`\n\nDefault value is : `- \"\"\n- '#N/A'\n- '#N/A N/A'\n- '#NA'\n- -1.#IND\n- -1.#QNAN\n- -NaN\n- 1.#IND\n- 1.#QNAN\n- NA\n- n/a\n- nan\n- \"null\"`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "pageSize": {
          "type": "integer",
          "title": "Target page size",
          "default": 1048576,
          "$dynamic": false,
          "markdownDescription": "Default value is : `1048576`"
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "rowGroupSize": {
          "type": "integer",
          "title": "Target row group size",
          "default": 134217728,
          "$dynamic": false,
          "markdownDescription": "Default value is : `134217728`"
        },
        "schema": {
          "type": "string",
          "title": "The avro schema associated to the data",
          "$dynamic": true
        },
        "strictSchema": {
          "type": "boolean",
          "title": "Whether to consider a field present in the data but not declared in the schema as an error",
          "default": false,
          "$dynamic": false,
          "markdownDescription": "Default value is false\n\nDefault value is : `false`"
        },
        "timeFormat": {
          "type": "string",
          "title": "Format to use when parsing time",
          "default": "HH:mm[:ss][.SSSSSS][XXX]",
          "$dynamic": true,
          "markdownDescription": "Default value is : `\"HH:mm[:ss][.SSSSSS][XXX]\"`"
        },
        "timeZoneId": {
          "type": "string",
          "title": "Timezone to use when no timezone can be parsed on the source.",
          "default": "Europe/Paris",
          "$dynamic": false,
          "markdownDescription": "If null, the timezone will be `UTC` Default value is system timezone\n\nDefault value is : `Europe/Paris`"
        },
        "timeout": { "type": "string", "format": "duration" },
        "trueValues": {
          "title": "Values to consider as True",
          "default": ["t", "true", "enabled", "1", "on", "yes"],
          "$dynamic": true,
          "markdownDescription": "Default value is : `- t\n- \"true\"\n- enabled\n- 1\n- \"on\"\n- \"yes\"`\n\nDefault value is : `- t\n- \"true\"\n- enabled\n- 1\n- \"on\"\n- \"yes\"`",
          "type": "array",
          "items": { "type": "string", "$dynamic": true }
        },
        "type": { "type": "string", "minLength": 1 },
        "version": {
          "type": "string",
          "enum": ["V1", "V2"],
          "title": "Target row group size",
          "default": "V2",
          "$dynamic": false,
          "markdownDescription": "Default value is : `V2`"
        }
      },
      "required": ["from", "id", "schema", "type"],
      "title": "Read a provided file containing ion serialized data and convert it to parquet."
    },
    "io.kestra.plugin.serdes.parquet.ParquetWriter-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.serdes.parquet.ParquetWriter-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.serdes.parquet.ParquetWriter" } },
          "required": ["type"]
        }
      ]
    },
    "io.kestra.plugin.serdes.xml.XmlReader-1": {
      "type": "object",
      "properties": {
        "charset": {
          "type": "string",
          "title": "The name of a supported charset",
          "default": "UTF-8",
          "markdownDescription": "Default value is UTF-8.\n\nDefault value is : `UTF-8`"
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "from": { "type": "string", "title": "Source file URI", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "query": {
          "type": "string",
          "title": "The name of a supported charset",
          "markdownDescription": "Default value is UTF-8."
        },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["from", "id", "type"],
      "title": "Read a xml file and write it to an ion serialized data file."
    },
    "io.kestra.plugin.serdes.xml.XmlReader-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlReader-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.serdes.xml.XmlReader" } },
          "required": ["type"]
        }
      ]
    },
    "io.kestra.plugin.serdes.xml.XmlWriter-1": {
      "type": "object",
      "properties": {
        "charset": {
          "type": "string",
          "title": "The name of a supported charset",
          "default": "UTF-8",
          "$dynamic": true,
          "markdownDescription": "Default value is UTF-8.\n\nDefault value is : `UTF-8`"
        },
        "description": { "type": "string" },
        "disabled": {
          "type": "boolean",
          "default": false,
          "markdownDescription": "Default value is : `false`"
        },
        "from": { "type": "string", "title": "Source file URI", "$dynamic": true },
        "id": { "type": "string", "minLength": 1, "pattern": "[a-zA-Z0-9_-]+" },
        "retry": {
          "anyOf": [
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Constant-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Exponential-2" },
            { "$ref": "#/definitions/io.kestra.core.models.tasks.retrys.Random-2" }
          ]
        },
        "rootName": {
          "type": "string",
          "title": "Xml root name",
          "default": "items",
          "$dynamic": true,
          "markdownDescription": "Default value is : `items`"
        },
        "timeZoneId": {
          "type": "string",
          "title": "Timezone to use when no timezone can be parsed on the source.",
          "default": "Europe/Paris",
          "$dynamic": true,
          "markdownDescription": "Default value is : `Europe/Paris`"
        },
        "timeout": { "type": "string", "format": "duration" },
        "type": { "type": "string", "minLength": 1 }
      },
      "required": ["from", "id", "type"],
      "title": "Read an ion serialized data file and write it to a xml file."
    },
    "io.kestra.plugin.serdes.xml.XmlWriter-2": {
      "allOf": [
        { "$ref": "#/definitions/io.kestra.plugin.serdes.xml.XmlWriter-1" },
        {
          "type": "object",
          "properties": { "type": { "const": "io.kestra.plugin.serdes.xml.XmlWriter" } },
          "required": ["type"]
        }
      ]
    },
    "java.nio.charset.Charset": { "type": "object" }
  }
}
